// ----------------------------------------------------------------------------
// <auto-generated>
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
// </auto-generated>
// ----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;

namespace LTSApi
{
    public unsafe partial class CSecurityFtdcMdSpi : IDisposable
    {
        public partial struct __Internal
        {
            public global::System.IntPtr vfptr_CSecurityFtdcMdSpi;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("securitymduserapi", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0CSecurityFtdcMdSpi@@QAE@XZ")]
            internal static extern global::System.IntPtr ctor_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("securitymduserapi", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0CSecurityFtdcMdSpi@@QAE@ABV0@@Z")]
            internal static extern global::System.IntPtr cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::LTSApi.CSecurityFtdcMdSpi> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::LTSApi.CSecurityFtdcMdSpi>();
        protected void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::LTSApi.CSecurityFtdcMdSpi __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new CSecurityFtdcMdSpi(native.ToPointer(), skipVTables);
        }

        internal static global::LTSApi.CSecurityFtdcMdSpi __CreateInstance(global::LTSApi.CSecurityFtdcMdSpi.__Internal native, bool skipVTables = false)
        {
            return new CSecurityFtdcMdSpi(native, skipVTables);
        }

        private static void* __CopyValue(global::LTSApi.CSecurityFtdcMdSpi.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::LTSApi.CSecurityFtdcMdSpi.__Internal));
            global::LTSApi.CSecurityFtdcMdSpi.__Internal.cctor_1(ret, new global::System.IntPtr(&native));
            return ret.ToPointer();
        }

        private CSecurityFtdcMdSpi(global::LTSApi.CSecurityFtdcMdSpi.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected CSecurityFtdcMdSpi(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
            __OriginalVTables = new void*[] { *(void**) (__Instance + 0) };
        }

        public CSecurityFtdcMdSpi()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::LTSApi.CSecurityFtdcMdSpi.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            __Internal.ctor_0((__Instance + __PointerAdjustment));
            SetupVTables(GetType().FullName == "LTSApi.CSecurityFtdcMdSpi");
        }

        public CSecurityFtdcMdSpi(global::LTSApi.CSecurityFtdcMdSpi _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::LTSApi.CSecurityFtdcMdSpi.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(_0, null))
                throw new global::System.ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = _0.__Instance;
            __Internal.cctor_1((__Instance + __PointerAdjustment), __arg0);
            SetupVTables(GetType().FullName == "LTSApi.CSecurityFtdcMdSpi");
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            global::LTSApi.CSecurityFtdcMdSpi __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            ((global::LTSApi.CSecurityFtdcMdSpi.__Internal*) __Instance)->vfptr_CSecurityFtdcMdSpi = new global::System.IntPtr(__OriginalVTables[0]);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
        }

        public virtual void OnFrontConnected()
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 0 * 4);
            var ___OnFrontConnected_0Delegate = (global::LTSApi.Delegates.Action_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::LTSApi.Delegates.Action_IntPtr));
            ___OnFrontConnected_0Delegate((__Instance + __PointerAdjustment));
        }

        public virtual void OnFrontDisconnected(int nReason)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 1 * 4);
            var ___OnFrontDisconnected_0Delegate = (global::LTSApi.Delegates.Action_IntPtr_int) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::LTSApi.Delegates.Action_IntPtr_int));
            ___OnFrontDisconnected_0Delegate((__Instance + __PointerAdjustment), nReason);
        }

        public virtual void OnHeartBeatWarning(int nTimeLapse)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 2 * 4);
            var ___OnHeartBeatWarning_0Delegate = (global::LTSApi.Delegates.Action_IntPtr_int) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::LTSApi.Delegates.Action_IntPtr_int));
            ___OnHeartBeatWarning_0Delegate((__Instance + __PointerAdjustment), nTimeLapse);
        }

        public virtual void OnRspError(global::LTSApi.CSecurityFtdcRspInfoField pRspInfo, int nRequestID, bool bIsLast)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 3 * 4);
            var ___OnRspError_0Delegate = (global::LTSApi.Delegates.Action_IntPtr_IntPtr_int_bool) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::LTSApi.Delegates.Action_IntPtr_IntPtr_int_bool));
            var ____arg0 = pRspInfo.__Instance;
            var __arg0 = new global::System.IntPtr(&____arg0);
            ___OnRspError_0Delegate((__Instance + __PointerAdjustment), __arg0, nRequestID, bIsLast);
        }

        public virtual void OnRspUserLogin(global::LTSApi.CSecurityFtdcRspUserLoginField pRspUserLogin, global::LTSApi.CSecurityFtdcRspInfoField pRspInfo, int nRequestID, bool bIsLast)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 4 * 4);
            var ___OnRspUserLogin_0Delegate = (global::LTSApi.Delegates.Action_IntPtr_IntPtr_IntPtr_int_bool) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::LTSApi.Delegates.Action_IntPtr_IntPtr_IntPtr_int_bool));
            var ____arg0 = pRspUserLogin.__Instance;
            var __arg0 = new global::System.IntPtr(&____arg0);
            var ____arg1 = pRspInfo.__Instance;
            var __arg1 = new global::System.IntPtr(&____arg1);
            ___OnRspUserLogin_0Delegate((__Instance + __PointerAdjustment), __arg0, __arg1, nRequestID, bIsLast);
        }

        public virtual void OnRspUserLogout(global::LTSApi.CSecurityFtdcUserLogoutField pUserLogout, global::LTSApi.CSecurityFtdcRspInfoField pRspInfo, int nRequestID, bool bIsLast)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 5 * 4);
            var ___OnRspUserLogout_0Delegate = (global::LTSApi.Delegates.Action_IntPtr_IntPtr_IntPtr_int_bool) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::LTSApi.Delegates.Action_IntPtr_IntPtr_IntPtr_int_bool));
            var ____arg0 = pUserLogout.__Instance;
            var __arg0 = new global::System.IntPtr(&____arg0);
            var ____arg1 = pRspInfo.__Instance;
            var __arg1 = new global::System.IntPtr(&____arg1);
            ___OnRspUserLogout_0Delegate((__Instance + __PointerAdjustment), __arg0, __arg1, nRequestID, bIsLast);
        }

        public virtual void OnRspSubMarketData(global::LTSApi.CSecurityFtdcSpecificInstrumentField pSpecificInstrument, global::LTSApi.CSecurityFtdcRspInfoField pRspInfo, int nRequestID, bool bIsLast)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 6 * 4);
            var ___OnRspSubMarketData_0Delegate = (global::LTSApi.Delegates.Action_IntPtr_IntPtr_IntPtr_int_bool) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::LTSApi.Delegates.Action_IntPtr_IntPtr_IntPtr_int_bool));
            var ____arg0 = pSpecificInstrument.__Instance;
            var __arg0 = new global::System.IntPtr(&____arg0);
            var ____arg1 = pRspInfo.__Instance;
            var __arg1 = new global::System.IntPtr(&____arg1);
            ___OnRspSubMarketData_0Delegate((__Instance + __PointerAdjustment), __arg0, __arg1, nRequestID, bIsLast);
        }

        public virtual void OnRspUnSubMarketData(global::LTSApi.CSecurityFtdcSpecificInstrumentField pSpecificInstrument, global::LTSApi.CSecurityFtdcRspInfoField pRspInfo, int nRequestID, bool bIsLast)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 7 * 4);
            var ___OnRspUnSubMarketData_0Delegate = (global::LTSApi.Delegates.Action_IntPtr_IntPtr_IntPtr_int_bool) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::LTSApi.Delegates.Action_IntPtr_IntPtr_IntPtr_int_bool));
            var ____arg0 = pSpecificInstrument.__Instance;
            var __arg0 = new global::System.IntPtr(&____arg0);
            var ____arg1 = pRspInfo.__Instance;
            var __arg1 = new global::System.IntPtr(&____arg1);
            ___OnRspUnSubMarketData_0Delegate((__Instance + __PointerAdjustment), __arg0, __arg1, nRequestID, bIsLast);
        }

        public virtual void OnRtnDepthMarketData(global::LTSApi.CSecurityFtdcDepthMarketDataField pDepthMarketData)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 8 * 4);
            var ___OnRtnDepthMarketData_0Delegate = (global::LTSApi.Delegates.Action_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::LTSApi.Delegates.Action_IntPtr_IntPtr));
            var ____arg0 = pDepthMarketData.__Instance;
            var __arg0 = new global::System.IntPtr(&____arg0);
            ___OnRtnDepthMarketData_0Delegate((__Instance + __PointerAdjustment), __arg0);
        }

        #region Virtual table interop

        // void OnFrontConnected(){}
        private static global::LTSApi.Delegates.Action_IntPtr _OnFrontConnected_0DelegateInstance;

        private static void _OnFrontConnected_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::LTSApi.CSecurityFtdcMdSpi) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.OnFrontConnected();
        }

        // void OnFrontDisconnected(int nReason){}
        private static global::LTSApi.Delegates.Action_IntPtr_int _OnFrontDisconnected_0DelegateInstance;

        private static void _OnFrontDisconnected_0DelegateHook(global::System.IntPtr instance, int nReason)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::LTSApi.CSecurityFtdcMdSpi) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.OnFrontDisconnected(nReason);
        }

        // void OnHeartBeatWarning(int nTimeLapse){}
        private static global::LTSApi.Delegates.Action_IntPtr_int _OnHeartBeatWarning_0DelegateInstance;

        private static void _OnHeartBeatWarning_0DelegateHook(global::System.IntPtr instance, int nTimeLapse)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::LTSApi.CSecurityFtdcMdSpi) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.OnHeartBeatWarning(nTimeLapse);
        }

        // void OnRspError(CSecurityFtdcRspInfoField *pRspInfo, int nRequestID, bool bIsLast) {}
        private static global::LTSApi.Delegates.Action_IntPtr_IntPtr_int_bool _OnRspError_0DelegateInstance;

        private static void _OnRspError_0DelegateHook(global::System.IntPtr instance, global::System.IntPtr pRspInfo, int nRequestID, bool bIsLast)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::LTSApi.CSecurityFtdcMdSpi) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::LTSApi.CSecurityFtdcRspInfoField __result0;
            if (pRspInfo == IntPtr.Zero) __result0 = new global::LTSApi.CSecurityFtdcRspInfoField();
            else __result0 = global::LTSApi.CSecurityFtdcRspInfoField.__CreateInstance(pRspInfo);
            __target.OnRspError(__result0, nRequestID, bIsLast);
        }

        // void OnRspUserLogin(CSecurityFtdcRspUserLoginField *pRspUserLogin, CSecurityFtdcRspInfoField *pRspInfo, int nRequestID, bool bIsLast) {}
        private static global::LTSApi.Delegates.Action_IntPtr_IntPtr_IntPtr_int_bool _OnRspUserLogin_0DelegateInstance;

        private static void _OnRspUserLogin_0DelegateHook(global::System.IntPtr instance, global::System.IntPtr pRspUserLogin, global::System.IntPtr pRspInfo, int nRequestID, bool bIsLast)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::LTSApi.CSecurityFtdcMdSpi) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::LTSApi.CSecurityFtdcRspUserLoginField __result0;
            if (pRspUserLogin == IntPtr.Zero) __result0 = new global::LTSApi.CSecurityFtdcRspUserLoginField();
            else __result0 = global::LTSApi.CSecurityFtdcRspUserLoginField.__CreateInstance(pRspUserLogin);
            global::LTSApi.CSecurityFtdcRspInfoField __result1;
            if (pRspInfo == IntPtr.Zero) __result1 = new global::LTSApi.CSecurityFtdcRspInfoField();
            else __result1 = global::LTSApi.CSecurityFtdcRspInfoField.__CreateInstance(pRspInfo);
            __target.OnRspUserLogin(__result0, __result1, nRequestID, bIsLast);
        }

        // void OnRspUserLogout(CSecurityFtdcUserLogoutField *pUserLogout, CSecurityFtdcRspInfoField *pRspInfo, int nRequestID, bool bIsLast) {}
        private static global::LTSApi.Delegates.Action_IntPtr_IntPtr_IntPtr_int_bool _OnRspUserLogout_0DelegateInstance;

        private static void _OnRspUserLogout_0DelegateHook(global::System.IntPtr instance, global::System.IntPtr pUserLogout, global::System.IntPtr pRspInfo, int nRequestID, bool bIsLast)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::LTSApi.CSecurityFtdcMdSpi) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::LTSApi.CSecurityFtdcUserLogoutField __result0;
            if (pUserLogout == IntPtr.Zero) __result0 = new global::LTSApi.CSecurityFtdcUserLogoutField();
            else __result0 = global::LTSApi.CSecurityFtdcUserLogoutField.__CreateInstance(pUserLogout);
            global::LTSApi.CSecurityFtdcRspInfoField __result1;
            if (pRspInfo == IntPtr.Zero) __result1 = new global::LTSApi.CSecurityFtdcRspInfoField();
            else __result1 = global::LTSApi.CSecurityFtdcRspInfoField.__CreateInstance(pRspInfo);
            __target.OnRspUserLogout(__result0, __result1, nRequestID, bIsLast);
        }

        // void OnRspSubMarketData(CSecurityFtdcSpecificInstrumentField *pSpecificInstrument, CSecurityFtdcRspInfoField *pRspInfo, int nRequestID, bool bIsLast) {}
        private static global::LTSApi.Delegates.Action_IntPtr_IntPtr_IntPtr_int_bool _OnRspSubMarketData_0DelegateInstance;

        private static void _OnRspSubMarketData_0DelegateHook(global::System.IntPtr instance, global::System.IntPtr pSpecificInstrument, global::System.IntPtr pRspInfo, int nRequestID, bool bIsLast)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::LTSApi.CSecurityFtdcMdSpi) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::LTSApi.CSecurityFtdcSpecificInstrumentField __result0;
            if (pSpecificInstrument == IntPtr.Zero) __result0 = new global::LTSApi.CSecurityFtdcSpecificInstrumentField();
            else __result0 = global::LTSApi.CSecurityFtdcSpecificInstrumentField.__CreateInstance(pSpecificInstrument);
            global::LTSApi.CSecurityFtdcRspInfoField __result1;
            if (pRspInfo == IntPtr.Zero) __result1 = new global::LTSApi.CSecurityFtdcRspInfoField();
            else __result1 = global::LTSApi.CSecurityFtdcRspInfoField.__CreateInstance(pRspInfo);
            __target.OnRspSubMarketData(__result0, __result1, nRequestID, bIsLast);
        }

        // void OnRspUnSubMarketData(CSecurityFtdcSpecificInstrumentField *pSpecificInstrument, CSecurityFtdcRspInfoField *pRspInfo, int nRequestID, bool bIsLast) {}
        private static global::LTSApi.Delegates.Action_IntPtr_IntPtr_IntPtr_int_bool _OnRspUnSubMarketData_0DelegateInstance;

        private static void _OnRspUnSubMarketData_0DelegateHook(global::System.IntPtr instance, global::System.IntPtr pSpecificInstrument, global::System.IntPtr pRspInfo, int nRequestID, bool bIsLast)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::LTSApi.CSecurityFtdcMdSpi) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::LTSApi.CSecurityFtdcSpecificInstrumentField __result0;
            if (pSpecificInstrument == IntPtr.Zero) __result0 = new global::LTSApi.CSecurityFtdcSpecificInstrumentField();
            else __result0 = global::LTSApi.CSecurityFtdcSpecificInstrumentField.__CreateInstance(pSpecificInstrument);
            global::LTSApi.CSecurityFtdcRspInfoField __result1;
            if (pRspInfo == IntPtr.Zero) __result1 = new global::LTSApi.CSecurityFtdcRspInfoField();
            else __result1 = global::LTSApi.CSecurityFtdcRspInfoField.__CreateInstance(pRspInfo);
            __target.OnRspUnSubMarketData(__result0, __result1, nRequestID, bIsLast);
        }

        // void OnRtnDepthMarketData(CSecurityFtdcDepthMarketDataField *pDepthMarketData) {}
        private static global::LTSApi.Delegates.Action_IntPtr_IntPtr _OnRtnDepthMarketData_0DelegateInstance;

        private static void _OnRtnDepthMarketData_0DelegateHook(global::System.IntPtr instance, global::System.IntPtr pDepthMarketData)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::LTSApi.CSecurityFtdcMdSpi) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::LTSApi.CSecurityFtdcDepthMarketDataField __result0;
            if (pDepthMarketData == IntPtr.Zero) __result0 = new global::LTSApi.CSecurityFtdcDepthMarketDataField();
            else __result0 = global::LTSApi.CSecurityFtdcDepthMarketDataField.__CreateInstance(pDepthMarketData);
            __target.OnRtnDepthMarketData(__result0);
        }

        private static void*[] __ManagedVTables;
        private static void*[] _Thunks;

        private void SetupVTables(bool destructorOnly = false)
        {
            if (__OriginalVTables != null)
                return;
            __OriginalVTables = new void*[] { *(void**) (__Instance + 0) };

            if (destructorOnly)
                return;
            if (_Thunks == null)
            {
                _Thunks = new void*[9];
                _OnFrontConnected_0DelegateInstance += _OnFrontConnected_0DelegateHook;
                _Thunks[0] = Marshal.GetFunctionPointerForDelegate(_OnFrontConnected_0DelegateInstance).ToPointer();
                _OnFrontDisconnected_0DelegateInstance += _OnFrontDisconnected_0DelegateHook;
                _Thunks[1] = Marshal.GetFunctionPointerForDelegate(_OnFrontDisconnected_0DelegateInstance).ToPointer();
                _OnHeartBeatWarning_0DelegateInstance += _OnHeartBeatWarning_0DelegateHook;
                _Thunks[2] = Marshal.GetFunctionPointerForDelegate(_OnHeartBeatWarning_0DelegateInstance).ToPointer();
                _OnRspError_0DelegateInstance += _OnRspError_0DelegateHook;
                _Thunks[3] = Marshal.GetFunctionPointerForDelegate(_OnRspError_0DelegateInstance).ToPointer();
                _OnRspUserLogin_0DelegateInstance += _OnRspUserLogin_0DelegateHook;
                _Thunks[4] = Marshal.GetFunctionPointerForDelegate(_OnRspUserLogin_0DelegateInstance).ToPointer();
                _OnRspUserLogout_0DelegateInstance += _OnRspUserLogout_0DelegateHook;
                _Thunks[5] = Marshal.GetFunctionPointerForDelegate(_OnRspUserLogout_0DelegateInstance).ToPointer();
                _OnRspSubMarketData_0DelegateInstance += _OnRspSubMarketData_0DelegateHook;
                _Thunks[6] = Marshal.GetFunctionPointerForDelegate(_OnRspSubMarketData_0DelegateInstance).ToPointer();
                _OnRspUnSubMarketData_0DelegateInstance += _OnRspUnSubMarketData_0DelegateHook;
                _Thunks[7] = Marshal.GetFunctionPointerForDelegate(_OnRspUnSubMarketData_0DelegateInstance).ToPointer();
                _OnRtnDepthMarketData_0DelegateInstance += _OnRtnDepthMarketData_0DelegateHook;
                _Thunks[8] = Marshal.GetFunctionPointerForDelegate(_OnRtnDepthMarketData_0DelegateInstance).ToPointer();
            }

            if (__ManagedVTables == null)
            {
                __ManagedVTables = new void*[1];
                var vfptr0 = Marshal.AllocHGlobal(9 * 4);
                __ManagedVTables[0] = vfptr0.ToPointer();
                *(void**) (vfptr0 + 0) = _Thunks[0];
                *(void**) (vfptr0 + 4) = _Thunks[1];
                *(void**) (vfptr0 + 8) = _Thunks[2];
                *(void**) (vfptr0 + 12) = _Thunks[3];
                *(void**) (vfptr0 + 16) = _Thunks[4];
                *(void**) (vfptr0 + 20) = _Thunks[5];
                *(void**) (vfptr0 + 24) = _Thunks[6];
                *(void**) (vfptr0 + 28) = _Thunks[7];
                *(void**) (vfptr0 + 32) = _Thunks[8];
            }

            *(void**) (__Instance + 0) = __ManagedVTables[0];
        }

        #endregion
    }

    public unsafe abstract partial class CSecurityFtdcMdApi : IDisposable
    {
        public partial struct __Internal
        {
            public global::System.IntPtr vfptr_CSecurityFtdcMdApi;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("securitymduserapi", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0CSecurityFtdcMdApi@@QAE@XZ")]
            internal static extern global::System.IntPtr ctor_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("securitymduserapi", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0CSecurityFtdcMdApi@@QAE@ABV0@@Z")]
            internal static extern global::System.IntPtr cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("securitymduserapi", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??1CSecurityFtdcMdApi@@IAE@XZ")]
            internal static extern void dtor_0(global::System.IntPtr instance, int delete);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("securitymduserapi", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?CreateFtdcMdApi@CSecurityFtdcMdApi@@SAPAV1@PBD@Z")]
            internal static extern global::System.IntPtr CreateFtdcMdApi_0([MarshalAs(UnmanagedType.LPStr)] string pszFlowPath);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::LTSApi.CSecurityFtdcMdApi> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::LTSApi.CSecurityFtdcMdApi>();
        protected void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::LTSApi.CSecurityFtdcMdApi __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new CSecurityFtdcMdApiInternal(native.ToPointer(), skipVTables);
        }

        internal static global::LTSApi.CSecurityFtdcMdApi __CreateInstance(global::LTSApi.CSecurityFtdcMdApi.__Internal native, bool skipVTables = false)
        {
            return new CSecurityFtdcMdApiInternal(native, skipVTables);
        }

        protected CSecurityFtdcMdApi(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
            __OriginalVTables = new void*[] { *(void**) (__Instance + 0) };
        }

        protected CSecurityFtdcMdApi()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::LTSApi.CSecurityFtdcMdApi.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            __Internal.ctor_0((__Instance + __PointerAdjustment));
            SetupVTables(GetType().FullName == "LTSApi.CSecurityFtdcMdApi");
        }

        protected CSecurityFtdcMdApi(global::LTSApi.CSecurityFtdcMdApi _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::LTSApi.CSecurityFtdcMdApi.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(_0, null))
                throw new global::System.ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = _0.__Instance;
            __Internal.cctor_1((__Instance + __PointerAdjustment), __arg0);
            SetupVTables(GetType().FullName == "LTSApi.CSecurityFtdcMdApi");
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            global::LTSApi.CSecurityFtdcMdApi __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            ((global::LTSApi.CSecurityFtdcMdApi.__Internal*) __Instance)->vfptr_CSecurityFtdcMdApi = new global::System.IntPtr(__OriginalVTables[0]);
            if (disposing)
                __Internal.dtor_0((__Instance + __PointerAdjustment), 0);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
        }

        public abstract void Release();

        public abstract void Init();

        public abstract int Join();

        public abstract void RegisterFront(sbyte* pszFrontAddress);

        public abstract void RegisterSpi(global::LTSApi.CSecurityFtdcMdSpi pSpi);

        public abstract int SubscribeMarketData(char** ppInstrumentID, int nCount, sbyte* pExchageID);

        public abstract int UnSubscribeMarketData(char** ppInstrumentID, int nCount, sbyte* pExchageID);

        public abstract int ReqUserLogin(global::LTSApi.CSecurityFtdcReqUserLoginField pReqUserLoginField, int nRequestID);

        public abstract int ReqUserLogout(global::LTSApi.CSecurityFtdcUserLogoutField pUserLogout, int nRequestID);

        public static global::LTSApi.CSecurityFtdcMdApi CreateFtdcMdApi(string pszFlowPath)
        {
            var __ret = __Internal.CreateFtdcMdApi_0(pszFlowPath);
            global::LTSApi.CSecurityFtdcMdApi __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::LTSApi.CSecurityFtdcMdApi.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::LTSApi.CSecurityFtdcMdApi) global::LTSApi.CSecurityFtdcMdApi.NativeToManagedMap[__ret];
            else __result0 = global::LTSApi.CSecurityFtdcMdApi.__CreateInstance(__ret);
            return __result0;
        }

        public abstract string TradingDay
        {
            get;
        }

        #region Virtual table interop

        // void Release() = 0
        private static global::LTSApi.Delegates.Action_IntPtr _Release_0DelegateInstance;

        private static void _Release_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::LTSApi.CSecurityFtdcMdApi) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.Release();
        }

        // void Init() = 0
        private static global::LTSApi.Delegates.Action_IntPtr _Init_0DelegateInstance;

        private static void _Init_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::LTSApi.CSecurityFtdcMdApi) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.Init();
        }

        // int Join() = 0
        private static global::LTSApi.Delegates.Func_int_IntPtr _Join_0DelegateInstance;

        private static int _Join_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::LTSApi.CSecurityFtdcMdApi) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.Join();
            return __ret;
        }

        // char *GetTradingDay() = 0
        private static global::LTSApi.Delegates.Func_string_IntPtr _GetTradingDay_0DelegateInstance;

        private static global::System.IntPtr _GetTradingDay_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::LTSApi.CSecurityFtdcMdApi) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.TradingDay;
            return Marshal.StringToHGlobalAnsi(__ret);
        }

        // void RegisterFront(char *pszFrontAddress) = 0
        private static global::LTSApi.Delegates.Action_IntPtr_sbytePtr _RegisterFront_0DelegateInstance;

        private static void _RegisterFront_0DelegateHook(global::System.IntPtr instance, sbyte* pszFrontAddress)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::LTSApi.CSecurityFtdcMdApi) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.RegisterFront(pszFrontAddress);
        }

        // void RegisterSpi(CSecurityFtdcMdSpi *pSpi) = 0
        private static global::LTSApi.Delegates.Action_IntPtr_IntPtr _RegisterSpi_0DelegateInstance;

        private static void _RegisterSpi_0DelegateHook(global::System.IntPtr instance, global::System.IntPtr pSpi)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::LTSApi.CSecurityFtdcMdApi) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::LTSApi.CSecurityFtdcMdSpi __result0;
            if (pSpi == IntPtr.Zero) __result0 = null;
            else if (global::LTSApi.CSecurityFtdcMdSpi.NativeToManagedMap.ContainsKey(pSpi))
                __result0 = (global::LTSApi.CSecurityFtdcMdSpi) global::LTSApi.CSecurityFtdcMdSpi.NativeToManagedMap[pSpi];
            else __result0 = global::LTSApi.CSecurityFtdcMdSpi.__CreateInstance(pSpi);
            __target.RegisterSpi(__result0);
        }

        // int SubscribeMarketData(char *ppInstrumentID[], int nCount, char* pExchageID) = 0
        private static global::LTSApi.Delegates.Func_int_IntPtr_charPtrPtr_int_sbytePtr _SubscribeMarketData_0DelegateInstance;

        private static int _SubscribeMarketData_0DelegateHook(global::System.IntPtr instance, char** ppInstrumentID, int nCount, sbyte* pExchageID)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::LTSApi.CSecurityFtdcMdApi) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.SubscribeMarketData(ppInstrumentID, nCount, pExchageID);
            return __ret;
        }

        // int UnSubscribeMarketData(char *ppInstrumentID[], int nCount, char* pExchageID) = 0
        private static global::LTSApi.Delegates.Func_int_IntPtr_charPtrPtr_int_sbytePtr _UnSubscribeMarketData_0DelegateInstance;

        private static int _UnSubscribeMarketData_0DelegateHook(global::System.IntPtr instance, char** ppInstrumentID, int nCount, sbyte* pExchageID)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::LTSApi.CSecurityFtdcMdApi) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.UnSubscribeMarketData(ppInstrumentID, nCount, pExchageID);
            return __ret;
        }

        // int ReqUserLogin(CSecurityFtdcReqUserLoginField *pReqUserLoginField, int nRequestID) = 0
        private static global::LTSApi.Delegates.Func_int_IntPtr_IntPtr_int _ReqUserLogin_0DelegateInstance;

        private static int _ReqUserLogin_0DelegateHook(global::System.IntPtr instance, global::System.IntPtr pReqUserLoginField, int nRequestID)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::LTSApi.CSecurityFtdcMdApi) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::LTSApi.CSecurityFtdcReqUserLoginField __result0;
            if (pReqUserLoginField == IntPtr.Zero) __result0 = new global::LTSApi.CSecurityFtdcReqUserLoginField();
            else __result0 = global::LTSApi.CSecurityFtdcReqUserLoginField.__CreateInstance(pReqUserLoginField);
            var __ret = __target.ReqUserLogin(__result0, nRequestID);
            return __ret;
        }

        // int ReqUserLogout(CSecurityFtdcUserLogoutField *pUserLogout, int nRequestID) = 0
        private static global::LTSApi.Delegates.Func_int_IntPtr_IntPtr_int _ReqUserLogout_0DelegateInstance;

        private static int _ReqUserLogout_0DelegateHook(global::System.IntPtr instance, global::System.IntPtr pUserLogout, int nRequestID)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::LTSApi.CSecurityFtdcMdApi) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::LTSApi.CSecurityFtdcUserLogoutField __result0;
            if (pUserLogout == IntPtr.Zero) __result0 = new global::LTSApi.CSecurityFtdcUserLogoutField();
            else __result0 = global::LTSApi.CSecurityFtdcUserLogoutField.__CreateInstance(pUserLogout);
            var __ret = __target.ReqUserLogout(__result0, nRequestID);
            return __ret;
        }

        private static void*[] __ManagedVTables;
        private static void*[] _Thunks;

        private void SetupVTables(bool destructorOnly = false)
        {
            if (__OriginalVTables != null)
                return;
            __OriginalVTables = new void*[] { *(void**) (__Instance + 0) };

            if (destructorOnly)
                return;
            if (_Thunks == null)
            {
                _Thunks = new void*[10];
                _Release_0DelegateInstance += _Release_0DelegateHook;
                _Thunks[0] = Marshal.GetFunctionPointerForDelegate(_Release_0DelegateInstance).ToPointer();
                _Init_0DelegateInstance += _Init_0DelegateHook;
                _Thunks[1] = Marshal.GetFunctionPointerForDelegate(_Init_0DelegateInstance).ToPointer();
                _Join_0DelegateInstance += _Join_0DelegateHook;
                _Thunks[2] = Marshal.GetFunctionPointerForDelegate(_Join_0DelegateInstance).ToPointer();
                _GetTradingDay_0DelegateInstance += _GetTradingDay_0DelegateHook;
                _Thunks[3] = Marshal.GetFunctionPointerForDelegate(_GetTradingDay_0DelegateInstance).ToPointer();
                _RegisterFront_0DelegateInstance += _RegisterFront_0DelegateHook;
                _Thunks[4] = Marshal.GetFunctionPointerForDelegate(_RegisterFront_0DelegateInstance).ToPointer();
                _RegisterSpi_0DelegateInstance += _RegisterSpi_0DelegateHook;
                _Thunks[5] = Marshal.GetFunctionPointerForDelegate(_RegisterSpi_0DelegateInstance).ToPointer();
                _SubscribeMarketData_0DelegateInstance += _SubscribeMarketData_0DelegateHook;
                _Thunks[6] = Marshal.GetFunctionPointerForDelegate(_SubscribeMarketData_0DelegateInstance).ToPointer();
                _UnSubscribeMarketData_0DelegateInstance += _UnSubscribeMarketData_0DelegateHook;
                _Thunks[7] = Marshal.GetFunctionPointerForDelegate(_UnSubscribeMarketData_0DelegateInstance).ToPointer();
                _ReqUserLogin_0DelegateInstance += _ReqUserLogin_0DelegateHook;
                _Thunks[8] = Marshal.GetFunctionPointerForDelegate(_ReqUserLogin_0DelegateInstance).ToPointer();
                _ReqUserLogout_0DelegateInstance += _ReqUserLogout_0DelegateHook;
                _Thunks[9] = Marshal.GetFunctionPointerForDelegate(_ReqUserLogout_0DelegateInstance).ToPointer();
            }

            if (__ManagedVTables == null)
            {
                __ManagedVTables = new void*[1];
                var vfptr0 = Marshal.AllocHGlobal(10 * 4);
                __ManagedVTables[0] = vfptr0.ToPointer();
                *(void**) (vfptr0 + 0) = _Thunks[0];
                *(void**) (vfptr0 + 4) = _Thunks[1];
                *(void**) (vfptr0 + 8) = _Thunks[2];
                *(void**) (vfptr0 + 12) = _Thunks[3];
                *(void**) (vfptr0 + 16) = _Thunks[4];
                *(void**) (vfptr0 + 20) = _Thunks[5];
                *(void**) (vfptr0 + 24) = _Thunks[6];
                *(void**) (vfptr0 + 28) = _Thunks[7];
                *(void**) (vfptr0 + 32) = _Thunks[8];
                *(void**) (vfptr0 + 36) = _Thunks[9];
            }

            *(void**) (__Instance + 0) = __ManagedVTables[0];
        }

        #endregion
    }

    public unsafe partial class CSecurityFtdcMdApiInternal : global::LTSApi.CSecurityFtdcMdApi, IDisposable
    {
        private static void* __CopyValue(global::LTSApi.CSecurityFtdcMdApi.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::LTSApi.CSecurityFtdcMdApi.__Internal));
            *(global::LTSApi.CSecurityFtdcMdApi.__Internal*) ret = native;
            return ret.ToPointer();
        }

        internal CSecurityFtdcMdApiInternal(global::LTSApi.CSecurityFtdcMdApi.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        internal CSecurityFtdcMdApiInternal(void* native, bool skipVTables = false)
            : base((void*) null)
        {
            __PointerAdjustment = 0;
            __Instance = new global::System.IntPtr(native);
            __OriginalVTables = new void*[] { *(void**) (__Instance + 0) };
        }

        public override void Release()
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 0 * 4);
            var ___Release_0Delegate = (global::LTSApi.Delegates.Action_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::LTSApi.Delegates.Action_IntPtr));
            ___Release_0Delegate((__Instance + __PointerAdjustment));
        }

        public override void Init()
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 1 * 4);
            var ___Init_0Delegate = (global::LTSApi.Delegates.Action_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::LTSApi.Delegates.Action_IntPtr));
            ___Init_0Delegate((__Instance + __PointerAdjustment));
        }

        public override int Join()
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 2 * 4);
            var ___Join_0Delegate = (global::LTSApi.Delegates.Func_int_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::LTSApi.Delegates.Func_int_IntPtr));
            var __ret = ___Join_0Delegate((__Instance + __PointerAdjustment));
            return __ret;
        }

        public override void RegisterFront(sbyte* pszFrontAddress)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 4 * 4);
            var ___RegisterFront_0Delegate = (global::LTSApi.Delegates.Action_IntPtr_sbytePtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::LTSApi.Delegates.Action_IntPtr_sbytePtr));
            ___RegisterFront_0Delegate((__Instance + __PointerAdjustment), pszFrontAddress);
        }

        public override void RegisterSpi(global::LTSApi.CSecurityFtdcMdSpi pSpi)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 5 * 4);
            var ___RegisterSpi_0Delegate = (global::LTSApi.Delegates.Action_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::LTSApi.Delegates.Action_IntPtr_IntPtr));
            var __arg0 = ReferenceEquals(pSpi, null) ? global::System.IntPtr.Zero : pSpi.__Instance;
            ___RegisterSpi_0Delegate((__Instance + __PointerAdjustment), __arg0);
        }

        public override int SubscribeMarketData(char** ppInstrumentID, int nCount, sbyte* pExchageID)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 6 * 4);
            var ___SubscribeMarketData_0Delegate = (global::LTSApi.Delegates.Func_int_IntPtr_charPtrPtr_int_sbytePtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::LTSApi.Delegates.Func_int_IntPtr_charPtrPtr_int_sbytePtr));
            var __ret = ___SubscribeMarketData_0Delegate((__Instance + __PointerAdjustment), ppInstrumentID, nCount, pExchageID);
            return __ret;
        }

        public override int UnSubscribeMarketData(char** ppInstrumentID, int nCount, sbyte* pExchageID)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 7 * 4);
            var ___UnSubscribeMarketData_0Delegate = (global::LTSApi.Delegates.Func_int_IntPtr_charPtrPtr_int_sbytePtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::LTSApi.Delegates.Func_int_IntPtr_charPtrPtr_int_sbytePtr));
            var __ret = ___UnSubscribeMarketData_0Delegate((__Instance + __PointerAdjustment), ppInstrumentID, nCount, pExchageID);
            return __ret;
        }

        public override int ReqUserLogin(global::LTSApi.CSecurityFtdcReqUserLoginField pReqUserLoginField, int nRequestID)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 8 * 4);
            var ___ReqUserLogin_0Delegate = (global::LTSApi.Delegates.Func_int_IntPtr_IntPtr_int) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::LTSApi.Delegates.Func_int_IntPtr_IntPtr_int));
            var ____arg0 = pReqUserLoginField.__Instance;
            var __arg0 = new global::System.IntPtr(&____arg0);
            var __ret = ___ReqUserLogin_0Delegate((__Instance + __PointerAdjustment), __arg0, nRequestID);
            return __ret;
        }

        public override int ReqUserLogout(global::LTSApi.CSecurityFtdcUserLogoutField pUserLogout, int nRequestID)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 9 * 4);
            var ___ReqUserLogout_0Delegate = (global::LTSApi.Delegates.Func_int_IntPtr_IntPtr_int) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::LTSApi.Delegates.Func_int_IntPtr_IntPtr_int));
            var ____arg0 = pUserLogout.__Instance;
            var __arg0 = new global::System.IntPtr(&____arg0);
            var __ret = ___ReqUserLogout_0Delegate((__Instance + __PointerAdjustment), __arg0, nRequestID);
            return __ret;
        }

        public override string TradingDay
        {
            get
            {
                var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 3 * 4);
                var ___GetTradingDay_0Delegate = (global::LTSApi.Delegates.Func_string_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::LTSApi.Delegates.Func_string_IntPtr));
                var __ret = ___GetTradingDay_0Delegate((__Instance + __PointerAdjustment));
                return Marshal.PtrToStringAnsi(__ret);
            }
        }
    }

    public unsafe partial struct CSecurityFtdcRspInfoField
    {
        public partial struct __Internal
        {
            public int ErrorID;

            public fixed sbyte ErrorMsg[81];

            [SuppressUnmanagedCodeSecurity]
            [DllImport("securitymduserapi", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0CSecurityFtdcRspInfoField@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);
        }

        private CSecurityFtdcRspInfoField.__Internal __instance;
        internal CSecurityFtdcRspInfoField.__Internal __Instance { get { return __instance; } }

        internal static global::LTSApi.CSecurityFtdcRspInfoField __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new CSecurityFtdcRspInfoField(native.ToPointer(), skipVTables);
        }

        internal static global::LTSApi.CSecurityFtdcRspInfoField __CreateInstance(global::LTSApi.CSecurityFtdcRspInfoField.__Internal native, bool skipVTables = false)
        {
            return new CSecurityFtdcRspInfoField(native, skipVTables);
        }

        private CSecurityFtdcRspInfoField(global::LTSApi.CSecurityFtdcRspInfoField.__Internal native, bool skipVTables = false)
            : this()
        {
            __instance = native;
        }

        private CSecurityFtdcRspInfoField(void* native, bool skipVTables = false) : this()
        {
            __instance = *(global::LTSApi.CSecurityFtdcRspInfoField.__Internal*) native;
        }

        public CSecurityFtdcRspInfoField(global::LTSApi.CSecurityFtdcRspInfoField _0)
            : this()
        {
            var ____arg0 = _0.__Instance;
            var __arg0 = new global::System.IntPtr(&____arg0);
            fixed (__Internal* __instancePtr = &__instance)
            {
                __Internal.cctor_1(new global::System.IntPtr(__instancePtr), __arg0);
            }
        }

        public int ErrorID
        {
            get
            {
                return __instance.ErrorID;
            }

            set
            {
                __instance.ErrorID = value;
            }
        }

        public sbyte[] ErrorMsg
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.ErrorMsg)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[81];
                        for (int i = 0; i < 81; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.ErrorMsg)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 81; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }
    }

    public unsafe partial struct CSecurityFtdcExchangeField
    {
        public partial struct __Internal
        {
            public fixed sbyte ExchangeID[9];

            public fixed sbyte ExchangeName[31];

            public sbyte ExchangeProperty;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("securitymduserapi", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0CSecurityFtdcExchangeField@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);
        }

        private CSecurityFtdcExchangeField.__Internal __instance;
        internal CSecurityFtdcExchangeField.__Internal __Instance { get { return __instance; } }

        internal static global::LTSApi.CSecurityFtdcExchangeField __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new CSecurityFtdcExchangeField(native.ToPointer(), skipVTables);
        }

        internal static global::LTSApi.CSecurityFtdcExchangeField __CreateInstance(global::LTSApi.CSecurityFtdcExchangeField.__Internal native, bool skipVTables = false)
        {
            return new CSecurityFtdcExchangeField(native, skipVTables);
        }

        private CSecurityFtdcExchangeField(global::LTSApi.CSecurityFtdcExchangeField.__Internal native, bool skipVTables = false)
            : this()
        {
            __instance = native;
        }

        private CSecurityFtdcExchangeField(void* native, bool skipVTables = false) : this()
        {
            __instance = *(global::LTSApi.CSecurityFtdcExchangeField.__Internal*) native;
        }

        public CSecurityFtdcExchangeField(global::LTSApi.CSecurityFtdcExchangeField _0)
            : this()
        {
            var ____arg0 = _0.__Instance;
            var __arg0 = new global::System.IntPtr(&____arg0);
            fixed (__Internal* __instancePtr = &__instance)
            {
                __Internal.cctor_1(new global::System.IntPtr(__instancePtr), __arg0);
            }
        }

        public sbyte[] ExchangeID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.ExchangeID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[9];
                        for (int i = 0; i < 9; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.ExchangeID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 9; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] ExchangeName
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.ExchangeName)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[31];
                        for (int i = 0; i < 31; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.ExchangeName)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 31; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte ExchangeProperty
        {
            get
            {
                return __instance.ExchangeProperty;
            }

            set
            {
                __instance.ExchangeProperty = value;
            }
        }
    }

    public unsafe partial struct CSecurityFtdcProductField
    {
        public partial struct __Internal
        {
            public fixed sbyte ProductID[31];

            public fixed sbyte ProductName[21];

            public fixed sbyte ExchangeID[9];

            public sbyte ProductClass;

            public int VolumeMultiple;

            public double PriceTick;

            public int MaxMarketOrderVolume;

            public int MinMarketOrderVolume;

            public int MaxLimitOrderVolume;

            public int MinLimitOrderVolume;

            public sbyte PositionType;

            public sbyte PositionDateType;

            public int EFTMinTradeVolume;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("securitymduserapi", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0CSecurityFtdcProductField@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);
        }

        private CSecurityFtdcProductField.__Internal __instance;
        internal CSecurityFtdcProductField.__Internal __Instance { get { return __instance; } }

        internal static global::LTSApi.CSecurityFtdcProductField __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new CSecurityFtdcProductField(native.ToPointer(), skipVTables);
        }

        internal static global::LTSApi.CSecurityFtdcProductField __CreateInstance(global::LTSApi.CSecurityFtdcProductField.__Internal native, bool skipVTables = false)
        {
            return new CSecurityFtdcProductField(native, skipVTables);
        }

        private CSecurityFtdcProductField(global::LTSApi.CSecurityFtdcProductField.__Internal native, bool skipVTables = false)
            : this()
        {
            __instance = native;
        }

        private CSecurityFtdcProductField(void* native, bool skipVTables = false) : this()
        {
            __instance = *(global::LTSApi.CSecurityFtdcProductField.__Internal*) native;
        }

        public CSecurityFtdcProductField(global::LTSApi.CSecurityFtdcProductField _0)
            : this()
        {
            var ____arg0 = _0.__Instance;
            var __arg0 = new global::System.IntPtr(&____arg0);
            fixed (__Internal* __instancePtr = &__instance)
            {
                __Internal.cctor_1(new global::System.IntPtr(__instancePtr), __arg0);
            }
        }

        public sbyte[] ProductID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.ProductID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[31];
                        for (int i = 0; i < 31; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.ProductID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 31; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] ProductName
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.ProductName)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[21];
                        for (int i = 0; i < 21; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.ProductName)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 21; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] ExchangeID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.ExchangeID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[9];
                        for (int i = 0; i < 9; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.ExchangeID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 9; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte ProductClass
        {
            get
            {
                return __instance.ProductClass;
            }

            set
            {
                __instance.ProductClass = value;
            }
        }

        public int VolumeMultiple
        {
            get
            {
                return __instance.VolumeMultiple;
            }

            set
            {
                __instance.VolumeMultiple = value;
            }
        }

        public double PriceTick
        {
            get
            {
                return __instance.PriceTick;
            }

            set
            {
                __instance.PriceTick = value;
            }
        }

        public int MaxMarketOrderVolume
        {
            get
            {
                return __instance.MaxMarketOrderVolume;
            }

            set
            {
                __instance.MaxMarketOrderVolume = value;
            }
        }

        public int MinMarketOrderVolume
        {
            get
            {
                return __instance.MinMarketOrderVolume;
            }

            set
            {
                __instance.MinMarketOrderVolume = value;
            }
        }

        public int MaxLimitOrderVolume
        {
            get
            {
                return __instance.MaxLimitOrderVolume;
            }

            set
            {
                __instance.MaxLimitOrderVolume = value;
            }
        }

        public int MinLimitOrderVolume
        {
            get
            {
                return __instance.MinLimitOrderVolume;
            }

            set
            {
                __instance.MinLimitOrderVolume = value;
            }
        }

        public sbyte PositionType
        {
            get
            {
                return __instance.PositionType;
            }

            set
            {
                __instance.PositionType = value;
            }
        }

        public sbyte PositionDateType
        {
            get
            {
                return __instance.PositionDateType;
            }

            set
            {
                __instance.PositionDateType = value;
            }
        }

        public int EFTMinTradeVolume
        {
            get
            {
                return __instance.EFTMinTradeVolume;
            }

            set
            {
                __instance.EFTMinTradeVolume = value;
            }
        }
    }

    public unsafe partial struct CSecurityFtdcInstrumentField
    {
        public partial struct __Internal
        {
            public fixed sbyte InstrumentID[31];

            public fixed sbyte ExchangeID[9];

            public fixed sbyte InstrumentName[21];

            public fixed sbyte ExchangeInstID[31];

            public fixed sbyte ProductID[31];

            public sbyte ProductClass;

            public int DeliveryYear;

            public int DeliveryMonth;

            public int MaxMarketOrderVolume;

            public int MinMarketOrderVolume;

            public int MaxLimitOrderVolume;

            public int MinLimitOrderVolume;

            public int VolumeMultiple;

            public double PriceTick;

            public fixed sbyte CreateDate[9];

            public fixed sbyte OpenDate[9];

            public fixed sbyte ExpireDate[9];

            public fixed sbyte StartDelivDate[9];

            public fixed sbyte EndDelivDate[9];

            public sbyte InstLifePhase;

            public int IsTrading;

            public sbyte PositionType;

            public int OrderCanBeWithdraw;

            public int MinBuyVolume;

            public int MinSellVolume;

            public fixed sbyte RightModelID[31];

            public sbyte PosTradeType;

            public fixed sbyte MarketID[31];

            public double ExecPrice;

            public double UnitMargin;

            public sbyte InstrumentType;

            public double OptionsMarginParam1;

            public double OptionsMarginParam2;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("securitymduserapi", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0CSecurityFtdcInstrumentField@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);
        }

        private CSecurityFtdcInstrumentField.__Internal __instance;
        internal CSecurityFtdcInstrumentField.__Internal __Instance { get { return __instance; } }

        internal static global::LTSApi.CSecurityFtdcInstrumentField __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new CSecurityFtdcInstrumentField(native.ToPointer(), skipVTables);
        }

        internal static global::LTSApi.CSecurityFtdcInstrumentField __CreateInstance(global::LTSApi.CSecurityFtdcInstrumentField.__Internal native, bool skipVTables = false)
        {
            return new CSecurityFtdcInstrumentField(native, skipVTables);
        }

        private CSecurityFtdcInstrumentField(global::LTSApi.CSecurityFtdcInstrumentField.__Internal native, bool skipVTables = false)
            : this()
        {
            __instance = native;
        }

        private CSecurityFtdcInstrumentField(void* native, bool skipVTables = false) : this()
        {
            __instance = *(global::LTSApi.CSecurityFtdcInstrumentField.__Internal*) native;
        }

        public CSecurityFtdcInstrumentField(global::LTSApi.CSecurityFtdcInstrumentField _0)
            : this()
        {
            var ____arg0 = _0.__Instance;
            var __arg0 = new global::System.IntPtr(&____arg0);
            fixed (__Internal* __instancePtr = &__instance)
            {
                __Internal.cctor_1(new global::System.IntPtr(__instancePtr), __arg0);
            }
        }

        public sbyte[] InstrumentID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.InstrumentID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[31];
                        for (int i = 0; i < 31; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.InstrumentID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 31; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] ExchangeID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.ExchangeID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[9];
                        for (int i = 0; i < 9; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.ExchangeID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 9; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] InstrumentName
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.InstrumentName)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[21];
                        for (int i = 0; i < 21; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.InstrumentName)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 21; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] ExchangeInstID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.ExchangeInstID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[31];
                        for (int i = 0; i < 31; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.ExchangeInstID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 31; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] ProductID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.ProductID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[31];
                        for (int i = 0; i < 31; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.ProductID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 31; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte ProductClass
        {
            get
            {
                return __instance.ProductClass;
            }

            set
            {
                __instance.ProductClass = value;
            }
        }

        public int DeliveryYear
        {
            get
            {
                return __instance.DeliveryYear;
            }

            set
            {
                __instance.DeliveryYear = value;
            }
        }

        public int DeliveryMonth
        {
            get
            {
                return __instance.DeliveryMonth;
            }

            set
            {
                __instance.DeliveryMonth = value;
            }
        }

        public int MaxMarketOrderVolume
        {
            get
            {
                return __instance.MaxMarketOrderVolume;
            }

            set
            {
                __instance.MaxMarketOrderVolume = value;
            }
        }

        public int MinMarketOrderVolume
        {
            get
            {
                return __instance.MinMarketOrderVolume;
            }

            set
            {
                __instance.MinMarketOrderVolume = value;
            }
        }

        public int MaxLimitOrderVolume
        {
            get
            {
                return __instance.MaxLimitOrderVolume;
            }

            set
            {
                __instance.MaxLimitOrderVolume = value;
            }
        }

        public int MinLimitOrderVolume
        {
            get
            {
                return __instance.MinLimitOrderVolume;
            }

            set
            {
                __instance.MinLimitOrderVolume = value;
            }
        }

        public int VolumeMultiple
        {
            get
            {
                return __instance.VolumeMultiple;
            }

            set
            {
                __instance.VolumeMultiple = value;
            }
        }

        public double PriceTick
        {
            get
            {
                return __instance.PriceTick;
            }

            set
            {
                __instance.PriceTick = value;
            }
        }

        public sbyte[] CreateDate
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.CreateDate)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[9];
                        for (int i = 0; i < 9; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.CreateDate)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 9; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] OpenDate
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.OpenDate)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[9];
                        for (int i = 0; i < 9; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.OpenDate)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 9; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] ExpireDate
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.ExpireDate)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[9];
                        for (int i = 0; i < 9; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.ExpireDate)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 9; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] StartDelivDate
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.StartDelivDate)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[9];
                        for (int i = 0; i < 9; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.StartDelivDate)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 9; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] EndDelivDate
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.EndDelivDate)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[9];
                        for (int i = 0; i < 9; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.EndDelivDate)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 9; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte InstLifePhase
        {
            get
            {
                return __instance.InstLifePhase;
            }

            set
            {
                __instance.InstLifePhase = value;
            }
        }

        public int IsTrading
        {
            get
            {
                return __instance.IsTrading;
            }

            set
            {
                __instance.IsTrading = value;
            }
        }

        public sbyte PositionType
        {
            get
            {
                return __instance.PositionType;
            }

            set
            {
                __instance.PositionType = value;
            }
        }

        public int OrderCanBeWithdraw
        {
            get
            {
                return __instance.OrderCanBeWithdraw;
            }

            set
            {
                __instance.OrderCanBeWithdraw = value;
            }
        }

        public int MinBuyVolume
        {
            get
            {
                return __instance.MinBuyVolume;
            }

            set
            {
                __instance.MinBuyVolume = value;
            }
        }

        public int MinSellVolume
        {
            get
            {
                return __instance.MinSellVolume;
            }

            set
            {
                __instance.MinSellVolume = value;
            }
        }

        public sbyte[] RightModelID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.RightModelID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[31];
                        for (int i = 0; i < 31; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.RightModelID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 31; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte PosTradeType
        {
            get
            {
                return __instance.PosTradeType;
            }

            set
            {
                __instance.PosTradeType = value;
            }
        }

        public sbyte[] MarketID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.MarketID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[31];
                        for (int i = 0; i < 31; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.MarketID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 31; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public double ExecPrice
        {
            get
            {
                return __instance.ExecPrice;
            }

            set
            {
                __instance.ExecPrice = value;
            }
        }

        public double UnitMargin
        {
            get
            {
                return __instance.UnitMargin;
            }

            set
            {
                __instance.UnitMargin = value;
            }
        }

        public sbyte InstrumentType
        {
            get
            {
                return __instance.InstrumentType;
            }

            set
            {
                __instance.InstrumentType = value;
            }
        }

        public double OptionsMarginParam1
        {
            get
            {
                return __instance.OptionsMarginParam1;
            }

            set
            {
                __instance.OptionsMarginParam1 = value;
            }
        }

        public double OptionsMarginParam2
        {
            get
            {
                return __instance.OptionsMarginParam2;
            }

            set
            {
                __instance.OptionsMarginParam2 = value;
            }
        }
    }

    public unsafe partial struct CSecurityFtdcBrokerField
    {
        public partial struct __Internal
        {
            public fixed sbyte BrokerID[11];

            public fixed sbyte BrokerAbbr[9];

            public fixed sbyte BrokerName[81];

            public int IsActive;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("securitymduserapi", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0CSecurityFtdcBrokerField@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);
        }

        private CSecurityFtdcBrokerField.__Internal __instance;
        internal CSecurityFtdcBrokerField.__Internal __Instance { get { return __instance; } }

        internal static global::LTSApi.CSecurityFtdcBrokerField __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new CSecurityFtdcBrokerField(native.ToPointer(), skipVTables);
        }

        internal static global::LTSApi.CSecurityFtdcBrokerField __CreateInstance(global::LTSApi.CSecurityFtdcBrokerField.__Internal native, bool skipVTables = false)
        {
            return new CSecurityFtdcBrokerField(native, skipVTables);
        }

        private CSecurityFtdcBrokerField(global::LTSApi.CSecurityFtdcBrokerField.__Internal native, bool skipVTables = false)
            : this()
        {
            __instance = native;
        }

        private CSecurityFtdcBrokerField(void* native, bool skipVTables = false) : this()
        {
            __instance = *(global::LTSApi.CSecurityFtdcBrokerField.__Internal*) native;
        }

        public CSecurityFtdcBrokerField(global::LTSApi.CSecurityFtdcBrokerField _0)
            : this()
        {
            var ____arg0 = _0.__Instance;
            var __arg0 = new global::System.IntPtr(&____arg0);
            fixed (__Internal* __instancePtr = &__instance)
            {
                __Internal.cctor_1(new global::System.IntPtr(__instancePtr), __arg0);
            }
        }

        public sbyte[] BrokerID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.BrokerID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[11];
                        for (int i = 0; i < 11; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.BrokerID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 11; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] BrokerAbbr
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.BrokerAbbr)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[9];
                        for (int i = 0; i < 9; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.BrokerAbbr)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 9; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] BrokerName
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.BrokerName)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[81];
                        for (int i = 0; i < 81; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.BrokerName)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 81; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public int IsActive
        {
            get
            {
                return __instance.IsActive;
            }

            set
            {
                __instance.IsActive = value;
            }
        }
    }

    public unsafe partial struct CSecurityFtdcPartBrokerField
    {
        public partial struct __Internal
        {
            public fixed sbyte BrokerID[11];

            public fixed sbyte ExchangeID[9];

            public fixed sbyte ParticipantID[11];

            public int IsActive;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("securitymduserapi", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0CSecurityFtdcPartBrokerField@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);
        }

        private CSecurityFtdcPartBrokerField.__Internal __instance;
        internal CSecurityFtdcPartBrokerField.__Internal __Instance { get { return __instance; } }

        internal static global::LTSApi.CSecurityFtdcPartBrokerField __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new CSecurityFtdcPartBrokerField(native.ToPointer(), skipVTables);
        }

        internal static global::LTSApi.CSecurityFtdcPartBrokerField __CreateInstance(global::LTSApi.CSecurityFtdcPartBrokerField.__Internal native, bool skipVTables = false)
        {
            return new CSecurityFtdcPartBrokerField(native, skipVTables);
        }

        private CSecurityFtdcPartBrokerField(global::LTSApi.CSecurityFtdcPartBrokerField.__Internal native, bool skipVTables = false)
            : this()
        {
            __instance = native;
        }

        private CSecurityFtdcPartBrokerField(void* native, bool skipVTables = false) : this()
        {
            __instance = *(global::LTSApi.CSecurityFtdcPartBrokerField.__Internal*) native;
        }

        public CSecurityFtdcPartBrokerField(global::LTSApi.CSecurityFtdcPartBrokerField _0)
            : this()
        {
            var ____arg0 = _0.__Instance;
            var __arg0 = new global::System.IntPtr(&____arg0);
            fixed (__Internal* __instancePtr = &__instance)
            {
                __Internal.cctor_1(new global::System.IntPtr(__instancePtr), __arg0);
            }
        }

        public sbyte[] BrokerID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.BrokerID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[11];
                        for (int i = 0; i < 11; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.BrokerID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 11; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] ExchangeID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.ExchangeID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[9];
                        for (int i = 0; i < 9; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.ExchangeID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 9; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] ParticipantID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.ParticipantID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[11];
                        for (int i = 0; i < 11; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.ParticipantID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 11; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public int IsActive
        {
            get
            {
                return __instance.IsActive;
            }

            set
            {
                __instance.IsActive = value;
            }
        }
    }

    public unsafe partial struct CSecurityFtdcInvestorField
    {
        public partial struct __Internal
        {
            public fixed sbyte InvestorID[15];

            public fixed sbyte BrokerID[11];

            public fixed sbyte InvestorGroupID[15];

            public fixed sbyte InvestorName[81];

            public sbyte IdentifiedCardType;

            public fixed sbyte IdentifiedCardNo[51];

            public int IsActive;

            public fixed sbyte SHBranchID[21];

            public fixed sbyte SZBranchID[21];

            public sbyte SettleSystemType;

            public sbyte InvestorLevel;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("securitymduserapi", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0CSecurityFtdcInvestorField@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);
        }

        private CSecurityFtdcInvestorField.__Internal __instance;
        internal CSecurityFtdcInvestorField.__Internal __Instance { get { return __instance; } }

        internal static global::LTSApi.CSecurityFtdcInvestorField __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new CSecurityFtdcInvestorField(native.ToPointer(), skipVTables);
        }

        internal static global::LTSApi.CSecurityFtdcInvestorField __CreateInstance(global::LTSApi.CSecurityFtdcInvestorField.__Internal native, bool skipVTables = false)
        {
            return new CSecurityFtdcInvestorField(native, skipVTables);
        }

        private CSecurityFtdcInvestorField(global::LTSApi.CSecurityFtdcInvestorField.__Internal native, bool skipVTables = false)
            : this()
        {
            __instance = native;
        }

        private CSecurityFtdcInvestorField(void* native, bool skipVTables = false) : this()
        {
            __instance = *(global::LTSApi.CSecurityFtdcInvestorField.__Internal*) native;
        }

        public CSecurityFtdcInvestorField(global::LTSApi.CSecurityFtdcInvestorField _0)
            : this()
        {
            var ____arg0 = _0.__Instance;
            var __arg0 = new global::System.IntPtr(&____arg0);
            fixed (__Internal* __instancePtr = &__instance)
            {
                __Internal.cctor_1(new global::System.IntPtr(__instancePtr), __arg0);
            }
        }

        public sbyte[] InvestorID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.InvestorID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[15];
                        for (int i = 0; i < 15; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.InvestorID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 15; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] BrokerID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.BrokerID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[11];
                        for (int i = 0; i < 11; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.BrokerID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 11; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] InvestorGroupID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.InvestorGroupID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[15];
                        for (int i = 0; i < 15; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.InvestorGroupID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 15; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] InvestorName
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.InvestorName)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[81];
                        for (int i = 0; i < 81; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.InvestorName)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 81; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte IdentifiedCardType
        {
            get
            {
                return __instance.IdentifiedCardType;
            }

            set
            {
                __instance.IdentifiedCardType = value;
            }
        }

        public sbyte[] IdentifiedCardNo
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.IdentifiedCardNo)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[51];
                        for (int i = 0; i < 51; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.IdentifiedCardNo)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 51; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public int IsActive
        {
            get
            {
                return __instance.IsActive;
            }

            set
            {
                __instance.IsActive = value;
            }
        }

        public sbyte[] SHBranchID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.SHBranchID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[21];
                        for (int i = 0; i < 21; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.SHBranchID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 21; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] SZBranchID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.SZBranchID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[21];
                        for (int i = 0; i < 21; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.SZBranchID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 21; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte SettleSystemType
        {
            get
            {
                return __instance.SettleSystemType;
            }

            set
            {
                __instance.SettleSystemType = value;
            }
        }

        public sbyte InvestorLevel
        {
            get
            {
                return __instance.InvestorLevel;
            }

            set
            {
                __instance.InvestorLevel = value;
            }
        }
    }

    public unsafe partial struct CSecurityFtdcTradingCodeField
    {
        public partial struct __Internal
        {
            public fixed sbyte InvestorID[15];

            public fixed sbyte BrokerID[11];

            public fixed sbyte ExchangeID[9];

            public fixed sbyte ClientID[21];

            public int IsActive;

            public fixed sbyte AccountID[15];

            public fixed sbyte PBU[21];

            public sbyte ClientType;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("securitymduserapi", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0CSecurityFtdcTradingCodeField@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);
        }

        private CSecurityFtdcTradingCodeField.__Internal __instance;
        internal CSecurityFtdcTradingCodeField.__Internal __Instance { get { return __instance; } }

        internal static global::LTSApi.CSecurityFtdcTradingCodeField __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new CSecurityFtdcTradingCodeField(native.ToPointer(), skipVTables);
        }

        internal static global::LTSApi.CSecurityFtdcTradingCodeField __CreateInstance(global::LTSApi.CSecurityFtdcTradingCodeField.__Internal native, bool skipVTables = false)
        {
            return new CSecurityFtdcTradingCodeField(native, skipVTables);
        }

        private CSecurityFtdcTradingCodeField(global::LTSApi.CSecurityFtdcTradingCodeField.__Internal native, bool skipVTables = false)
            : this()
        {
            __instance = native;
        }

        private CSecurityFtdcTradingCodeField(void* native, bool skipVTables = false) : this()
        {
            __instance = *(global::LTSApi.CSecurityFtdcTradingCodeField.__Internal*) native;
        }

        public CSecurityFtdcTradingCodeField(global::LTSApi.CSecurityFtdcTradingCodeField _0)
            : this()
        {
            var ____arg0 = _0.__Instance;
            var __arg0 = new global::System.IntPtr(&____arg0);
            fixed (__Internal* __instancePtr = &__instance)
            {
                __Internal.cctor_1(new global::System.IntPtr(__instancePtr), __arg0);
            }
        }

        public sbyte[] InvestorID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.InvestorID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[15];
                        for (int i = 0; i < 15; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.InvestorID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 15; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] BrokerID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.BrokerID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[11];
                        for (int i = 0; i < 11; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.BrokerID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 11; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] ExchangeID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.ExchangeID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[9];
                        for (int i = 0; i < 9; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.ExchangeID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 9; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] ClientID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.ClientID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[21];
                        for (int i = 0; i < 21; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.ClientID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 21; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public int IsActive
        {
            get
            {
                return __instance.IsActive;
            }

            set
            {
                __instance.IsActive = value;
            }
        }

        public sbyte[] AccountID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.AccountID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[15];
                        for (int i = 0; i < 15; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.AccountID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 15; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] PBU
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.PBU)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[21];
                        for (int i = 0; i < 21; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.PBU)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 21; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte ClientType
        {
            get
            {
                return __instance.ClientType;
            }

            set
            {
                __instance.ClientType = value;
            }
        }
    }

    public unsafe partial struct CSecurityFtdcSuperUserField
    {
        public partial struct __Internal
        {
            public fixed sbyte UserID[16];

            public fixed sbyte UserName[81];

            public fixed sbyte Password[41];

            public int IsActive;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("securitymduserapi", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0CSecurityFtdcSuperUserField@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);
        }

        private CSecurityFtdcSuperUserField.__Internal __instance;
        internal CSecurityFtdcSuperUserField.__Internal __Instance { get { return __instance; } }

        internal static global::LTSApi.CSecurityFtdcSuperUserField __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new CSecurityFtdcSuperUserField(native.ToPointer(), skipVTables);
        }

        internal static global::LTSApi.CSecurityFtdcSuperUserField __CreateInstance(global::LTSApi.CSecurityFtdcSuperUserField.__Internal native, bool skipVTables = false)
        {
            return new CSecurityFtdcSuperUserField(native, skipVTables);
        }

        private CSecurityFtdcSuperUserField(global::LTSApi.CSecurityFtdcSuperUserField.__Internal native, bool skipVTables = false)
            : this()
        {
            __instance = native;
        }

        private CSecurityFtdcSuperUserField(void* native, bool skipVTables = false) : this()
        {
            __instance = *(global::LTSApi.CSecurityFtdcSuperUserField.__Internal*) native;
        }

        public CSecurityFtdcSuperUserField(global::LTSApi.CSecurityFtdcSuperUserField _0)
            : this()
        {
            var ____arg0 = _0.__Instance;
            var __arg0 = new global::System.IntPtr(&____arg0);
            fixed (__Internal* __instancePtr = &__instance)
            {
                __Internal.cctor_1(new global::System.IntPtr(__instancePtr), __arg0);
            }
        }

        public sbyte[] UserID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.UserID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[16];
                        for (int i = 0; i < 16; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.UserID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 16; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] UserName
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.UserName)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[81];
                        for (int i = 0; i < 81; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.UserName)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 81; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] Password
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.Password)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[41];
                        for (int i = 0; i < 41; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.Password)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 41; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public int IsActive
        {
            get
            {
                return __instance.IsActive;
            }

            set
            {
                __instance.IsActive = value;
            }
        }
    }

    public unsafe partial struct CSecurityFtdcSuperUserFunctionField
    {
        public partial struct __Internal
        {
            public fixed sbyte UserID[16];

            public sbyte FunctionCode;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("securitymduserapi", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0CSecurityFtdcSuperUserFunctionField@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);
        }

        private CSecurityFtdcSuperUserFunctionField.__Internal __instance;
        internal CSecurityFtdcSuperUserFunctionField.__Internal __Instance { get { return __instance; } }

        internal static global::LTSApi.CSecurityFtdcSuperUserFunctionField __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new CSecurityFtdcSuperUserFunctionField(native.ToPointer(), skipVTables);
        }

        internal static global::LTSApi.CSecurityFtdcSuperUserFunctionField __CreateInstance(global::LTSApi.CSecurityFtdcSuperUserFunctionField.__Internal native, bool skipVTables = false)
        {
            return new CSecurityFtdcSuperUserFunctionField(native, skipVTables);
        }

        private CSecurityFtdcSuperUserFunctionField(global::LTSApi.CSecurityFtdcSuperUserFunctionField.__Internal native, bool skipVTables = false)
            : this()
        {
            __instance = native;
        }

        private CSecurityFtdcSuperUserFunctionField(void* native, bool skipVTables = false) : this()
        {
            __instance = *(global::LTSApi.CSecurityFtdcSuperUserFunctionField.__Internal*) native;
        }

        public CSecurityFtdcSuperUserFunctionField(global::LTSApi.CSecurityFtdcSuperUserFunctionField _0)
            : this()
        {
            var ____arg0 = _0.__Instance;
            var __arg0 = new global::System.IntPtr(&____arg0);
            fixed (__Internal* __instancePtr = &__instance)
            {
                __Internal.cctor_1(new global::System.IntPtr(__instancePtr), __arg0);
            }
        }

        public sbyte[] UserID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.UserID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[16];
                        for (int i = 0; i < 16; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.UserID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 16; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte FunctionCode
        {
            get
            {
                return __instance.FunctionCode;
            }

            set
            {
                __instance.FunctionCode = value;
            }
        }
    }

    public unsafe partial struct CSecurityFtdcBrokerUserField
    {
        public partial struct __Internal
        {
            public fixed sbyte BrokerID[11];

            public fixed sbyte UserID[16];

            public fixed sbyte UserName[81];

            public sbyte UserType;

            public int IsActive;

            public int IsUsingOTP;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("securitymduserapi", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0CSecurityFtdcBrokerUserField@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);
        }

        private CSecurityFtdcBrokerUserField.__Internal __instance;
        internal CSecurityFtdcBrokerUserField.__Internal __Instance { get { return __instance; } }

        internal static global::LTSApi.CSecurityFtdcBrokerUserField __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new CSecurityFtdcBrokerUserField(native.ToPointer(), skipVTables);
        }

        internal static global::LTSApi.CSecurityFtdcBrokerUserField __CreateInstance(global::LTSApi.CSecurityFtdcBrokerUserField.__Internal native, bool skipVTables = false)
        {
            return new CSecurityFtdcBrokerUserField(native, skipVTables);
        }

        private CSecurityFtdcBrokerUserField(global::LTSApi.CSecurityFtdcBrokerUserField.__Internal native, bool skipVTables = false)
            : this()
        {
            __instance = native;
        }

        private CSecurityFtdcBrokerUserField(void* native, bool skipVTables = false) : this()
        {
            __instance = *(global::LTSApi.CSecurityFtdcBrokerUserField.__Internal*) native;
        }

        public CSecurityFtdcBrokerUserField(global::LTSApi.CSecurityFtdcBrokerUserField _0)
            : this()
        {
            var ____arg0 = _0.__Instance;
            var __arg0 = new global::System.IntPtr(&____arg0);
            fixed (__Internal* __instancePtr = &__instance)
            {
                __Internal.cctor_1(new global::System.IntPtr(__instancePtr), __arg0);
            }
        }

        public sbyte[] BrokerID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.BrokerID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[11];
                        for (int i = 0; i < 11; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.BrokerID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 11; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] UserID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.UserID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[16];
                        for (int i = 0; i < 16; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.UserID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 16; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] UserName
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.UserName)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[81];
                        for (int i = 0; i < 81; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.UserName)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 81; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte UserType
        {
            get
            {
                return __instance.UserType;
            }

            set
            {
                __instance.UserType = value;
            }
        }

        public int IsActive
        {
            get
            {
                return __instance.IsActive;
            }

            set
            {
                __instance.IsActive = value;
            }
        }

        public int IsUsingOTP
        {
            get
            {
                return __instance.IsUsingOTP;
            }

            set
            {
                __instance.IsUsingOTP = value;
            }
        }
    }

    public unsafe partial struct CSecurityFtdcBrokerUserFunctionField
    {
        public partial struct __Internal
        {
            public fixed sbyte BrokerID[11];

            public fixed sbyte UserID[16];

            public sbyte BrokerFunctionCode;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("securitymduserapi", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0CSecurityFtdcBrokerUserFunctionField@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);
        }

        private CSecurityFtdcBrokerUserFunctionField.__Internal __instance;
        internal CSecurityFtdcBrokerUserFunctionField.__Internal __Instance { get { return __instance; } }

        internal static global::LTSApi.CSecurityFtdcBrokerUserFunctionField __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new CSecurityFtdcBrokerUserFunctionField(native.ToPointer(), skipVTables);
        }

        internal static global::LTSApi.CSecurityFtdcBrokerUserFunctionField __CreateInstance(global::LTSApi.CSecurityFtdcBrokerUserFunctionField.__Internal native, bool skipVTables = false)
        {
            return new CSecurityFtdcBrokerUserFunctionField(native, skipVTables);
        }

        private CSecurityFtdcBrokerUserFunctionField(global::LTSApi.CSecurityFtdcBrokerUserFunctionField.__Internal native, bool skipVTables = false)
            : this()
        {
            __instance = native;
        }

        private CSecurityFtdcBrokerUserFunctionField(void* native, bool skipVTables = false) : this()
        {
            __instance = *(global::LTSApi.CSecurityFtdcBrokerUserFunctionField.__Internal*) native;
        }

        public CSecurityFtdcBrokerUserFunctionField(global::LTSApi.CSecurityFtdcBrokerUserFunctionField _0)
            : this()
        {
            var ____arg0 = _0.__Instance;
            var __arg0 = new global::System.IntPtr(&____arg0);
            fixed (__Internal* __instancePtr = &__instance)
            {
                __Internal.cctor_1(new global::System.IntPtr(__instancePtr), __arg0);
            }
        }

        public sbyte[] BrokerID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.BrokerID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[11];
                        for (int i = 0; i < 11; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.BrokerID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 11; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] UserID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.UserID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[16];
                        for (int i = 0; i < 16; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.UserID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 16; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte BrokerFunctionCode
        {
            get
            {
                return __instance.BrokerFunctionCode;
            }

            set
            {
                __instance.BrokerFunctionCode = value;
            }
        }
    }

    public unsafe partial struct CSecurityFtdcTradingAccountField
    {
        public partial struct __Internal
        {
            public fixed sbyte BrokerID[11];

            public fixed sbyte AccountID[15];

            public double PreMortgage;

            public double PreCredit;

            public double PreDeposit;

            public double PreBalance;

            public double PreMargin;

            public double InterestBase;

            public double Interest;

            public double Deposit;

            public double Withdraw;

            public double FrozenMargin;

            public double FrozenCash;

            public double FrozenCommission;

            public double CurrMargin;

            public double CashIn;

            public double Commission;

            public double Balance;

            public double Available;

            public double WithdrawQuota;

            public double Reserve;

            public fixed sbyte TradingDay[9];

            public double Credit;

            public double Mortgage;

            public double ExchangeMargin;

            public double DeliveryMargin;

            public double ExchangeDeliveryMargin;

            public double FrozenTransferFee;

            public double FrozenStampTax;

            public double TransferFee;

            public double StampTax;

            public double ConversionAmount;

            public double CreditAmount;

            public double StockValue;

            public double BondRepurchaseAmount;

            public double ReverseRepurchaseAmount;

            public fixed sbyte CurrencyCode[4];

            public sbyte AccountType;

            public double MarginTradeAmount;

            public double ShortSellAmount;

            public double MarginTradeProfit;

            public double ShortSellProfit;

            public double SSStockValue;

            public double CreditRatio;

            public double FrozenExecCash;

            public double SSEOptionsBuyAmount;

            public double SSEOptionsBuyFrozenAmount;

            public double SettleMargin;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("securitymduserapi", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0CSecurityFtdcTradingAccountField@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);
        }

        private CSecurityFtdcTradingAccountField.__Internal __instance;
        internal CSecurityFtdcTradingAccountField.__Internal __Instance { get { return __instance; } }

        internal static global::LTSApi.CSecurityFtdcTradingAccountField __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new CSecurityFtdcTradingAccountField(native.ToPointer(), skipVTables);
        }

        internal static global::LTSApi.CSecurityFtdcTradingAccountField __CreateInstance(global::LTSApi.CSecurityFtdcTradingAccountField.__Internal native, bool skipVTables = false)
        {
            return new CSecurityFtdcTradingAccountField(native, skipVTables);
        }

        private CSecurityFtdcTradingAccountField(global::LTSApi.CSecurityFtdcTradingAccountField.__Internal native, bool skipVTables = false)
            : this()
        {
            __instance = native;
        }

        private CSecurityFtdcTradingAccountField(void* native, bool skipVTables = false) : this()
        {
            __instance = *(global::LTSApi.CSecurityFtdcTradingAccountField.__Internal*) native;
        }

        public CSecurityFtdcTradingAccountField(global::LTSApi.CSecurityFtdcTradingAccountField _0)
            : this()
        {
            var ____arg0 = _0.__Instance;
            var __arg0 = new global::System.IntPtr(&____arg0);
            fixed (__Internal* __instancePtr = &__instance)
            {
                __Internal.cctor_1(new global::System.IntPtr(__instancePtr), __arg0);
            }
        }

        public sbyte[] BrokerID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.BrokerID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[11];
                        for (int i = 0; i < 11; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.BrokerID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 11; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] AccountID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.AccountID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[15];
                        for (int i = 0; i < 15; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.AccountID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 15; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public double PreMortgage
        {
            get
            {
                return __instance.PreMortgage;
            }

            set
            {
                __instance.PreMortgage = value;
            }
        }

        public double PreCredit
        {
            get
            {
                return __instance.PreCredit;
            }

            set
            {
                __instance.PreCredit = value;
            }
        }

        public double PreDeposit
        {
            get
            {
                return __instance.PreDeposit;
            }

            set
            {
                __instance.PreDeposit = value;
            }
        }

        public double PreBalance
        {
            get
            {
                return __instance.PreBalance;
            }

            set
            {
                __instance.PreBalance = value;
            }
        }

        public double PreMargin
        {
            get
            {
                return __instance.PreMargin;
            }

            set
            {
                __instance.PreMargin = value;
            }
        }

        public double InterestBase
        {
            get
            {
                return __instance.InterestBase;
            }

            set
            {
                __instance.InterestBase = value;
            }
        }

        public double Interest
        {
            get
            {
                return __instance.Interest;
            }

            set
            {
                __instance.Interest = value;
            }
        }

        public double Deposit
        {
            get
            {
                return __instance.Deposit;
            }

            set
            {
                __instance.Deposit = value;
            }
        }

        public double Withdraw
        {
            get
            {
                return __instance.Withdraw;
            }

            set
            {
                __instance.Withdraw = value;
            }
        }

        public double FrozenMargin
        {
            get
            {
                return __instance.FrozenMargin;
            }

            set
            {
                __instance.FrozenMargin = value;
            }
        }

        public double FrozenCash
        {
            get
            {
                return __instance.FrozenCash;
            }

            set
            {
                __instance.FrozenCash = value;
            }
        }

        public double FrozenCommission
        {
            get
            {
                return __instance.FrozenCommission;
            }

            set
            {
                __instance.FrozenCommission = value;
            }
        }

        public double CurrMargin
        {
            get
            {
                return __instance.CurrMargin;
            }

            set
            {
                __instance.CurrMargin = value;
            }
        }

        public double CashIn
        {
            get
            {
                return __instance.CashIn;
            }

            set
            {
                __instance.CashIn = value;
            }
        }

        public double Commission
        {
            get
            {
                return __instance.Commission;
            }

            set
            {
                __instance.Commission = value;
            }
        }

        public double Balance
        {
            get
            {
                return __instance.Balance;
            }

            set
            {
                __instance.Balance = value;
            }
        }

        public double Available
        {
            get
            {
                return __instance.Available;
            }

            set
            {
                __instance.Available = value;
            }
        }

        public double WithdrawQuota
        {
            get
            {
                return __instance.WithdrawQuota;
            }

            set
            {
                __instance.WithdrawQuota = value;
            }
        }

        public double Reserve
        {
            get
            {
                return __instance.Reserve;
            }

            set
            {
                __instance.Reserve = value;
            }
        }

        public sbyte[] TradingDay
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.TradingDay)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[9];
                        for (int i = 0; i < 9; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.TradingDay)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 9; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public double Credit
        {
            get
            {
                return __instance.Credit;
            }

            set
            {
                __instance.Credit = value;
            }
        }

        public double Mortgage
        {
            get
            {
                return __instance.Mortgage;
            }

            set
            {
                __instance.Mortgage = value;
            }
        }

        public double ExchangeMargin
        {
            get
            {
                return __instance.ExchangeMargin;
            }

            set
            {
                __instance.ExchangeMargin = value;
            }
        }

        public double DeliveryMargin
        {
            get
            {
                return __instance.DeliveryMargin;
            }

            set
            {
                __instance.DeliveryMargin = value;
            }
        }

        public double ExchangeDeliveryMargin
        {
            get
            {
                return __instance.ExchangeDeliveryMargin;
            }

            set
            {
                __instance.ExchangeDeliveryMargin = value;
            }
        }

        public double FrozenTransferFee
        {
            get
            {
                return __instance.FrozenTransferFee;
            }

            set
            {
                __instance.FrozenTransferFee = value;
            }
        }

        public double FrozenStampTax
        {
            get
            {
                return __instance.FrozenStampTax;
            }

            set
            {
                __instance.FrozenStampTax = value;
            }
        }

        public double TransferFee
        {
            get
            {
                return __instance.TransferFee;
            }

            set
            {
                __instance.TransferFee = value;
            }
        }

        public double StampTax
        {
            get
            {
                return __instance.StampTax;
            }

            set
            {
                __instance.StampTax = value;
            }
        }

        public double ConversionAmount
        {
            get
            {
                return __instance.ConversionAmount;
            }

            set
            {
                __instance.ConversionAmount = value;
            }
        }

        public double CreditAmount
        {
            get
            {
                return __instance.CreditAmount;
            }

            set
            {
                __instance.CreditAmount = value;
            }
        }

        public double StockValue
        {
            get
            {
                return __instance.StockValue;
            }

            set
            {
                __instance.StockValue = value;
            }
        }

        public double BondRepurchaseAmount
        {
            get
            {
                return __instance.BondRepurchaseAmount;
            }

            set
            {
                __instance.BondRepurchaseAmount = value;
            }
        }

        public double ReverseRepurchaseAmount
        {
            get
            {
                return __instance.ReverseRepurchaseAmount;
            }

            set
            {
                __instance.ReverseRepurchaseAmount = value;
            }
        }

        public sbyte[] CurrencyCode
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.CurrencyCode)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[4];
                        for (int i = 0; i < 4; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.CurrencyCode)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 4; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte AccountType
        {
            get
            {
                return __instance.AccountType;
            }

            set
            {
                __instance.AccountType = value;
            }
        }

        public double MarginTradeAmount
        {
            get
            {
                return __instance.MarginTradeAmount;
            }

            set
            {
                __instance.MarginTradeAmount = value;
            }
        }

        public double ShortSellAmount
        {
            get
            {
                return __instance.ShortSellAmount;
            }

            set
            {
                __instance.ShortSellAmount = value;
            }
        }

        public double MarginTradeProfit
        {
            get
            {
                return __instance.MarginTradeProfit;
            }

            set
            {
                __instance.MarginTradeProfit = value;
            }
        }

        public double ShortSellProfit
        {
            get
            {
                return __instance.ShortSellProfit;
            }

            set
            {
                __instance.ShortSellProfit = value;
            }
        }

        public double SSStockValue
        {
            get
            {
                return __instance.SSStockValue;
            }

            set
            {
                __instance.SSStockValue = value;
            }
        }

        public double CreditRatio
        {
            get
            {
                return __instance.CreditRatio;
            }

            set
            {
                __instance.CreditRatio = value;
            }
        }

        public double FrozenExecCash
        {
            get
            {
                return __instance.FrozenExecCash;
            }

            set
            {
                __instance.FrozenExecCash = value;
            }
        }

        public double SSEOptionsBuyAmount
        {
            get
            {
                return __instance.SSEOptionsBuyAmount;
            }

            set
            {
                __instance.SSEOptionsBuyAmount = value;
            }
        }

        public double SSEOptionsBuyFrozenAmount
        {
            get
            {
                return __instance.SSEOptionsBuyFrozenAmount;
            }

            set
            {
                __instance.SSEOptionsBuyFrozenAmount = value;
            }
        }

        public double SettleMargin
        {
            get
            {
                return __instance.SettleMargin;
            }

            set
            {
                __instance.SettleMargin = value;
            }
        }
    }

    public unsafe partial struct CSecurityFtdcLoginForbiddenUserField
    {
        public partial struct __Internal
        {
            public fixed sbyte BrokerID[11];

            public fixed sbyte UserID[16];

            [SuppressUnmanagedCodeSecurity]
            [DllImport("securitymduserapi", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0CSecurityFtdcLoginForbiddenUserField@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);
        }

        private CSecurityFtdcLoginForbiddenUserField.__Internal __instance;
        internal CSecurityFtdcLoginForbiddenUserField.__Internal __Instance { get { return __instance; } }

        internal static global::LTSApi.CSecurityFtdcLoginForbiddenUserField __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new CSecurityFtdcLoginForbiddenUserField(native.ToPointer(), skipVTables);
        }

        internal static global::LTSApi.CSecurityFtdcLoginForbiddenUserField __CreateInstance(global::LTSApi.CSecurityFtdcLoginForbiddenUserField.__Internal native, bool skipVTables = false)
        {
            return new CSecurityFtdcLoginForbiddenUserField(native, skipVTables);
        }

        private CSecurityFtdcLoginForbiddenUserField(global::LTSApi.CSecurityFtdcLoginForbiddenUserField.__Internal native, bool skipVTables = false)
            : this()
        {
            __instance = native;
        }

        private CSecurityFtdcLoginForbiddenUserField(void* native, bool skipVTables = false) : this()
        {
            __instance = *(global::LTSApi.CSecurityFtdcLoginForbiddenUserField.__Internal*) native;
        }

        public CSecurityFtdcLoginForbiddenUserField(global::LTSApi.CSecurityFtdcLoginForbiddenUserField _0)
            : this()
        {
            var ____arg0 = _0.__Instance;
            var __arg0 = new global::System.IntPtr(&____arg0);
            fixed (__Internal* __instancePtr = &__instance)
            {
                __Internal.cctor_1(new global::System.IntPtr(__instancePtr), __arg0);
            }
        }

        public sbyte[] BrokerID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.BrokerID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[11];
                        for (int i = 0; i < 11; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.BrokerID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 11; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] UserID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.UserID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[16];
                        for (int i = 0; i < 16; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.UserID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 16; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }
    }

    public unsafe partial struct CSecurityFtdcDepthMarketDataField
    {
        public partial struct __Internal
        {
            public fixed sbyte TradingDay[9];

            public fixed sbyte InstrumentID[31];

            public fixed sbyte ExchangeID[9];

            public fixed sbyte ExchangeInstID[31];

            public double LastPrice;

            public double PreSettlementPrice;

            public double PreClosePrice;

            public double PreOpenInterest;

            public double OpenPrice;

            public double HighestPrice;

            public double LowestPrice;

            public double Volume;

            public double Turnover;

            public double OpenInterest;

            public double ClosePrice;

            public double SettlementPrice;

            public double UpperLimitPrice;

            public double LowerLimitPrice;

            public double PreDelta;

            public double CurrDelta;

            public double PreIOPV;

            public double IOPV;

            public double AuctionPrice;

            public fixed sbyte UpdateTime[9];

            public int UpdateMillisec;

            public double BidPrice1;

            public double BidVolume1;

            public double AskPrice1;

            public double AskVolume1;

            public double BidPrice2;

            public double BidVolume2;

            public double AskPrice2;

            public double AskVolume2;

            public double BidPrice3;

            public double BidVolume3;

            public double AskPrice3;

            public double AskVolume3;

            public double BidPrice4;

            public double BidVolume4;

            public double AskPrice4;

            public double AskVolume4;

            public double BidPrice5;

            public double BidVolume5;

            public double AskPrice5;

            public double AskVolume5;

            public double AveragePrice;

            public fixed sbyte ActionDay[9];

            public sbyte TradingPhase;

            public sbyte OpenRestriction;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("securitymduserapi", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0CSecurityFtdcDepthMarketDataField@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);
        }

        private CSecurityFtdcDepthMarketDataField.__Internal __instance;
        internal CSecurityFtdcDepthMarketDataField.__Internal __Instance { get { return __instance; } }

        internal static global::LTSApi.CSecurityFtdcDepthMarketDataField __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new CSecurityFtdcDepthMarketDataField(native.ToPointer(), skipVTables);
        }

        internal static global::LTSApi.CSecurityFtdcDepthMarketDataField __CreateInstance(global::LTSApi.CSecurityFtdcDepthMarketDataField.__Internal native, bool skipVTables = false)
        {
            return new CSecurityFtdcDepthMarketDataField(native, skipVTables);
        }

        private CSecurityFtdcDepthMarketDataField(global::LTSApi.CSecurityFtdcDepthMarketDataField.__Internal native, bool skipVTables = false)
            : this()
        {
            __instance = native;
        }

        private CSecurityFtdcDepthMarketDataField(void* native, bool skipVTables = false) : this()
        {
            __instance = *(global::LTSApi.CSecurityFtdcDepthMarketDataField.__Internal*) native;
        }

        public CSecurityFtdcDepthMarketDataField(global::LTSApi.CSecurityFtdcDepthMarketDataField _0)
            : this()
        {
            var ____arg0 = _0.__Instance;
            var __arg0 = new global::System.IntPtr(&____arg0);
            fixed (__Internal* __instancePtr = &__instance)
            {
                __Internal.cctor_1(new global::System.IntPtr(__instancePtr), __arg0);
            }
        }

        public sbyte[] TradingDay
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.TradingDay)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[9];
                        for (int i = 0; i < 9; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.TradingDay)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 9; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] InstrumentID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.InstrumentID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[31];
                        for (int i = 0; i < 31; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.InstrumentID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 31; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] ExchangeID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.ExchangeID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[9];
                        for (int i = 0; i < 9; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.ExchangeID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 9; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] ExchangeInstID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.ExchangeInstID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[31];
                        for (int i = 0; i < 31; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.ExchangeInstID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 31; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public double LastPrice
        {
            get
            {
                return __instance.LastPrice;
            }

            set
            {
                __instance.LastPrice = value;
            }
        }

        public double PreSettlementPrice
        {
            get
            {
                return __instance.PreSettlementPrice;
            }

            set
            {
                __instance.PreSettlementPrice = value;
            }
        }

        public double PreClosePrice
        {
            get
            {
                return __instance.PreClosePrice;
            }

            set
            {
                __instance.PreClosePrice = value;
            }
        }

        public double PreOpenInterest
        {
            get
            {
                return __instance.PreOpenInterest;
            }

            set
            {
                __instance.PreOpenInterest = value;
            }
        }

        public double OpenPrice
        {
            get
            {
                return __instance.OpenPrice;
            }

            set
            {
                __instance.OpenPrice = value;
            }
        }

        public double HighestPrice
        {
            get
            {
                return __instance.HighestPrice;
            }

            set
            {
                __instance.HighestPrice = value;
            }
        }

        public double LowestPrice
        {
            get
            {
                return __instance.LowestPrice;
            }

            set
            {
                __instance.LowestPrice = value;
            }
        }

        public double Volume
        {
            get
            {
                return __instance.Volume;
            }

            set
            {
                __instance.Volume = value;
            }
        }

        public double Turnover
        {
            get
            {
                return __instance.Turnover;
            }

            set
            {
                __instance.Turnover = value;
            }
        }

        public double OpenInterest
        {
            get
            {
                return __instance.OpenInterest;
            }

            set
            {
                __instance.OpenInterest = value;
            }
        }

        public double ClosePrice
        {
            get
            {
                return __instance.ClosePrice;
            }

            set
            {
                __instance.ClosePrice = value;
            }
        }

        public double SettlementPrice
        {
            get
            {
                return __instance.SettlementPrice;
            }

            set
            {
                __instance.SettlementPrice = value;
            }
        }

        public double UpperLimitPrice
        {
            get
            {
                return __instance.UpperLimitPrice;
            }

            set
            {
                __instance.UpperLimitPrice = value;
            }
        }

        public double LowerLimitPrice
        {
            get
            {
                return __instance.LowerLimitPrice;
            }

            set
            {
                __instance.LowerLimitPrice = value;
            }
        }

        public double PreDelta
        {
            get
            {
                return __instance.PreDelta;
            }

            set
            {
                __instance.PreDelta = value;
            }
        }

        public double CurrDelta
        {
            get
            {
                return __instance.CurrDelta;
            }

            set
            {
                __instance.CurrDelta = value;
            }
        }

        public double PreIOPV
        {
            get
            {
                return __instance.PreIOPV;
            }

            set
            {
                __instance.PreIOPV = value;
            }
        }

        public double IOPV
        {
            get
            {
                return __instance.IOPV;
            }

            set
            {
                __instance.IOPV = value;
            }
        }

        public double AuctionPrice
        {
            get
            {
                return __instance.AuctionPrice;
            }

            set
            {
                __instance.AuctionPrice = value;
            }
        }

        public sbyte[] UpdateTime
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.UpdateTime)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[9];
                        for (int i = 0; i < 9; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.UpdateTime)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 9; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public int UpdateMillisec
        {
            get
            {
                return __instance.UpdateMillisec;
            }

            set
            {
                __instance.UpdateMillisec = value;
            }
        }

        public double BidPrice1
        {
            get
            {
                return __instance.BidPrice1;
            }

            set
            {
                __instance.BidPrice1 = value;
            }
        }

        public double BidVolume1
        {
            get
            {
                return __instance.BidVolume1;
            }

            set
            {
                __instance.BidVolume1 = value;
            }
        }

        public double AskPrice1
        {
            get
            {
                return __instance.AskPrice1;
            }

            set
            {
                __instance.AskPrice1 = value;
            }
        }

        public double AskVolume1
        {
            get
            {
                return __instance.AskVolume1;
            }

            set
            {
                __instance.AskVolume1 = value;
            }
        }

        public double BidPrice2
        {
            get
            {
                return __instance.BidPrice2;
            }

            set
            {
                __instance.BidPrice2 = value;
            }
        }

        public double BidVolume2
        {
            get
            {
                return __instance.BidVolume2;
            }

            set
            {
                __instance.BidVolume2 = value;
            }
        }

        public double AskPrice2
        {
            get
            {
                return __instance.AskPrice2;
            }

            set
            {
                __instance.AskPrice2 = value;
            }
        }

        public double AskVolume2
        {
            get
            {
                return __instance.AskVolume2;
            }

            set
            {
                __instance.AskVolume2 = value;
            }
        }

        public double BidPrice3
        {
            get
            {
                return __instance.BidPrice3;
            }

            set
            {
                __instance.BidPrice3 = value;
            }
        }

        public double BidVolume3
        {
            get
            {
                return __instance.BidVolume3;
            }

            set
            {
                __instance.BidVolume3 = value;
            }
        }

        public double AskPrice3
        {
            get
            {
                return __instance.AskPrice3;
            }

            set
            {
                __instance.AskPrice3 = value;
            }
        }

        public double AskVolume3
        {
            get
            {
                return __instance.AskVolume3;
            }

            set
            {
                __instance.AskVolume3 = value;
            }
        }

        public double BidPrice4
        {
            get
            {
                return __instance.BidPrice4;
            }

            set
            {
                __instance.BidPrice4 = value;
            }
        }

        public double BidVolume4
        {
            get
            {
                return __instance.BidVolume4;
            }

            set
            {
                __instance.BidVolume4 = value;
            }
        }

        public double AskPrice4
        {
            get
            {
                return __instance.AskPrice4;
            }

            set
            {
                __instance.AskPrice4 = value;
            }
        }

        public double AskVolume4
        {
            get
            {
                return __instance.AskVolume4;
            }

            set
            {
                __instance.AskVolume4 = value;
            }
        }

        public double BidPrice5
        {
            get
            {
                return __instance.BidPrice5;
            }

            set
            {
                __instance.BidPrice5 = value;
            }
        }

        public double BidVolume5
        {
            get
            {
                return __instance.BidVolume5;
            }

            set
            {
                __instance.BidVolume5 = value;
            }
        }

        public double AskPrice5
        {
            get
            {
                return __instance.AskPrice5;
            }

            set
            {
                __instance.AskPrice5 = value;
            }
        }

        public double AskVolume5
        {
            get
            {
                return __instance.AskVolume5;
            }

            set
            {
                __instance.AskVolume5 = value;
            }
        }

        public double AveragePrice
        {
            get
            {
                return __instance.AveragePrice;
            }

            set
            {
                __instance.AveragePrice = value;
            }
        }

        public sbyte[] ActionDay
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.ActionDay)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[9];
                        for (int i = 0; i < 9; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.ActionDay)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 9; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte TradingPhase
        {
            get
            {
                return __instance.TradingPhase;
            }

            set
            {
                __instance.TradingPhase = value;
            }
        }

        public sbyte OpenRestriction
        {
            get
            {
                return __instance.OpenRestriction;
            }

            set
            {
                __instance.OpenRestriction = value;
            }
        }
    }

    public unsafe partial struct CSecurityFtdcInstrumentTradingRightField
    {
        public partial struct __Internal
        {
            public fixed sbyte InstrumentID[31];

            public sbyte InvestorRange;

            public fixed sbyte BrokerID[11];

            public fixed sbyte InvestorID[15];

            public sbyte Direction;

            public sbyte TradingRight;

            public fixed sbyte ExchangeID[9];

            public sbyte InstrumentRange;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("securitymduserapi", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0CSecurityFtdcInstrumentTradingRightField@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);
        }

        private CSecurityFtdcInstrumentTradingRightField.__Internal __instance;
        internal CSecurityFtdcInstrumentTradingRightField.__Internal __Instance { get { return __instance; } }

        internal static global::LTSApi.CSecurityFtdcInstrumentTradingRightField __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new CSecurityFtdcInstrumentTradingRightField(native.ToPointer(), skipVTables);
        }

        internal static global::LTSApi.CSecurityFtdcInstrumentTradingRightField __CreateInstance(global::LTSApi.CSecurityFtdcInstrumentTradingRightField.__Internal native, bool skipVTables = false)
        {
            return new CSecurityFtdcInstrumentTradingRightField(native, skipVTables);
        }

        private CSecurityFtdcInstrumentTradingRightField(global::LTSApi.CSecurityFtdcInstrumentTradingRightField.__Internal native, bool skipVTables = false)
            : this()
        {
            __instance = native;
        }

        private CSecurityFtdcInstrumentTradingRightField(void* native, bool skipVTables = false) : this()
        {
            __instance = *(global::LTSApi.CSecurityFtdcInstrumentTradingRightField.__Internal*) native;
        }

        public CSecurityFtdcInstrumentTradingRightField(global::LTSApi.CSecurityFtdcInstrumentTradingRightField _0)
            : this()
        {
            var ____arg0 = _0.__Instance;
            var __arg0 = new global::System.IntPtr(&____arg0);
            fixed (__Internal* __instancePtr = &__instance)
            {
                __Internal.cctor_1(new global::System.IntPtr(__instancePtr), __arg0);
            }
        }

        public sbyte[] InstrumentID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.InstrumentID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[31];
                        for (int i = 0; i < 31; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.InstrumentID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 31; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte InvestorRange
        {
            get
            {
                return __instance.InvestorRange;
            }

            set
            {
                __instance.InvestorRange = value;
            }
        }

        public sbyte[] BrokerID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.BrokerID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[11];
                        for (int i = 0; i < 11; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.BrokerID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 11; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] InvestorID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.InvestorID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[15];
                        for (int i = 0; i < 15; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.InvestorID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 15; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte Direction
        {
            get
            {
                return __instance.Direction;
            }

            set
            {
                __instance.Direction = value;
            }
        }

        public sbyte TradingRight
        {
            get
            {
                return __instance.TradingRight;
            }

            set
            {
                __instance.TradingRight = value;
            }
        }

        public sbyte[] ExchangeID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.ExchangeID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[9];
                        for (int i = 0; i < 9; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.ExchangeID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 9; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte InstrumentRange
        {
            get
            {
                return __instance.InstrumentRange;
            }

            set
            {
                __instance.InstrumentRange = value;
            }
        }
    }

    public unsafe partial struct CSecurityFtdcInvestorPositionDetailField
    {
        public partial struct __Internal
        {
            public fixed sbyte InstrumentID[31];

            public fixed sbyte BrokerID[11];

            public fixed sbyte InvestorID[15];

            public sbyte HedgeFlag;

            public sbyte Direction;

            public fixed sbyte OpenDate[9];

            public fixed sbyte TradeID[21];

            public double Volume;

            public double OpenPrice;

            public fixed sbyte TradingDay[9];

            public sbyte TradeType;

            public fixed sbyte ExchangeID[9];

            public double Margin;

            public double ExchMargin;

            public double LastSettlementPrice;

            public double SettlementPrice;

            public double CloseVolume;

            public double CloseAmount;

            public double TransferFee;

            public double StampTax;

            public double Commission;

            public fixed sbyte AccountID[15];

            public double PledgeInPosition;

            public double PledgeInFrozenPosition;

            public double RepurchasePosition;

            public double Amount;

            public fixed sbyte UnderlyingInstrumentID[31];

            [SuppressUnmanagedCodeSecurity]
            [DllImport("securitymduserapi", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0CSecurityFtdcInvestorPositionDetailField@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);
        }

        private CSecurityFtdcInvestorPositionDetailField.__Internal __instance;
        internal CSecurityFtdcInvestorPositionDetailField.__Internal __Instance { get { return __instance; } }

        internal static global::LTSApi.CSecurityFtdcInvestorPositionDetailField __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new CSecurityFtdcInvestorPositionDetailField(native.ToPointer(), skipVTables);
        }

        internal static global::LTSApi.CSecurityFtdcInvestorPositionDetailField __CreateInstance(global::LTSApi.CSecurityFtdcInvestorPositionDetailField.__Internal native, bool skipVTables = false)
        {
            return new CSecurityFtdcInvestorPositionDetailField(native, skipVTables);
        }

        private CSecurityFtdcInvestorPositionDetailField(global::LTSApi.CSecurityFtdcInvestorPositionDetailField.__Internal native, bool skipVTables = false)
            : this()
        {
            __instance = native;
        }

        private CSecurityFtdcInvestorPositionDetailField(void* native, bool skipVTables = false) : this()
        {
            __instance = *(global::LTSApi.CSecurityFtdcInvestorPositionDetailField.__Internal*) native;
        }

        public CSecurityFtdcInvestorPositionDetailField(global::LTSApi.CSecurityFtdcInvestorPositionDetailField _0)
            : this()
        {
            var ____arg0 = _0.__Instance;
            var __arg0 = new global::System.IntPtr(&____arg0);
            fixed (__Internal* __instancePtr = &__instance)
            {
                __Internal.cctor_1(new global::System.IntPtr(__instancePtr), __arg0);
            }
        }

        public sbyte[] InstrumentID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.InstrumentID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[31];
                        for (int i = 0; i < 31; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.InstrumentID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 31; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] BrokerID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.BrokerID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[11];
                        for (int i = 0; i < 11; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.BrokerID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 11; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] InvestorID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.InvestorID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[15];
                        for (int i = 0; i < 15; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.InvestorID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 15; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte HedgeFlag
        {
            get
            {
                return __instance.HedgeFlag;
            }

            set
            {
                __instance.HedgeFlag = value;
            }
        }

        public sbyte Direction
        {
            get
            {
                return __instance.Direction;
            }

            set
            {
                __instance.Direction = value;
            }
        }

        public sbyte[] OpenDate
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.OpenDate)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[9];
                        for (int i = 0; i < 9; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.OpenDate)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 9; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] TradeID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.TradeID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[21];
                        for (int i = 0; i < 21; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.TradeID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 21; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public double Volume
        {
            get
            {
                return __instance.Volume;
            }

            set
            {
                __instance.Volume = value;
            }
        }

        public double OpenPrice
        {
            get
            {
                return __instance.OpenPrice;
            }

            set
            {
                __instance.OpenPrice = value;
            }
        }

        public sbyte[] TradingDay
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.TradingDay)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[9];
                        for (int i = 0; i < 9; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.TradingDay)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 9; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte TradeType
        {
            get
            {
                return __instance.TradeType;
            }

            set
            {
                __instance.TradeType = value;
            }
        }

        public sbyte[] ExchangeID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.ExchangeID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[9];
                        for (int i = 0; i < 9; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.ExchangeID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 9; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public double Margin
        {
            get
            {
                return __instance.Margin;
            }

            set
            {
                __instance.Margin = value;
            }
        }

        public double ExchMargin
        {
            get
            {
                return __instance.ExchMargin;
            }

            set
            {
                __instance.ExchMargin = value;
            }
        }

        public double LastSettlementPrice
        {
            get
            {
                return __instance.LastSettlementPrice;
            }

            set
            {
                __instance.LastSettlementPrice = value;
            }
        }

        public double SettlementPrice
        {
            get
            {
                return __instance.SettlementPrice;
            }

            set
            {
                __instance.SettlementPrice = value;
            }
        }

        public double CloseVolume
        {
            get
            {
                return __instance.CloseVolume;
            }

            set
            {
                __instance.CloseVolume = value;
            }
        }

        public double CloseAmount
        {
            get
            {
                return __instance.CloseAmount;
            }

            set
            {
                __instance.CloseAmount = value;
            }
        }

        public double TransferFee
        {
            get
            {
                return __instance.TransferFee;
            }

            set
            {
                __instance.TransferFee = value;
            }
        }

        public double StampTax
        {
            get
            {
                return __instance.StampTax;
            }

            set
            {
                __instance.StampTax = value;
            }
        }

        public double Commission
        {
            get
            {
                return __instance.Commission;
            }

            set
            {
                __instance.Commission = value;
            }
        }

        public sbyte[] AccountID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.AccountID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[15];
                        for (int i = 0; i < 15; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.AccountID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 15; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public double PledgeInPosition
        {
            get
            {
                return __instance.PledgeInPosition;
            }

            set
            {
                __instance.PledgeInPosition = value;
            }
        }

        public double PledgeInFrozenPosition
        {
            get
            {
                return __instance.PledgeInFrozenPosition;
            }

            set
            {
                __instance.PledgeInFrozenPosition = value;
            }
        }

        public double RepurchasePosition
        {
            get
            {
                return __instance.RepurchasePosition;
            }

            set
            {
                __instance.RepurchasePosition = value;
            }
        }

        public double Amount
        {
            get
            {
                return __instance.Amount;
            }

            set
            {
                __instance.Amount = value;
            }
        }

        public sbyte[] UnderlyingInstrumentID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.UnderlyingInstrumentID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[31];
                        for (int i = 0; i < 31; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.UnderlyingInstrumentID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 31; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }
    }

    public unsafe partial struct CSecurityFtdcBondInterestField
    {
        public partial struct __Internal
        {
            public fixed sbyte TradingDay[9];

            public fixed sbyte ExchangeID[9];

            public fixed sbyte InstrumentID[31];

            public double Interest;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("securitymduserapi", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0CSecurityFtdcBondInterestField@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);
        }

        private CSecurityFtdcBondInterestField.__Internal __instance;
        internal CSecurityFtdcBondInterestField.__Internal __Instance { get { return __instance; } }

        internal static global::LTSApi.CSecurityFtdcBondInterestField __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new CSecurityFtdcBondInterestField(native.ToPointer(), skipVTables);
        }

        internal static global::LTSApi.CSecurityFtdcBondInterestField __CreateInstance(global::LTSApi.CSecurityFtdcBondInterestField.__Internal native, bool skipVTables = false)
        {
            return new CSecurityFtdcBondInterestField(native, skipVTables);
        }

        private CSecurityFtdcBondInterestField(global::LTSApi.CSecurityFtdcBondInterestField.__Internal native, bool skipVTables = false)
            : this()
        {
            __instance = native;
        }

        private CSecurityFtdcBondInterestField(void* native, bool skipVTables = false) : this()
        {
            __instance = *(global::LTSApi.CSecurityFtdcBondInterestField.__Internal*) native;
        }

        public CSecurityFtdcBondInterestField(global::LTSApi.CSecurityFtdcBondInterestField _0)
            : this()
        {
            var ____arg0 = _0.__Instance;
            var __arg0 = new global::System.IntPtr(&____arg0);
            fixed (__Internal* __instancePtr = &__instance)
            {
                __Internal.cctor_1(new global::System.IntPtr(__instancePtr), __arg0);
            }
        }

        public sbyte[] TradingDay
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.TradingDay)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[9];
                        for (int i = 0; i < 9; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.TradingDay)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 9; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] ExchangeID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.ExchangeID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[9];
                        for (int i = 0; i < 9; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.ExchangeID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 9; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] InstrumentID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.InstrumentID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[31];
                        for (int i = 0; i < 31; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.InstrumentID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 31; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public double Interest
        {
            get
            {
                return __instance.Interest;
            }

            set
            {
                __instance.Interest = value;
            }
        }
    }

    public unsafe partial struct CSecurityFtdcMarketRationInfoField
    {
        public partial struct __Internal
        {
            public fixed sbyte BrokerID[11];

            public fixed sbyte InvestorID[15];

            public fixed sbyte ExchangeID[9];

            public double RationVolume;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("securitymduserapi", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0CSecurityFtdcMarketRationInfoField@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);
        }

        private CSecurityFtdcMarketRationInfoField.__Internal __instance;
        internal CSecurityFtdcMarketRationInfoField.__Internal __Instance { get { return __instance; } }

        internal static global::LTSApi.CSecurityFtdcMarketRationInfoField __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new CSecurityFtdcMarketRationInfoField(native.ToPointer(), skipVTables);
        }

        internal static global::LTSApi.CSecurityFtdcMarketRationInfoField __CreateInstance(global::LTSApi.CSecurityFtdcMarketRationInfoField.__Internal native, bool skipVTables = false)
        {
            return new CSecurityFtdcMarketRationInfoField(native, skipVTables);
        }

        private CSecurityFtdcMarketRationInfoField(global::LTSApi.CSecurityFtdcMarketRationInfoField.__Internal native, bool skipVTables = false)
            : this()
        {
            __instance = native;
        }

        private CSecurityFtdcMarketRationInfoField(void* native, bool skipVTables = false) : this()
        {
            __instance = *(global::LTSApi.CSecurityFtdcMarketRationInfoField.__Internal*) native;
        }

        public CSecurityFtdcMarketRationInfoField(global::LTSApi.CSecurityFtdcMarketRationInfoField _0)
            : this()
        {
            var ____arg0 = _0.__Instance;
            var __arg0 = new global::System.IntPtr(&____arg0);
            fixed (__Internal* __instancePtr = &__instance)
            {
                __Internal.cctor_1(new global::System.IntPtr(__instancePtr), __arg0);
            }
        }

        public sbyte[] BrokerID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.BrokerID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[11];
                        for (int i = 0; i < 11; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.BrokerID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 11; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] InvestorID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.InvestorID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[15];
                        for (int i = 0; i < 15; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.InvestorID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 15; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] ExchangeID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.ExchangeID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[9];
                        for (int i = 0; i < 9; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.ExchangeID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 9; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public double RationVolume
        {
            get
            {
                return __instance.RationVolume;
            }

            set
            {
                __instance.RationVolume = value;
            }
        }
    }

    public unsafe partial struct CSecurityFtdcInstrumentCommissionRateField
    {
        public partial struct __Internal
        {
            public fixed sbyte ExchangeID[9];

            public fixed sbyte InstrumentID[31];

            public sbyte InvestorRange;

            public fixed sbyte BrokerID[11];

            public fixed sbyte InvestorID[15];

            public sbyte Direction;

            public double StampTaxRateByMoney;

            public double StampTaxRateByVolume;

            public double TransferFeeRateByMoney;

            public double TransferFeeRateByVolume;

            public double TradeFeeByMoney;

            public double TradeFeeByVolume;

            public double MarginByMoney;

            public double MinTradeFee;

            public double MinTransferFee;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("securitymduserapi", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0CSecurityFtdcInstrumentCommissionRateField@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);
        }

        private CSecurityFtdcInstrumentCommissionRateField.__Internal __instance;
        internal CSecurityFtdcInstrumentCommissionRateField.__Internal __Instance { get { return __instance; } }

        internal static global::LTSApi.CSecurityFtdcInstrumentCommissionRateField __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new CSecurityFtdcInstrumentCommissionRateField(native.ToPointer(), skipVTables);
        }

        internal static global::LTSApi.CSecurityFtdcInstrumentCommissionRateField __CreateInstance(global::LTSApi.CSecurityFtdcInstrumentCommissionRateField.__Internal native, bool skipVTables = false)
        {
            return new CSecurityFtdcInstrumentCommissionRateField(native, skipVTables);
        }

        private CSecurityFtdcInstrumentCommissionRateField(global::LTSApi.CSecurityFtdcInstrumentCommissionRateField.__Internal native, bool skipVTables = false)
            : this()
        {
            __instance = native;
        }

        private CSecurityFtdcInstrumentCommissionRateField(void* native, bool skipVTables = false) : this()
        {
            __instance = *(global::LTSApi.CSecurityFtdcInstrumentCommissionRateField.__Internal*) native;
        }

        public CSecurityFtdcInstrumentCommissionRateField(global::LTSApi.CSecurityFtdcInstrumentCommissionRateField _0)
            : this()
        {
            var ____arg0 = _0.__Instance;
            var __arg0 = new global::System.IntPtr(&____arg0);
            fixed (__Internal* __instancePtr = &__instance)
            {
                __Internal.cctor_1(new global::System.IntPtr(__instancePtr), __arg0);
            }
        }

        public sbyte[] ExchangeID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.ExchangeID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[9];
                        for (int i = 0; i < 9; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.ExchangeID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 9; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] InstrumentID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.InstrumentID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[31];
                        for (int i = 0; i < 31; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.InstrumentID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 31; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte InvestorRange
        {
            get
            {
                return __instance.InvestorRange;
            }

            set
            {
                __instance.InvestorRange = value;
            }
        }

        public sbyte[] BrokerID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.BrokerID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[11];
                        for (int i = 0; i < 11; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.BrokerID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 11; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] InvestorID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.InvestorID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[15];
                        for (int i = 0; i < 15; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.InvestorID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 15; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte Direction
        {
            get
            {
                return __instance.Direction;
            }

            set
            {
                __instance.Direction = value;
            }
        }

        public double StampTaxRateByMoney
        {
            get
            {
                return __instance.StampTaxRateByMoney;
            }

            set
            {
                __instance.StampTaxRateByMoney = value;
            }
        }

        public double StampTaxRateByVolume
        {
            get
            {
                return __instance.StampTaxRateByVolume;
            }

            set
            {
                __instance.StampTaxRateByVolume = value;
            }
        }

        public double TransferFeeRateByMoney
        {
            get
            {
                return __instance.TransferFeeRateByMoney;
            }

            set
            {
                __instance.TransferFeeRateByMoney = value;
            }
        }

        public double TransferFeeRateByVolume
        {
            get
            {
                return __instance.TransferFeeRateByVolume;
            }

            set
            {
                __instance.TransferFeeRateByVolume = value;
            }
        }

        public double TradeFeeByMoney
        {
            get
            {
                return __instance.TradeFeeByMoney;
            }

            set
            {
                __instance.TradeFeeByMoney = value;
            }
        }

        public double TradeFeeByVolume
        {
            get
            {
                return __instance.TradeFeeByVolume;
            }

            set
            {
                __instance.TradeFeeByVolume = value;
            }
        }

        public double MarginByMoney
        {
            get
            {
                return __instance.MarginByMoney;
            }

            set
            {
                __instance.MarginByMoney = value;
            }
        }

        public double MinTradeFee
        {
            get
            {
                return __instance.MinTradeFee;
            }

            set
            {
                __instance.MinTradeFee = value;
            }
        }

        public double MinTransferFee
        {
            get
            {
                return __instance.MinTransferFee;
            }

            set
            {
                __instance.MinTransferFee = value;
            }
        }
    }

    public unsafe partial struct CSecurityFtdcExcessStockInfoField
    {
        public partial struct __Internal
        {
            public fixed sbyte BrokerID[11];

            public fixed sbyte InvestorID[15];

            public fixed sbyte ExchangeID[9];

            public fixed sbyte InstrumentID[31];

            public double ExcessVolume;

            public double ExcessFrozenVolume;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("securitymduserapi", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0CSecurityFtdcExcessStockInfoField@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);
        }

        private CSecurityFtdcExcessStockInfoField.__Internal __instance;
        internal CSecurityFtdcExcessStockInfoField.__Internal __Instance { get { return __instance; } }

        internal static global::LTSApi.CSecurityFtdcExcessStockInfoField __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new CSecurityFtdcExcessStockInfoField(native.ToPointer(), skipVTables);
        }

        internal static global::LTSApi.CSecurityFtdcExcessStockInfoField __CreateInstance(global::LTSApi.CSecurityFtdcExcessStockInfoField.__Internal native, bool skipVTables = false)
        {
            return new CSecurityFtdcExcessStockInfoField(native, skipVTables);
        }

        private CSecurityFtdcExcessStockInfoField(global::LTSApi.CSecurityFtdcExcessStockInfoField.__Internal native, bool skipVTables = false)
            : this()
        {
            __instance = native;
        }

        private CSecurityFtdcExcessStockInfoField(void* native, bool skipVTables = false) : this()
        {
            __instance = *(global::LTSApi.CSecurityFtdcExcessStockInfoField.__Internal*) native;
        }

        public CSecurityFtdcExcessStockInfoField(global::LTSApi.CSecurityFtdcExcessStockInfoField _0)
            : this()
        {
            var ____arg0 = _0.__Instance;
            var __arg0 = new global::System.IntPtr(&____arg0);
            fixed (__Internal* __instancePtr = &__instance)
            {
                __Internal.cctor_1(new global::System.IntPtr(__instancePtr), __arg0);
            }
        }

        public sbyte[] BrokerID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.BrokerID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[11];
                        for (int i = 0; i < 11; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.BrokerID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 11; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] InvestorID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.InvestorID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[15];
                        for (int i = 0; i < 15; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.InvestorID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 15; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] ExchangeID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.ExchangeID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[9];
                        for (int i = 0; i < 9; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.ExchangeID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 9; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] InstrumentID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.InstrumentID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[31];
                        for (int i = 0; i < 31; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.InstrumentID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 31; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public double ExcessVolume
        {
            get
            {
                return __instance.ExcessVolume;
            }

            set
            {
                __instance.ExcessVolume = value;
            }
        }

        public double ExcessFrozenVolume
        {
            get
            {
                return __instance.ExcessFrozenVolume;
            }

            set
            {
                __instance.ExcessFrozenVolume = value;
            }
        }
    }

    public unsafe partial struct CSecurityFtdcETFInstrumentField
    {
        public partial struct __Internal
        {
            public fixed sbyte ExchangeID[9];

            public fixed sbyte ETFInstrumentID[31];

            public fixed sbyte ETFPurRedInstrumentID[31];

            public int CreationRedemptionUnit;

            public double Maxcashratio;

            public sbyte Creationredemption;

            public double EstimateCashComponent;

            public double ETFNetValue;

            public sbyte FundClass;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("securitymduserapi", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0CSecurityFtdcETFInstrumentField@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);
        }

        private CSecurityFtdcETFInstrumentField.__Internal __instance;
        internal CSecurityFtdcETFInstrumentField.__Internal __Instance { get { return __instance; } }

        internal static global::LTSApi.CSecurityFtdcETFInstrumentField __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new CSecurityFtdcETFInstrumentField(native.ToPointer(), skipVTables);
        }

        internal static global::LTSApi.CSecurityFtdcETFInstrumentField __CreateInstance(global::LTSApi.CSecurityFtdcETFInstrumentField.__Internal native, bool skipVTables = false)
        {
            return new CSecurityFtdcETFInstrumentField(native, skipVTables);
        }

        private CSecurityFtdcETFInstrumentField(global::LTSApi.CSecurityFtdcETFInstrumentField.__Internal native, bool skipVTables = false)
            : this()
        {
            __instance = native;
        }

        private CSecurityFtdcETFInstrumentField(void* native, bool skipVTables = false) : this()
        {
            __instance = *(global::LTSApi.CSecurityFtdcETFInstrumentField.__Internal*) native;
        }

        public CSecurityFtdcETFInstrumentField(global::LTSApi.CSecurityFtdcETFInstrumentField _0)
            : this()
        {
            var ____arg0 = _0.__Instance;
            var __arg0 = new global::System.IntPtr(&____arg0);
            fixed (__Internal* __instancePtr = &__instance)
            {
                __Internal.cctor_1(new global::System.IntPtr(__instancePtr), __arg0);
            }
        }

        public sbyte[] ExchangeID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.ExchangeID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[9];
                        for (int i = 0; i < 9; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.ExchangeID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 9; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] ETFInstrumentID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.ETFInstrumentID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[31];
                        for (int i = 0; i < 31; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.ETFInstrumentID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 31; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] ETFPurRedInstrumentID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.ETFPurRedInstrumentID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[31];
                        for (int i = 0; i < 31; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.ETFPurRedInstrumentID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 31; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public int CreationRedemptionUnit
        {
            get
            {
                return __instance.CreationRedemptionUnit;
            }

            set
            {
                __instance.CreationRedemptionUnit = value;
            }
        }

        public double Maxcashratio
        {
            get
            {
                return __instance.Maxcashratio;
            }

            set
            {
                __instance.Maxcashratio = value;
            }
        }

        public sbyte Creationredemption
        {
            get
            {
                return __instance.Creationredemption;
            }

            set
            {
                __instance.Creationredemption = value;
            }
        }

        public double EstimateCashComponent
        {
            get
            {
                return __instance.EstimateCashComponent;
            }

            set
            {
                __instance.EstimateCashComponent = value;
            }
        }

        public double ETFNetValue
        {
            get
            {
                return __instance.ETFNetValue;
            }

            set
            {
                __instance.ETFNetValue = value;
            }
        }

        public sbyte FundClass
        {
            get
            {
                return __instance.FundClass;
            }

            set
            {
                __instance.FundClass = value;
            }
        }
    }

    public unsafe partial struct CSecurityFtdcETFBasketField
    {
        public partial struct __Internal
        {
            public fixed sbyte ExchangeID[9];

            public fixed sbyte ETFInstrumentID[31];

            public fixed sbyte StockInstrumentID[31];

            public fixed sbyte StockInstrumentName[21];

            public int Volume;

            public sbyte CurrenceReplaceStatus;

            public double Premium;

            public double Amount;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("securitymduserapi", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0CSecurityFtdcETFBasketField@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);
        }

        private CSecurityFtdcETFBasketField.__Internal __instance;
        internal CSecurityFtdcETFBasketField.__Internal __Instance { get { return __instance; } }

        internal static global::LTSApi.CSecurityFtdcETFBasketField __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new CSecurityFtdcETFBasketField(native.ToPointer(), skipVTables);
        }

        internal static global::LTSApi.CSecurityFtdcETFBasketField __CreateInstance(global::LTSApi.CSecurityFtdcETFBasketField.__Internal native, bool skipVTables = false)
        {
            return new CSecurityFtdcETFBasketField(native, skipVTables);
        }

        private CSecurityFtdcETFBasketField(global::LTSApi.CSecurityFtdcETFBasketField.__Internal native, bool skipVTables = false)
            : this()
        {
            __instance = native;
        }

        private CSecurityFtdcETFBasketField(void* native, bool skipVTables = false) : this()
        {
            __instance = *(global::LTSApi.CSecurityFtdcETFBasketField.__Internal*) native;
        }

        public CSecurityFtdcETFBasketField(global::LTSApi.CSecurityFtdcETFBasketField _0)
            : this()
        {
            var ____arg0 = _0.__Instance;
            var __arg0 = new global::System.IntPtr(&____arg0);
            fixed (__Internal* __instancePtr = &__instance)
            {
                __Internal.cctor_1(new global::System.IntPtr(__instancePtr), __arg0);
            }
        }

        public sbyte[] ExchangeID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.ExchangeID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[9];
                        for (int i = 0; i < 9; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.ExchangeID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 9; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] ETFInstrumentID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.ETFInstrumentID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[31];
                        for (int i = 0; i < 31; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.ETFInstrumentID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 31; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] StockInstrumentID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.StockInstrumentID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[31];
                        for (int i = 0; i < 31; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.StockInstrumentID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 31; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] StockInstrumentName
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.StockInstrumentName)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[21];
                        for (int i = 0; i < 21; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.StockInstrumentName)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 21; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public int Volume
        {
            get
            {
                return __instance.Volume;
            }

            set
            {
                __instance.Volume = value;
            }
        }

        public sbyte CurrenceReplaceStatus
        {
            get
            {
                return __instance.CurrenceReplaceStatus;
            }

            set
            {
                __instance.CurrenceReplaceStatus = value;
            }
        }

        public double Premium
        {
            get
            {
                return __instance.Premium;
            }

            set
            {
                __instance.Premium = value;
            }
        }

        public double Amount
        {
            get
            {
                return __instance.Amount;
            }

            set
            {
                __instance.Amount = value;
            }
        }
    }

    public unsafe partial struct CSecurityFtdcOFInstrumentField
    {
        public partial struct __Internal
        {
            public fixed sbyte ExchangeID[9];

            public fixed sbyte InstrumentID[31];

            public sbyte Creationredemption;

            public double NetPrice;

            public sbyte FundClass;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("securitymduserapi", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0CSecurityFtdcOFInstrumentField@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);
        }

        private CSecurityFtdcOFInstrumentField.__Internal __instance;
        internal CSecurityFtdcOFInstrumentField.__Internal __Instance { get { return __instance; } }

        internal static global::LTSApi.CSecurityFtdcOFInstrumentField __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new CSecurityFtdcOFInstrumentField(native.ToPointer(), skipVTables);
        }

        internal static global::LTSApi.CSecurityFtdcOFInstrumentField __CreateInstance(global::LTSApi.CSecurityFtdcOFInstrumentField.__Internal native, bool skipVTables = false)
        {
            return new CSecurityFtdcOFInstrumentField(native, skipVTables);
        }

        private CSecurityFtdcOFInstrumentField(global::LTSApi.CSecurityFtdcOFInstrumentField.__Internal native, bool skipVTables = false)
            : this()
        {
            __instance = native;
        }

        private CSecurityFtdcOFInstrumentField(void* native, bool skipVTables = false) : this()
        {
            __instance = *(global::LTSApi.CSecurityFtdcOFInstrumentField.__Internal*) native;
        }

        public CSecurityFtdcOFInstrumentField(global::LTSApi.CSecurityFtdcOFInstrumentField _0)
            : this()
        {
            var ____arg0 = _0.__Instance;
            var __arg0 = new global::System.IntPtr(&____arg0);
            fixed (__Internal* __instancePtr = &__instance)
            {
                __Internal.cctor_1(new global::System.IntPtr(__instancePtr), __arg0);
            }
        }

        public sbyte[] ExchangeID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.ExchangeID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[9];
                        for (int i = 0; i < 9; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.ExchangeID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 9; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] InstrumentID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.InstrumentID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[31];
                        for (int i = 0; i < 31; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.InstrumentID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 31; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte Creationredemption
        {
            get
            {
                return __instance.Creationredemption;
            }

            set
            {
                __instance.Creationredemption = value;
            }
        }

        public double NetPrice
        {
            get
            {
                return __instance.NetPrice;
            }

            set
            {
                __instance.NetPrice = value;
            }
        }

        public sbyte FundClass
        {
            get
            {
                return __instance.FundClass;
            }

            set
            {
                __instance.FundClass = value;
            }
        }
    }

    public unsafe partial struct CSecurityFtdcSFInstrumentField
    {
        public partial struct __Internal
        {
            public fixed sbyte ExchangeID[9];

            public fixed sbyte InstrumentID[31];

            public fixed sbyte SFInstrumentID[31];

            public sbyte SplitMergeStatus;

            public int MinSplitVolume;

            public int MinMergeVolume;

            public int VolumeRatio;

            public double NetPrice;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("securitymduserapi", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0CSecurityFtdcSFInstrumentField@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);
        }

        private CSecurityFtdcSFInstrumentField.__Internal __instance;
        internal CSecurityFtdcSFInstrumentField.__Internal __Instance { get { return __instance; } }

        internal static global::LTSApi.CSecurityFtdcSFInstrumentField __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new CSecurityFtdcSFInstrumentField(native.ToPointer(), skipVTables);
        }

        internal static global::LTSApi.CSecurityFtdcSFInstrumentField __CreateInstance(global::LTSApi.CSecurityFtdcSFInstrumentField.__Internal native, bool skipVTables = false)
        {
            return new CSecurityFtdcSFInstrumentField(native, skipVTables);
        }

        private CSecurityFtdcSFInstrumentField(global::LTSApi.CSecurityFtdcSFInstrumentField.__Internal native, bool skipVTables = false)
            : this()
        {
            __instance = native;
        }

        private CSecurityFtdcSFInstrumentField(void* native, bool skipVTables = false) : this()
        {
            __instance = *(global::LTSApi.CSecurityFtdcSFInstrumentField.__Internal*) native;
        }

        public CSecurityFtdcSFInstrumentField(global::LTSApi.CSecurityFtdcSFInstrumentField _0)
            : this()
        {
            var ____arg0 = _0.__Instance;
            var __arg0 = new global::System.IntPtr(&____arg0);
            fixed (__Internal* __instancePtr = &__instance)
            {
                __Internal.cctor_1(new global::System.IntPtr(__instancePtr), __arg0);
            }
        }

        public sbyte[] ExchangeID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.ExchangeID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[9];
                        for (int i = 0; i < 9; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.ExchangeID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 9; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] InstrumentID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.InstrumentID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[31];
                        for (int i = 0; i < 31; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.InstrumentID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 31; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] SFInstrumentID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.SFInstrumentID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[31];
                        for (int i = 0; i < 31; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.SFInstrumentID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 31; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte SplitMergeStatus
        {
            get
            {
                return __instance.SplitMergeStatus;
            }

            set
            {
                __instance.SplitMergeStatus = value;
            }
        }

        public int MinSplitVolume
        {
            get
            {
                return __instance.MinSplitVolume;
            }

            set
            {
                __instance.MinSplitVolume = value;
            }
        }

        public int MinMergeVolume
        {
            get
            {
                return __instance.MinMergeVolume;
            }

            set
            {
                __instance.MinMergeVolume = value;
            }
        }

        public int VolumeRatio
        {
            get
            {
                return __instance.VolumeRatio;
            }

            set
            {
                __instance.VolumeRatio = value;
            }
        }

        public double NetPrice
        {
            get
            {
                return __instance.NetPrice;
            }

            set
            {
                __instance.NetPrice = value;
            }
        }
    }

    public unsafe partial struct CSecurityFtdcInstrumentUnitMarginField
    {
        public partial struct __Internal
        {
            public fixed sbyte BrokerID[11];

            public fixed sbyte InvestorID[15];

            public fixed sbyte ExchangeID[9];

            public fixed sbyte InstrumentID[31];

            public double UnitMargin;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("securitymduserapi", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0CSecurityFtdcInstrumentUnitMarginField@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);
        }

        private CSecurityFtdcInstrumentUnitMarginField.__Internal __instance;
        internal CSecurityFtdcInstrumentUnitMarginField.__Internal __Instance { get { return __instance; } }

        internal static global::LTSApi.CSecurityFtdcInstrumentUnitMarginField __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new CSecurityFtdcInstrumentUnitMarginField(native.ToPointer(), skipVTables);
        }

        internal static global::LTSApi.CSecurityFtdcInstrumentUnitMarginField __CreateInstance(global::LTSApi.CSecurityFtdcInstrumentUnitMarginField.__Internal native, bool skipVTables = false)
        {
            return new CSecurityFtdcInstrumentUnitMarginField(native, skipVTables);
        }

        private CSecurityFtdcInstrumentUnitMarginField(global::LTSApi.CSecurityFtdcInstrumentUnitMarginField.__Internal native, bool skipVTables = false)
            : this()
        {
            __instance = native;
        }

        private CSecurityFtdcInstrumentUnitMarginField(void* native, bool skipVTables = false) : this()
        {
            __instance = *(global::LTSApi.CSecurityFtdcInstrumentUnitMarginField.__Internal*) native;
        }

        public CSecurityFtdcInstrumentUnitMarginField(global::LTSApi.CSecurityFtdcInstrumentUnitMarginField _0)
            : this()
        {
            var ____arg0 = _0.__Instance;
            var __arg0 = new global::System.IntPtr(&____arg0);
            fixed (__Internal* __instancePtr = &__instance)
            {
                __Internal.cctor_1(new global::System.IntPtr(__instancePtr), __arg0);
            }
        }

        public sbyte[] BrokerID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.BrokerID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[11];
                        for (int i = 0; i < 11; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.BrokerID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 11; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] InvestorID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.InvestorID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[15];
                        for (int i = 0; i < 15; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.InvestorID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 15; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] ExchangeID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.ExchangeID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[9];
                        for (int i = 0; i < 9; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.ExchangeID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 9; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] InstrumentID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.InstrumentID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[31];
                        for (int i = 0; i < 31; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.InstrumentID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 31; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public double UnitMargin
        {
            get
            {
                return __instance.UnitMargin;
            }

            set
            {
                __instance.UnitMargin = value;
            }
        }
    }

    public unsafe partial struct CSecurityFtdcOptionsFundLimitParamField
    {
        public partial struct __Internal
        {
            public fixed sbyte BrokerID[11];

            public fixed sbyte InvestorID[15];

            public fixed sbyte ExchangeID[9];

            public double MaxBuyAmount;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("securitymduserapi", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0CSecurityFtdcOptionsFundLimitParamField@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);
        }

        private CSecurityFtdcOptionsFundLimitParamField.__Internal __instance;
        internal CSecurityFtdcOptionsFundLimitParamField.__Internal __Instance { get { return __instance; } }

        internal static global::LTSApi.CSecurityFtdcOptionsFundLimitParamField __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new CSecurityFtdcOptionsFundLimitParamField(native.ToPointer(), skipVTables);
        }

        internal static global::LTSApi.CSecurityFtdcOptionsFundLimitParamField __CreateInstance(global::LTSApi.CSecurityFtdcOptionsFundLimitParamField.__Internal native, bool skipVTables = false)
        {
            return new CSecurityFtdcOptionsFundLimitParamField(native, skipVTables);
        }

        private CSecurityFtdcOptionsFundLimitParamField(global::LTSApi.CSecurityFtdcOptionsFundLimitParamField.__Internal native, bool skipVTables = false)
            : this()
        {
            __instance = native;
        }

        private CSecurityFtdcOptionsFundLimitParamField(void* native, bool skipVTables = false) : this()
        {
            __instance = *(global::LTSApi.CSecurityFtdcOptionsFundLimitParamField.__Internal*) native;
        }

        public CSecurityFtdcOptionsFundLimitParamField(global::LTSApi.CSecurityFtdcOptionsFundLimitParamField _0)
            : this()
        {
            var ____arg0 = _0.__Instance;
            var __arg0 = new global::System.IntPtr(&____arg0);
            fixed (__Internal* __instancePtr = &__instance)
            {
                __Internal.cctor_1(new global::System.IntPtr(__instancePtr), __arg0);
            }
        }

        public sbyte[] BrokerID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.BrokerID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[11];
                        for (int i = 0; i < 11; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.BrokerID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 11; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] InvestorID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.InvestorID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[15];
                        for (int i = 0; i < 15; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.InvestorID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 15; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] ExchangeID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.ExchangeID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[9];
                        for (int i = 0; i < 9; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.ExchangeID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 9; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public double MaxBuyAmount
        {
            get
            {
                return __instance.MaxBuyAmount;
            }

            set
            {
                __instance.MaxBuyAmount = value;
            }
        }
    }

    public unsafe partial struct CSecurityFtdcInvestorOptionsPositionField
    {
        public partial struct __Internal
        {
            public fixed sbyte BrokerID[11];

            public sbyte InvestorRange;

            public fixed sbyte InvestorID[15];

            public fixed sbyte ExchangeID[9];

            public fixed sbyte InstrumentID[31];

            public double MaxLongPositionLimit;

            public double MaxOpenVolLimit;

            public double MaxPositionLimit;

            public double LongPosition;

            public double ShortPosition;

            public double TodayOpenVolume;

            public double TodayOpenFrozenVolume;

            public double LongFrozenPosition;

            public double ShortFrozenPosition;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("securitymduserapi", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0CSecurityFtdcInvestorOptionsPositionField@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);
        }

        private CSecurityFtdcInvestorOptionsPositionField.__Internal __instance;
        internal CSecurityFtdcInvestorOptionsPositionField.__Internal __Instance { get { return __instance; } }

        internal static global::LTSApi.CSecurityFtdcInvestorOptionsPositionField __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new CSecurityFtdcInvestorOptionsPositionField(native.ToPointer(), skipVTables);
        }

        internal static global::LTSApi.CSecurityFtdcInvestorOptionsPositionField __CreateInstance(global::LTSApi.CSecurityFtdcInvestorOptionsPositionField.__Internal native, bool skipVTables = false)
        {
            return new CSecurityFtdcInvestorOptionsPositionField(native, skipVTables);
        }

        private CSecurityFtdcInvestorOptionsPositionField(global::LTSApi.CSecurityFtdcInvestorOptionsPositionField.__Internal native, bool skipVTables = false)
            : this()
        {
            __instance = native;
        }

        private CSecurityFtdcInvestorOptionsPositionField(void* native, bool skipVTables = false) : this()
        {
            __instance = *(global::LTSApi.CSecurityFtdcInvestorOptionsPositionField.__Internal*) native;
        }

        public CSecurityFtdcInvestorOptionsPositionField(global::LTSApi.CSecurityFtdcInvestorOptionsPositionField _0)
            : this()
        {
            var ____arg0 = _0.__Instance;
            var __arg0 = new global::System.IntPtr(&____arg0);
            fixed (__Internal* __instancePtr = &__instance)
            {
                __Internal.cctor_1(new global::System.IntPtr(__instancePtr), __arg0);
            }
        }

        public sbyte[] BrokerID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.BrokerID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[11];
                        for (int i = 0; i < 11; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.BrokerID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 11; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte InvestorRange
        {
            get
            {
                return __instance.InvestorRange;
            }

            set
            {
                __instance.InvestorRange = value;
            }
        }

        public sbyte[] InvestorID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.InvestorID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[15];
                        for (int i = 0; i < 15; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.InvestorID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 15; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] ExchangeID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.ExchangeID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[9];
                        for (int i = 0; i < 9; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.ExchangeID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 9; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] InstrumentID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.InstrumentID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[31];
                        for (int i = 0; i < 31; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.InstrumentID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 31; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public double MaxLongPositionLimit
        {
            get
            {
                return __instance.MaxLongPositionLimit;
            }

            set
            {
                __instance.MaxLongPositionLimit = value;
            }
        }

        public double MaxOpenVolLimit
        {
            get
            {
                return __instance.MaxOpenVolLimit;
            }

            set
            {
                __instance.MaxOpenVolLimit = value;
            }
        }

        public double MaxPositionLimit
        {
            get
            {
                return __instance.MaxPositionLimit;
            }

            set
            {
                __instance.MaxPositionLimit = value;
            }
        }

        public double LongPosition
        {
            get
            {
                return __instance.LongPosition;
            }

            set
            {
                __instance.LongPosition = value;
            }
        }

        public double ShortPosition
        {
            get
            {
                return __instance.ShortPosition;
            }

            set
            {
                __instance.ShortPosition = value;
            }
        }

        public double TodayOpenVolume
        {
            get
            {
                return __instance.TodayOpenVolume;
            }

            set
            {
                __instance.TodayOpenVolume = value;
            }
        }

        public double TodayOpenFrozenVolume
        {
            get
            {
                return __instance.TodayOpenFrozenVolume;
            }

            set
            {
                __instance.TodayOpenFrozenVolume = value;
            }
        }

        public double LongFrozenPosition
        {
            get
            {
                return __instance.LongFrozenPosition;
            }

            set
            {
                __instance.LongFrozenPosition = value;
            }
        }

        public double ShortFrozenPosition
        {
            get
            {
                return __instance.ShortFrozenPosition;
            }

            set
            {
                __instance.ShortFrozenPosition = value;
            }
        }
    }

    public unsafe partial struct CSecurityFtdcPreDelivInfoField
    {
        public partial struct __Internal
        {
            public fixed sbyte BrokerID[11];

            public fixed sbyte InvestorID[15];

            public fixed sbyte ExchangeID[9];

            public fixed sbyte InstrumentID[31];

            public sbyte DelivType;

            public fixed sbyte UnderlyingInstrumentID[31];

            public double DelivVolume;

            public double DelivAmount;

            public double ExecVolume;

            public sbyte Direction;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("securitymduserapi", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0CSecurityFtdcPreDelivInfoField@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);
        }

        private CSecurityFtdcPreDelivInfoField.__Internal __instance;
        internal CSecurityFtdcPreDelivInfoField.__Internal __Instance { get { return __instance; } }

        internal static global::LTSApi.CSecurityFtdcPreDelivInfoField __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new CSecurityFtdcPreDelivInfoField(native.ToPointer(), skipVTables);
        }

        internal static global::LTSApi.CSecurityFtdcPreDelivInfoField __CreateInstance(global::LTSApi.CSecurityFtdcPreDelivInfoField.__Internal native, bool skipVTables = false)
        {
            return new CSecurityFtdcPreDelivInfoField(native, skipVTables);
        }

        private CSecurityFtdcPreDelivInfoField(global::LTSApi.CSecurityFtdcPreDelivInfoField.__Internal native, bool skipVTables = false)
            : this()
        {
            __instance = native;
        }

        private CSecurityFtdcPreDelivInfoField(void* native, bool skipVTables = false) : this()
        {
            __instance = *(global::LTSApi.CSecurityFtdcPreDelivInfoField.__Internal*) native;
        }

        public CSecurityFtdcPreDelivInfoField(global::LTSApi.CSecurityFtdcPreDelivInfoField _0)
            : this()
        {
            var ____arg0 = _0.__Instance;
            var __arg0 = new global::System.IntPtr(&____arg0);
            fixed (__Internal* __instancePtr = &__instance)
            {
                __Internal.cctor_1(new global::System.IntPtr(__instancePtr), __arg0);
            }
        }

        public sbyte[] BrokerID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.BrokerID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[11];
                        for (int i = 0; i < 11; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.BrokerID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 11; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] InvestorID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.InvestorID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[15];
                        for (int i = 0; i < 15; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.InvestorID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 15; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] ExchangeID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.ExchangeID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[9];
                        for (int i = 0; i < 9; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.ExchangeID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 9; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] InstrumentID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.InstrumentID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[31];
                        for (int i = 0; i < 31; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.InstrumentID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 31; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte DelivType
        {
            get
            {
                return __instance.DelivType;
            }

            set
            {
                __instance.DelivType = value;
            }
        }

        public sbyte[] UnderlyingInstrumentID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.UnderlyingInstrumentID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[31];
                        for (int i = 0; i < 31; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.UnderlyingInstrumentID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 31; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public double DelivVolume
        {
            get
            {
                return __instance.DelivVolume;
            }

            set
            {
                __instance.DelivVolume = value;
            }
        }

        public double DelivAmount
        {
            get
            {
                return __instance.DelivAmount;
            }

            set
            {
                __instance.DelivAmount = value;
            }
        }

        public double ExecVolume
        {
            get
            {
                return __instance.ExecVolume;
            }

            set
            {
                __instance.ExecVolume = value;
            }
        }

        public sbyte Direction
        {
            get
            {
                return __instance.Direction;
            }

            set
            {
                __instance.Direction = value;
            }
        }
    }

    public unsafe partial struct CSecurityFtdcCreditStockAssignInfoField
    {
        public partial struct __Internal
        {
            public fixed sbyte BrokerID[11];

            public fixed sbyte InvestorID[15];

            public fixed sbyte ExchangeID[9];

            public fixed sbyte InstrumentID[31];

            public double LimitVolume;

            public double YDVolume;

            public double LeftVolume;

            public double FrozenVolume;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("securitymduserapi", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0CSecurityFtdcCreditStockAssignInfoField@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);
        }

        private CSecurityFtdcCreditStockAssignInfoField.__Internal __instance;
        internal CSecurityFtdcCreditStockAssignInfoField.__Internal __Instance { get { return __instance; } }

        internal static global::LTSApi.CSecurityFtdcCreditStockAssignInfoField __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new CSecurityFtdcCreditStockAssignInfoField(native.ToPointer(), skipVTables);
        }

        internal static global::LTSApi.CSecurityFtdcCreditStockAssignInfoField __CreateInstance(global::LTSApi.CSecurityFtdcCreditStockAssignInfoField.__Internal native, bool skipVTables = false)
        {
            return new CSecurityFtdcCreditStockAssignInfoField(native, skipVTables);
        }

        private CSecurityFtdcCreditStockAssignInfoField(global::LTSApi.CSecurityFtdcCreditStockAssignInfoField.__Internal native, bool skipVTables = false)
            : this()
        {
            __instance = native;
        }

        private CSecurityFtdcCreditStockAssignInfoField(void* native, bool skipVTables = false) : this()
        {
            __instance = *(global::LTSApi.CSecurityFtdcCreditStockAssignInfoField.__Internal*) native;
        }

        public CSecurityFtdcCreditStockAssignInfoField(global::LTSApi.CSecurityFtdcCreditStockAssignInfoField _0)
            : this()
        {
            var ____arg0 = _0.__Instance;
            var __arg0 = new global::System.IntPtr(&____arg0);
            fixed (__Internal* __instancePtr = &__instance)
            {
                __Internal.cctor_1(new global::System.IntPtr(__instancePtr), __arg0);
            }
        }

        public sbyte[] BrokerID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.BrokerID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[11];
                        for (int i = 0; i < 11; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.BrokerID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 11; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] InvestorID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.InvestorID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[15];
                        for (int i = 0; i < 15; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.InvestorID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 15; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] ExchangeID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.ExchangeID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[9];
                        for (int i = 0; i < 9; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.ExchangeID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 9; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] InstrumentID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.InstrumentID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[31];
                        for (int i = 0; i < 31; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.InstrumentID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 31; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public double LimitVolume
        {
            get
            {
                return __instance.LimitVolume;
            }

            set
            {
                __instance.LimitVolume = value;
            }
        }

        public double YDVolume
        {
            get
            {
                return __instance.YDVolume;
            }

            set
            {
                __instance.YDVolume = value;
            }
        }

        public double LeftVolume
        {
            get
            {
                return __instance.LeftVolume;
            }

            set
            {
                __instance.LeftVolume = value;
            }
        }

        public double FrozenVolume
        {
            get
            {
                return __instance.FrozenVolume;
            }

            set
            {
                __instance.FrozenVolume = value;
            }
        }
    }

    public unsafe partial struct CSecurityFtdcCreditCashAssignInfoField
    {
        public partial struct __Internal
        {
            public fixed sbyte BrokerID[11];

            public fixed sbyte InvestorID[15];

            public double LimitAmount;

            public double YDAmount;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("securitymduserapi", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0CSecurityFtdcCreditCashAssignInfoField@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);
        }

        private CSecurityFtdcCreditCashAssignInfoField.__Internal __instance;
        internal CSecurityFtdcCreditCashAssignInfoField.__Internal __Instance { get { return __instance; } }

        internal static global::LTSApi.CSecurityFtdcCreditCashAssignInfoField __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new CSecurityFtdcCreditCashAssignInfoField(native.ToPointer(), skipVTables);
        }

        internal static global::LTSApi.CSecurityFtdcCreditCashAssignInfoField __CreateInstance(global::LTSApi.CSecurityFtdcCreditCashAssignInfoField.__Internal native, bool skipVTables = false)
        {
            return new CSecurityFtdcCreditCashAssignInfoField(native, skipVTables);
        }

        private CSecurityFtdcCreditCashAssignInfoField(global::LTSApi.CSecurityFtdcCreditCashAssignInfoField.__Internal native, bool skipVTables = false)
            : this()
        {
            __instance = native;
        }

        private CSecurityFtdcCreditCashAssignInfoField(void* native, bool skipVTables = false) : this()
        {
            __instance = *(global::LTSApi.CSecurityFtdcCreditCashAssignInfoField.__Internal*) native;
        }

        public CSecurityFtdcCreditCashAssignInfoField(global::LTSApi.CSecurityFtdcCreditCashAssignInfoField _0)
            : this()
        {
            var ____arg0 = _0.__Instance;
            var __arg0 = new global::System.IntPtr(&____arg0);
            fixed (__Internal* __instancePtr = &__instance)
            {
                __Internal.cctor_1(new global::System.IntPtr(__instancePtr), __arg0);
            }
        }

        public sbyte[] BrokerID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.BrokerID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[11];
                        for (int i = 0; i < 11; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.BrokerID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 11; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] InvestorID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.InvestorID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[15];
                        for (int i = 0; i < 15; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.InvestorID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 15; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public double LimitAmount
        {
            get
            {
                return __instance.LimitAmount;
            }

            set
            {
                __instance.LimitAmount = value;
            }
        }

        public double YDAmount
        {
            get
            {
                return __instance.YDAmount;
            }

            set
            {
                __instance.YDAmount = value;
            }
        }
    }

    public unsafe partial struct CSecurityFtdcConversionRateField
    {
        public partial struct __Internal
        {
            public fixed sbyte ExchangeID[9];

            public fixed sbyte InstrumentID[31];

            public double ConversionRate;

            public int IsTradingForMargin;

            public int IsTradingForShort;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("securitymduserapi", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0CSecurityFtdcConversionRateField@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);
        }

        private CSecurityFtdcConversionRateField.__Internal __instance;
        internal CSecurityFtdcConversionRateField.__Internal __Instance { get { return __instance; } }

        internal static global::LTSApi.CSecurityFtdcConversionRateField __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new CSecurityFtdcConversionRateField(native.ToPointer(), skipVTables);
        }

        internal static global::LTSApi.CSecurityFtdcConversionRateField __CreateInstance(global::LTSApi.CSecurityFtdcConversionRateField.__Internal native, bool skipVTables = false)
        {
            return new CSecurityFtdcConversionRateField(native, skipVTables);
        }

        private CSecurityFtdcConversionRateField(global::LTSApi.CSecurityFtdcConversionRateField.__Internal native, bool skipVTables = false)
            : this()
        {
            __instance = native;
        }

        private CSecurityFtdcConversionRateField(void* native, bool skipVTables = false) : this()
        {
            __instance = *(global::LTSApi.CSecurityFtdcConversionRateField.__Internal*) native;
        }

        public CSecurityFtdcConversionRateField(global::LTSApi.CSecurityFtdcConversionRateField _0)
            : this()
        {
            var ____arg0 = _0.__Instance;
            var __arg0 = new global::System.IntPtr(&____arg0);
            fixed (__Internal* __instancePtr = &__instance)
            {
                __Internal.cctor_1(new global::System.IntPtr(__instancePtr), __arg0);
            }
        }

        public sbyte[] ExchangeID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.ExchangeID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[9];
                        for (int i = 0; i < 9; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.ExchangeID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 9; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] InstrumentID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.InstrumentID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[31];
                        for (int i = 0; i < 31; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.InstrumentID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 31; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public double ConversionRate
        {
            get
            {
                return __instance.ConversionRate;
            }

            set
            {
                __instance.ConversionRate = value;
            }
        }

        public int IsTradingForMargin
        {
            get
            {
                return __instance.IsTradingForMargin;
            }

            set
            {
                __instance.IsTradingForMargin = value;
            }
        }

        public int IsTradingForShort
        {
            get
            {
                return __instance.IsTradingForShort;
            }

            set
            {
                __instance.IsTradingForShort = value;
            }
        }
    }

    public unsafe partial struct CSecurityFtdcHisCreditDebtInfoField
    {
        public partial struct __Internal
        {
            public fixed sbyte BrokerID[11];

            public fixed sbyte InvestorID[15];

            public fixed sbyte ExchangeID[9];

            public fixed sbyte InstrumentID[31];

            public fixed sbyte OpenDate[9];

            public sbyte Direction;

            public double OpenPrice;

            public double Volume;

            public double Amount;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("securitymduserapi", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0CSecurityFtdcHisCreditDebtInfoField@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);
        }

        private CSecurityFtdcHisCreditDebtInfoField.__Internal __instance;
        internal CSecurityFtdcHisCreditDebtInfoField.__Internal __Instance { get { return __instance; } }

        internal static global::LTSApi.CSecurityFtdcHisCreditDebtInfoField __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new CSecurityFtdcHisCreditDebtInfoField(native.ToPointer(), skipVTables);
        }

        internal static global::LTSApi.CSecurityFtdcHisCreditDebtInfoField __CreateInstance(global::LTSApi.CSecurityFtdcHisCreditDebtInfoField.__Internal native, bool skipVTables = false)
        {
            return new CSecurityFtdcHisCreditDebtInfoField(native, skipVTables);
        }

        private CSecurityFtdcHisCreditDebtInfoField(global::LTSApi.CSecurityFtdcHisCreditDebtInfoField.__Internal native, bool skipVTables = false)
            : this()
        {
            __instance = native;
        }

        private CSecurityFtdcHisCreditDebtInfoField(void* native, bool skipVTables = false) : this()
        {
            __instance = *(global::LTSApi.CSecurityFtdcHisCreditDebtInfoField.__Internal*) native;
        }

        public CSecurityFtdcHisCreditDebtInfoField(global::LTSApi.CSecurityFtdcHisCreditDebtInfoField _0)
            : this()
        {
            var ____arg0 = _0.__Instance;
            var __arg0 = new global::System.IntPtr(&____arg0);
            fixed (__Internal* __instancePtr = &__instance)
            {
                __Internal.cctor_1(new global::System.IntPtr(__instancePtr), __arg0);
            }
        }

        public sbyte[] BrokerID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.BrokerID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[11];
                        for (int i = 0; i < 11; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.BrokerID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 11; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] InvestorID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.InvestorID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[15];
                        for (int i = 0; i < 15; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.InvestorID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 15; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] ExchangeID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.ExchangeID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[9];
                        for (int i = 0; i < 9; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.ExchangeID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 9; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] InstrumentID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.InstrumentID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[31];
                        for (int i = 0; i < 31; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.InstrumentID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 31; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] OpenDate
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.OpenDate)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[9];
                        for (int i = 0; i < 9; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.OpenDate)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 9; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte Direction
        {
            get
            {
                return __instance.Direction;
            }

            set
            {
                __instance.Direction = value;
            }
        }

        public double OpenPrice
        {
            get
            {
                return __instance.OpenPrice;
            }

            set
            {
                __instance.OpenPrice = value;
            }
        }

        public double Volume
        {
            get
            {
                return __instance.Volume;
            }

            set
            {
                __instance.Volume = value;
            }
        }

        public double Amount
        {
            get
            {
                return __instance.Amount;
            }

            set
            {
                __instance.Amount = value;
            }
        }
    }

    public unsafe partial struct CSecurityFtdcMarketDataStaticInfoField
    {
        public partial struct __Internal
        {
            public fixed sbyte ExchangeID[9];

            public fixed sbyte InstrumentID[31];

            public double UpperLimitPrice;

            public double LowerLimitPrice;

            public double PreSettlementPrice;

            public double PreClosePrice;

            public double PreIOPV;

            public int IsNotTrade;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("securitymduserapi", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0CSecurityFtdcMarketDataStaticInfoField@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);
        }

        private CSecurityFtdcMarketDataStaticInfoField.__Internal __instance;
        internal CSecurityFtdcMarketDataStaticInfoField.__Internal __Instance { get { return __instance; } }

        internal static global::LTSApi.CSecurityFtdcMarketDataStaticInfoField __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new CSecurityFtdcMarketDataStaticInfoField(native.ToPointer(), skipVTables);
        }

        internal static global::LTSApi.CSecurityFtdcMarketDataStaticInfoField __CreateInstance(global::LTSApi.CSecurityFtdcMarketDataStaticInfoField.__Internal native, bool skipVTables = false)
        {
            return new CSecurityFtdcMarketDataStaticInfoField(native, skipVTables);
        }

        private CSecurityFtdcMarketDataStaticInfoField(global::LTSApi.CSecurityFtdcMarketDataStaticInfoField.__Internal native, bool skipVTables = false)
            : this()
        {
            __instance = native;
        }

        private CSecurityFtdcMarketDataStaticInfoField(void* native, bool skipVTables = false) : this()
        {
            __instance = *(global::LTSApi.CSecurityFtdcMarketDataStaticInfoField.__Internal*) native;
        }

        public CSecurityFtdcMarketDataStaticInfoField(global::LTSApi.CSecurityFtdcMarketDataStaticInfoField _0)
            : this()
        {
            var ____arg0 = _0.__Instance;
            var __arg0 = new global::System.IntPtr(&____arg0);
            fixed (__Internal* __instancePtr = &__instance)
            {
                __Internal.cctor_1(new global::System.IntPtr(__instancePtr), __arg0);
            }
        }

        public sbyte[] ExchangeID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.ExchangeID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[9];
                        for (int i = 0; i < 9; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.ExchangeID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 9; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] InstrumentID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.InstrumentID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[31];
                        for (int i = 0; i < 31; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.InstrumentID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 31; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public double UpperLimitPrice
        {
            get
            {
                return __instance.UpperLimitPrice;
            }

            set
            {
                __instance.UpperLimitPrice = value;
            }
        }

        public double LowerLimitPrice
        {
            get
            {
                return __instance.LowerLimitPrice;
            }

            set
            {
                __instance.LowerLimitPrice = value;
            }
        }

        public double PreSettlementPrice
        {
            get
            {
                return __instance.PreSettlementPrice;
            }

            set
            {
                __instance.PreSettlementPrice = value;
            }
        }

        public double PreClosePrice
        {
            get
            {
                return __instance.PreClosePrice;
            }

            set
            {
                __instance.PreClosePrice = value;
            }
        }

        public double PreIOPV
        {
            get
            {
                return __instance.PreIOPV;
            }

            set
            {
                __instance.PreIOPV = value;
            }
        }

        public int IsNotTrade
        {
            get
            {
                return __instance.IsNotTrade;
            }

            set
            {
                __instance.IsNotTrade = value;
            }
        }
    }

    public unsafe partial struct CSecurityFtdcExpireRepurchInfoField
    {
        public partial struct __Internal
        {
            public fixed sbyte BrokerID[11];

            public fixed sbyte InvestorID[15];

            public fixed sbyte AccountID[15];

            public sbyte ExpireType;

            public fixed sbyte ExchangeID[9];

            public fixed sbyte InstrumentID[31];

            public double Volume;

            public double Amount;

            public double Interest;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("securitymduserapi", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0CSecurityFtdcExpireRepurchInfoField@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);
        }

        private CSecurityFtdcExpireRepurchInfoField.__Internal __instance;
        internal CSecurityFtdcExpireRepurchInfoField.__Internal __Instance { get { return __instance; } }

        internal static global::LTSApi.CSecurityFtdcExpireRepurchInfoField __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new CSecurityFtdcExpireRepurchInfoField(native.ToPointer(), skipVTables);
        }

        internal static global::LTSApi.CSecurityFtdcExpireRepurchInfoField __CreateInstance(global::LTSApi.CSecurityFtdcExpireRepurchInfoField.__Internal native, bool skipVTables = false)
        {
            return new CSecurityFtdcExpireRepurchInfoField(native, skipVTables);
        }

        private CSecurityFtdcExpireRepurchInfoField(global::LTSApi.CSecurityFtdcExpireRepurchInfoField.__Internal native, bool skipVTables = false)
            : this()
        {
            __instance = native;
        }

        private CSecurityFtdcExpireRepurchInfoField(void* native, bool skipVTables = false) : this()
        {
            __instance = *(global::LTSApi.CSecurityFtdcExpireRepurchInfoField.__Internal*) native;
        }

        public CSecurityFtdcExpireRepurchInfoField(global::LTSApi.CSecurityFtdcExpireRepurchInfoField _0)
            : this()
        {
            var ____arg0 = _0.__Instance;
            var __arg0 = new global::System.IntPtr(&____arg0);
            fixed (__Internal* __instancePtr = &__instance)
            {
                __Internal.cctor_1(new global::System.IntPtr(__instancePtr), __arg0);
            }
        }

        public sbyte[] BrokerID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.BrokerID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[11];
                        for (int i = 0; i < 11; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.BrokerID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 11; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] InvestorID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.InvestorID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[15];
                        for (int i = 0; i < 15; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.InvestorID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 15; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] AccountID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.AccountID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[15];
                        for (int i = 0; i < 15; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.AccountID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 15; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte ExpireType
        {
            get
            {
                return __instance.ExpireType;
            }

            set
            {
                __instance.ExpireType = value;
            }
        }

        public sbyte[] ExchangeID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.ExchangeID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[9];
                        for (int i = 0; i < 9; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.ExchangeID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 9; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] InstrumentID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.InstrumentID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[31];
                        for (int i = 0; i < 31; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.InstrumentID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 31; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public double Volume
        {
            get
            {
                return __instance.Volume;
            }

            set
            {
                __instance.Volume = value;
            }
        }

        public double Amount
        {
            get
            {
                return __instance.Amount;
            }

            set
            {
                __instance.Amount = value;
            }
        }

        public double Interest
        {
            get
            {
                return __instance.Interest;
            }

            set
            {
                __instance.Interest = value;
            }
        }
    }

    public unsafe partial struct CSecurityFtdcBondPledgeRateField
    {
        public partial struct __Internal
        {
            public fixed sbyte ExchangeID[9];

            public fixed sbyte InstrumentID[31];

            public double Ratio;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("securitymduserapi", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0CSecurityFtdcBondPledgeRateField@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);
        }

        private CSecurityFtdcBondPledgeRateField.__Internal __instance;
        internal CSecurityFtdcBondPledgeRateField.__Internal __Instance { get { return __instance; } }

        internal static global::LTSApi.CSecurityFtdcBondPledgeRateField __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new CSecurityFtdcBondPledgeRateField(native.ToPointer(), skipVTables);
        }

        internal static global::LTSApi.CSecurityFtdcBondPledgeRateField __CreateInstance(global::LTSApi.CSecurityFtdcBondPledgeRateField.__Internal native, bool skipVTables = false)
        {
            return new CSecurityFtdcBondPledgeRateField(native, skipVTables);
        }

        private CSecurityFtdcBondPledgeRateField(global::LTSApi.CSecurityFtdcBondPledgeRateField.__Internal native, bool skipVTables = false)
            : this()
        {
            __instance = native;
        }

        private CSecurityFtdcBondPledgeRateField(void* native, bool skipVTables = false) : this()
        {
            __instance = *(global::LTSApi.CSecurityFtdcBondPledgeRateField.__Internal*) native;
        }

        public CSecurityFtdcBondPledgeRateField(global::LTSApi.CSecurityFtdcBondPledgeRateField _0)
            : this()
        {
            var ____arg0 = _0.__Instance;
            var __arg0 = new global::System.IntPtr(&____arg0);
            fixed (__Internal* __instancePtr = &__instance)
            {
                __Internal.cctor_1(new global::System.IntPtr(__instancePtr), __arg0);
            }
        }

        public sbyte[] ExchangeID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.ExchangeID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[9];
                        for (int i = 0; i < 9; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.ExchangeID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 9; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] InstrumentID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.InstrumentID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[31];
                        for (int i = 0; i < 31; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.InstrumentID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 31; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public double Ratio
        {
            get
            {
                return __instance.Ratio;
            }

            set
            {
                __instance.Ratio = value;
            }
        }
    }

    public unsafe partial struct CSecurityFtdcPledgeBondField
    {
        public partial struct __Internal
        {
            public fixed sbyte ExchangeID[9];

            public fixed sbyte InstrumentID[31];

            public fixed sbyte PledgeID[31];

            [SuppressUnmanagedCodeSecurity]
            [DllImport("securitymduserapi", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0CSecurityFtdcPledgeBondField@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);
        }

        private CSecurityFtdcPledgeBondField.__Internal __instance;
        internal CSecurityFtdcPledgeBondField.__Internal __Instance { get { return __instance; } }

        internal static global::LTSApi.CSecurityFtdcPledgeBondField __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new CSecurityFtdcPledgeBondField(native.ToPointer(), skipVTables);
        }

        internal static global::LTSApi.CSecurityFtdcPledgeBondField __CreateInstance(global::LTSApi.CSecurityFtdcPledgeBondField.__Internal native, bool skipVTables = false)
        {
            return new CSecurityFtdcPledgeBondField(native, skipVTables);
        }

        private CSecurityFtdcPledgeBondField(global::LTSApi.CSecurityFtdcPledgeBondField.__Internal native, bool skipVTables = false)
            : this()
        {
            __instance = native;
        }

        private CSecurityFtdcPledgeBondField(void* native, bool skipVTables = false) : this()
        {
            __instance = *(global::LTSApi.CSecurityFtdcPledgeBondField.__Internal*) native;
        }

        public CSecurityFtdcPledgeBondField(global::LTSApi.CSecurityFtdcPledgeBondField _0)
            : this()
        {
            var ____arg0 = _0.__Instance;
            var __arg0 = new global::System.IntPtr(&____arg0);
            fixed (__Internal* __instancePtr = &__instance)
            {
                __Internal.cctor_1(new global::System.IntPtr(__instancePtr), __arg0);
            }
        }

        public sbyte[] ExchangeID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.ExchangeID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[9];
                        for (int i = 0; i < 9; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.ExchangeID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 9; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] InstrumentID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.InstrumentID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[31];
                        for (int i = 0; i < 31; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.InstrumentID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 31; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] PledgeID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.PledgeID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[31];
                        for (int i = 0; i < 31; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.PledgeID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 31; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }
    }

    public unsafe partial struct CSecurityFtdcTraderOfferField
    {
        public partial struct __Internal
        {
            public fixed sbyte ExchangeID[9];

            public fixed sbyte BranchPBU[21];

            public fixed sbyte ParticipantID[11];

            public fixed sbyte Password[41];

            public sbyte OfferType;

            public int InstallID;

            public fixed sbyte OrderLocalID[13];

            public sbyte TraderConnectStatus;

            public fixed sbyte ConnectRequestDate[9];

            public fixed sbyte ConnectRequestTime[9];

            public fixed sbyte LastReportDate[9];

            public fixed sbyte LastReportTime[9];

            public fixed sbyte ConnectDate[9];

            public fixed sbyte ConnectTime[9];

            public fixed sbyte StartDate[9];

            public fixed sbyte StartTime[9];

            public fixed sbyte TradingDay[9];

            public fixed sbyte BrokerID[11];

            [SuppressUnmanagedCodeSecurity]
            [DllImport("securitymduserapi", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0CSecurityFtdcTraderOfferField@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);
        }

        private CSecurityFtdcTraderOfferField.__Internal __instance;
        internal CSecurityFtdcTraderOfferField.__Internal __Instance { get { return __instance; } }

        internal static global::LTSApi.CSecurityFtdcTraderOfferField __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new CSecurityFtdcTraderOfferField(native.ToPointer(), skipVTables);
        }

        internal static global::LTSApi.CSecurityFtdcTraderOfferField __CreateInstance(global::LTSApi.CSecurityFtdcTraderOfferField.__Internal native, bool skipVTables = false)
        {
            return new CSecurityFtdcTraderOfferField(native, skipVTables);
        }

        private CSecurityFtdcTraderOfferField(global::LTSApi.CSecurityFtdcTraderOfferField.__Internal native, bool skipVTables = false)
            : this()
        {
            __instance = native;
        }

        private CSecurityFtdcTraderOfferField(void* native, bool skipVTables = false) : this()
        {
            __instance = *(global::LTSApi.CSecurityFtdcTraderOfferField.__Internal*) native;
        }

        public CSecurityFtdcTraderOfferField(global::LTSApi.CSecurityFtdcTraderOfferField _0)
            : this()
        {
            var ____arg0 = _0.__Instance;
            var __arg0 = new global::System.IntPtr(&____arg0);
            fixed (__Internal* __instancePtr = &__instance)
            {
                __Internal.cctor_1(new global::System.IntPtr(__instancePtr), __arg0);
            }
        }

        public sbyte[] ExchangeID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.ExchangeID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[9];
                        for (int i = 0; i < 9; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.ExchangeID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 9; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] BranchPBU
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.BranchPBU)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[21];
                        for (int i = 0; i < 21; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.BranchPBU)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 21; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] ParticipantID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.ParticipantID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[11];
                        for (int i = 0; i < 11; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.ParticipantID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 11; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] Password
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.Password)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[41];
                        for (int i = 0; i < 41; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.Password)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 41; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte OfferType
        {
            get
            {
                return __instance.OfferType;
            }

            set
            {
                __instance.OfferType = value;
            }
        }

        public int InstallID
        {
            get
            {
                return __instance.InstallID;
            }

            set
            {
                __instance.InstallID = value;
            }
        }

        public sbyte[] OrderLocalID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.OrderLocalID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[13];
                        for (int i = 0; i < 13; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.OrderLocalID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 13; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte TraderConnectStatus
        {
            get
            {
                return __instance.TraderConnectStatus;
            }

            set
            {
                __instance.TraderConnectStatus = value;
            }
        }

        public sbyte[] ConnectRequestDate
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.ConnectRequestDate)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[9];
                        for (int i = 0; i < 9; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.ConnectRequestDate)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 9; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] ConnectRequestTime
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.ConnectRequestTime)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[9];
                        for (int i = 0; i < 9; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.ConnectRequestTime)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 9; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] LastReportDate
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.LastReportDate)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[9];
                        for (int i = 0; i < 9; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.LastReportDate)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 9; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] LastReportTime
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.LastReportTime)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[9];
                        for (int i = 0; i < 9; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.LastReportTime)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 9; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] ConnectDate
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.ConnectDate)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[9];
                        for (int i = 0; i < 9; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.ConnectDate)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 9; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] ConnectTime
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.ConnectTime)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[9];
                        for (int i = 0; i < 9; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.ConnectTime)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 9; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] StartDate
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.StartDate)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[9];
                        for (int i = 0; i < 9; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.StartDate)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 9; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] StartTime
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.StartTime)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[9];
                        for (int i = 0; i < 9; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.StartTime)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 9; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] TradingDay
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.TradingDay)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[9];
                        for (int i = 0; i < 9; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.TradingDay)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 9; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] BrokerID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.BrokerID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[11];
                        for (int i = 0; i < 11; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.BrokerID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 11; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }
    }

    public unsafe partial struct CSecurityFtdcMDTraderOfferField
    {
        public partial struct __Internal
        {
            public fixed sbyte ExchangeID[9];

            public fixed sbyte BranchPBU[21];

            public fixed sbyte ParticipantID[11];

            public fixed sbyte Password[41];

            public sbyte OfferType;

            public int InstallID;

            public fixed sbyte OrderLocalID[13];

            public sbyte TraderConnectStatus;

            public fixed sbyte ConnectRequestDate[9];

            public fixed sbyte ConnectRequestTime[9];

            public fixed sbyte LastReportDate[9];

            public fixed sbyte LastReportTime[9];

            public fixed sbyte ConnectDate[9];

            public fixed sbyte ConnectTime[9];

            public fixed sbyte StartDate[9];

            public fixed sbyte StartTime[9];

            public fixed sbyte TradingDay[9];

            public fixed sbyte BrokerID[11];

            [SuppressUnmanagedCodeSecurity]
            [DllImport("securitymduserapi", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0CSecurityFtdcMDTraderOfferField@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);
        }

        private CSecurityFtdcMDTraderOfferField.__Internal __instance;
        internal CSecurityFtdcMDTraderOfferField.__Internal __Instance { get { return __instance; } }

        internal static global::LTSApi.CSecurityFtdcMDTraderOfferField __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new CSecurityFtdcMDTraderOfferField(native.ToPointer(), skipVTables);
        }

        internal static global::LTSApi.CSecurityFtdcMDTraderOfferField __CreateInstance(global::LTSApi.CSecurityFtdcMDTraderOfferField.__Internal native, bool skipVTables = false)
        {
            return new CSecurityFtdcMDTraderOfferField(native, skipVTables);
        }

        private CSecurityFtdcMDTraderOfferField(global::LTSApi.CSecurityFtdcMDTraderOfferField.__Internal native, bool skipVTables = false)
            : this()
        {
            __instance = native;
        }

        private CSecurityFtdcMDTraderOfferField(void* native, bool skipVTables = false) : this()
        {
            __instance = *(global::LTSApi.CSecurityFtdcMDTraderOfferField.__Internal*) native;
        }

        public CSecurityFtdcMDTraderOfferField(global::LTSApi.CSecurityFtdcMDTraderOfferField _0)
            : this()
        {
            var ____arg0 = _0.__Instance;
            var __arg0 = new global::System.IntPtr(&____arg0);
            fixed (__Internal* __instancePtr = &__instance)
            {
                __Internal.cctor_1(new global::System.IntPtr(__instancePtr), __arg0);
            }
        }

        public sbyte[] ExchangeID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.ExchangeID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[9];
                        for (int i = 0; i < 9; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.ExchangeID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 9; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] BranchPBU
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.BranchPBU)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[21];
                        for (int i = 0; i < 21; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.BranchPBU)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 21; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] ParticipantID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.ParticipantID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[11];
                        for (int i = 0; i < 11; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.ParticipantID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 11; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] Password
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.Password)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[41];
                        for (int i = 0; i < 41; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.Password)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 41; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte OfferType
        {
            get
            {
                return __instance.OfferType;
            }

            set
            {
                __instance.OfferType = value;
            }
        }

        public int InstallID
        {
            get
            {
                return __instance.InstallID;
            }

            set
            {
                __instance.InstallID = value;
            }
        }

        public sbyte[] OrderLocalID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.OrderLocalID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[13];
                        for (int i = 0; i < 13; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.OrderLocalID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 13; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte TraderConnectStatus
        {
            get
            {
                return __instance.TraderConnectStatus;
            }

            set
            {
                __instance.TraderConnectStatus = value;
            }
        }

        public sbyte[] ConnectRequestDate
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.ConnectRequestDate)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[9];
                        for (int i = 0; i < 9; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.ConnectRequestDate)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 9; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] ConnectRequestTime
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.ConnectRequestTime)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[9];
                        for (int i = 0; i < 9; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.ConnectRequestTime)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 9; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] LastReportDate
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.LastReportDate)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[9];
                        for (int i = 0; i < 9; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.LastReportDate)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 9; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] LastReportTime
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.LastReportTime)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[9];
                        for (int i = 0; i < 9; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.LastReportTime)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 9; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] ConnectDate
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.ConnectDate)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[9];
                        for (int i = 0; i < 9; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.ConnectDate)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 9; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] ConnectTime
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.ConnectTime)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[9];
                        for (int i = 0; i < 9; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.ConnectTime)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 9; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] StartDate
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.StartDate)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[9];
                        for (int i = 0; i < 9; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.StartDate)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 9; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] StartTime
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.StartTime)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[9];
                        for (int i = 0; i < 9; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.StartTime)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 9; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] TradingDay
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.TradingDay)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[9];
                        for (int i = 0; i < 9; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.TradingDay)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 9; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] BrokerID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.BrokerID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[11];
                        for (int i = 0; i < 11; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.BrokerID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 11; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }
    }

    public unsafe partial struct CSecurityFtdcFrontStatusField
    {
        public partial struct __Internal
        {
            public int FrontID;

            public fixed sbyte LastReportDate[9];

            public fixed sbyte LastReportTime[9];

            public int IsActive;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("securitymduserapi", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0CSecurityFtdcFrontStatusField@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);
        }

        private CSecurityFtdcFrontStatusField.__Internal __instance;
        internal CSecurityFtdcFrontStatusField.__Internal __Instance { get { return __instance; } }

        internal static global::LTSApi.CSecurityFtdcFrontStatusField __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new CSecurityFtdcFrontStatusField(native.ToPointer(), skipVTables);
        }

        internal static global::LTSApi.CSecurityFtdcFrontStatusField __CreateInstance(global::LTSApi.CSecurityFtdcFrontStatusField.__Internal native, bool skipVTables = false)
        {
            return new CSecurityFtdcFrontStatusField(native, skipVTables);
        }

        private CSecurityFtdcFrontStatusField(global::LTSApi.CSecurityFtdcFrontStatusField.__Internal native, bool skipVTables = false)
            : this()
        {
            __instance = native;
        }

        private CSecurityFtdcFrontStatusField(void* native, bool skipVTables = false) : this()
        {
            __instance = *(global::LTSApi.CSecurityFtdcFrontStatusField.__Internal*) native;
        }

        public CSecurityFtdcFrontStatusField(global::LTSApi.CSecurityFtdcFrontStatusField _0)
            : this()
        {
            var ____arg0 = _0.__Instance;
            var __arg0 = new global::System.IntPtr(&____arg0);
            fixed (__Internal* __instancePtr = &__instance)
            {
                __Internal.cctor_1(new global::System.IntPtr(__instancePtr), __arg0);
            }
        }

        public int FrontID
        {
            get
            {
                return __instance.FrontID;
            }

            set
            {
                __instance.FrontID = value;
            }
        }

        public sbyte[] LastReportDate
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.LastReportDate)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[9];
                        for (int i = 0; i < 9; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.LastReportDate)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 9; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] LastReportTime
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.LastReportTime)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[9];
                        for (int i = 0; i < 9; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.LastReportTime)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 9; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public int IsActive
        {
            get
            {
                return __instance.IsActive;
            }

            set
            {
                __instance.IsActive = value;
            }
        }
    }

    public unsafe partial struct CSecurityFtdcUserSessionField
    {
        public partial struct __Internal
        {
            public int FrontID;

            public int SessionID;

            public fixed sbyte BrokerID[11];

            public fixed sbyte UserID[16];

            public fixed sbyte LoginDate[9];

            public fixed sbyte LoginTime[9];

            public fixed sbyte IPAddress[16];

            public fixed sbyte UserProductInfo[11];

            public fixed sbyte InterfaceProductInfo[11];

            public fixed sbyte ProtocolInfo[11];

            public fixed sbyte MacAddress[21];

            [SuppressUnmanagedCodeSecurity]
            [DllImport("securitymduserapi", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0CSecurityFtdcUserSessionField@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);
        }

        private CSecurityFtdcUserSessionField.__Internal __instance;
        internal CSecurityFtdcUserSessionField.__Internal __Instance { get { return __instance; } }

        internal static global::LTSApi.CSecurityFtdcUserSessionField __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new CSecurityFtdcUserSessionField(native.ToPointer(), skipVTables);
        }

        internal static global::LTSApi.CSecurityFtdcUserSessionField __CreateInstance(global::LTSApi.CSecurityFtdcUserSessionField.__Internal native, bool skipVTables = false)
        {
            return new CSecurityFtdcUserSessionField(native, skipVTables);
        }

        private CSecurityFtdcUserSessionField(global::LTSApi.CSecurityFtdcUserSessionField.__Internal native, bool skipVTables = false)
            : this()
        {
            __instance = native;
        }

        private CSecurityFtdcUserSessionField(void* native, bool skipVTables = false) : this()
        {
            __instance = *(global::LTSApi.CSecurityFtdcUserSessionField.__Internal*) native;
        }

        public CSecurityFtdcUserSessionField(global::LTSApi.CSecurityFtdcUserSessionField _0)
            : this()
        {
            var ____arg0 = _0.__Instance;
            var __arg0 = new global::System.IntPtr(&____arg0);
            fixed (__Internal* __instancePtr = &__instance)
            {
                __Internal.cctor_1(new global::System.IntPtr(__instancePtr), __arg0);
            }
        }

        public int FrontID
        {
            get
            {
                return __instance.FrontID;
            }

            set
            {
                __instance.FrontID = value;
            }
        }

        public int SessionID
        {
            get
            {
                return __instance.SessionID;
            }

            set
            {
                __instance.SessionID = value;
            }
        }

        public sbyte[] BrokerID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.BrokerID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[11];
                        for (int i = 0; i < 11; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.BrokerID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 11; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] UserID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.UserID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[16];
                        for (int i = 0; i < 16; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.UserID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 16; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] LoginDate
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.LoginDate)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[9];
                        for (int i = 0; i < 9; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.LoginDate)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 9; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] LoginTime
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.LoginTime)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[9];
                        for (int i = 0; i < 9; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.LoginTime)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 9; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] IPAddress
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.IPAddress)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[16];
                        for (int i = 0; i < 16; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.IPAddress)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 16; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] UserProductInfo
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.UserProductInfo)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[11];
                        for (int i = 0; i < 11; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.UserProductInfo)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 11; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] InterfaceProductInfo
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.InterfaceProductInfo)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[11];
                        for (int i = 0; i < 11; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.InterfaceProductInfo)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 11; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] ProtocolInfo
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.ProtocolInfo)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[11];
                        for (int i = 0; i < 11; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.ProtocolInfo)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 11; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] MacAddress
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.MacAddress)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[21];
                        for (int i = 0; i < 21; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.MacAddress)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 21; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }
    }

    public unsafe partial struct CSecurityFtdcOrderField
    {
        public partial struct __Internal
        {
            public fixed sbyte BrokerID[11];

            public fixed sbyte InvestorID[15];

            public fixed sbyte InstrumentID[31];

            public fixed sbyte OrderRef[13];

            public fixed sbyte UserID[16];

            public fixed sbyte ExchangeID[9];

            public sbyte OrderPriceType;

            public sbyte Direction;

            public fixed sbyte CombOffsetFlag[5];

            public fixed sbyte CombHedgeFlag[5];

            public fixed sbyte LimitPrice[16];

            public int VolumeTotalOriginal;

            public sbyte TimeCondition;

            public fixed sbyte GTDDate[9];

            public sbyte VolumeCondition;

            public int MinVolume;

            public sbyte ContingentCondition;

            public double StopPrice;

            public sbyte ForceCloseReason;

            public int IsAutoSuspend;

            public fixed sbyte BusinessUnit[21];

            public int RequestID;

            public fixed sbyte OrderLocalID[13];

            public fixed sbyte ParticipantID[11];

            public fixed sbyte ClientID[21];

            public fixed sbyte ExchangeInstID[31];

            public fixed sbyte BranchPBU[21];

            public int InstallID;

            public sbyte OrderSubmitStatus;

            public fixed sbyte AccountID[15];

            public int NotifySequence;

            public fixed sbyte TradingDay[9];

            public fixed sbyte OrderSysID[21];

            public sbyte OrderSource;

            public sbyte OrderStatus;

            public sbyte OrderType;

            public int VolumeTraded;

            public int VolumeTotal;

            public fixed sbyte InsertDate[9];

            public fixed sbyte InsertTime[9];

            public fixed sbyte ActiveTime[9];

            public fixed sbyte SuspendTime[9];

            public fixed sbyte UpdateTime[9];

            public fixed sbyte CancelTime[9];

            public fixed sbyte ActiveTraderID[21];

            public fixed sbyte ClearingPartID[11];

            public int SequenceNo;

            public int FrontID;

            public int SessionID;

            public fixed sbyte UserProductInfo[11];

            public fixed sbyte StatusMsg[81];

            public int UserForceClose;

            public fixed sbyte ActiveUserID[16];

            public int BrokerOrderSeq;

            public fixed sbyte RelativeOrderSysID[21];

            public fixed sbyte BranchID[9];

            public double TradeAmount;

            public int IsETF;

            public sbyte InstrumentType;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("securitymduserapi", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0CSecurityFtdcOrderField@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);
        }

        private CSecurityFtdcOrderField.__Internal __instance;
        internal CSecurityFtdcOrderField.__Internal __Instance { get { return __instance; } }

        internal static global::LTSApi.CSecurityFtdcOrderField __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new CSecurityFtdcOrderField(native.ToPointer(), skipVTables);
        }

        internal static global::LTSApi.CSecurityFtdcOrderField __CreateInstance(global::LTSApi.CSecurityFtdcOrderField.__Internal native, bool skipVTables = false)
        {
            return new CSecurityFtdcOrderField(native, skipVTables);
        }

        private CSecurityFtdcOrderField(global::LTSApi.CSecurityFtdcOrderField.__Internal native, bool skipVTables = false)
            : this()
        {
            __instance = native;
        }

        private CSecurityFtdcOrderField(void* native, bool skipVTables = false) : this()
        {
            __instance = *(global::LTSApi.CSecurityFtdcOrderField.__Internal*) native;
        }

        public CSecurityFtdcOrderField(global::LTSApi.CSecurityFtdcOrderField _0)
            : this()
        {
            var ____arg0 = _0.__Instance;
            var __arg0 = new global::System.IntPtr(&____arg0);
            fixed (__Internal* __instancePtr = &__instance)
            {
                __Internal.cctor_1(new global::System.IntPtr(__instancePtr), __arg0);
            }
        }

        public sbyte[] BrokerID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.BrokerID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[11];
                        for (int i = 0; i < 11; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.BrokerID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 11; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] InvestorID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.InvestorID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[15];
                        for (int i = 0; i < 15; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.InvestorID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 15; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] InstrumentID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.InstrumentID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[31];
                        for (int i = 0; i < 31; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.InstrumentID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 31; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] OrderRef
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.OrderRef)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[13];
                        for (int i = 0; i < 13; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.OrderRef)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 13; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] UserID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.UserID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[16];
                        for (int i = 0; i < 16; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.UserID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 16; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] ExchangeID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.ExchangeID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[9];
                        for (int i = 0; i < 9; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.ExchangeID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 9; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte OrderPriceType
        {
            get
            {
                return __instance.OrderPriceType;
            }

            set
            {
                __instance.OrderPriceType = value;
            }
        }

        public sbyte Direction
        {
            get
            {
                return __instance.Direction;
            }

            set
            {
                __instance.Direction = value;
            }
        }

        public sbyte[] CombOffsetFlag
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.CombOffsetFlag)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[5];
                        for (int i = 0; i < 5; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.CombOffsetFlag)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 5; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] CombHedgeFlag
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.CombHedgeFlag)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[5];
                        for (int i = 0; i < 5; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.CombHedgeFlag)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 5; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] LimitPrice
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.LimitPrice)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[16];
                        for (int i = 0; i < 16; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.LimitPrice)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 16; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public int VolumeTotalOriginal
        {
            get
            {
                return __instance.VolumeTotalOriginal;
            }

            set
            {
                __instance.VolumeTotalOriginal = value;
            }
        }

        public sbyte TimeCondition
        {
            get
            {
                return __instance.TimeCondition;
            }

            set
            {
                __instance.TimeCondition = value;
            }
        }

        public sbyte[] GTDDate
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.GTDDate)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[9];
                        for (int i = 0; i < 9; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.GTDDate)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 9; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte VolumeCondition
        {
            get
            {
                return __instance.VolumeCondition;
            }

            set
            {
                __instance.VolumeCondition = value;
            }
        }

        public int MinVolume
        {
            get
            {
                return __instance.MinVolume;
            }

            set
            {
                __instance.MinVolume = value;
            }
        }

        public sbyte ContingentCondition
        {
            get
            {
                return __instance.ContingentCondition;
            }

            set
            {
                __instance.ContingentCondition = value;
            }
        }

        public double StopPrice
        {
            get
            {
                return __instance.StopPrice;
            }

            set
            {
                __instance.StopPrice = value;
            }
        }

        public sbyte ForceCloseReason
        {
            get
            {
                return __instance.ForceCloseReason;
            }

            set
            {
                __instance.ForceCloseReason = value;
            }
        }

        public int IsAutoSuspend
        {
            get
            {
                return __instance.IsAutoSuspend;
            }

            set
            {
                __instance.IsAutoSuspend = value;
            }
        }

        public sbyte[] BusinessUnit
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.BusinessUnit)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[21];
                        for (int i = 0; i < 21; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.BusinessUnit)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 21; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public int RequestID
        {
            get
            {
                return __instance.RequestID;
            }

            set
            {
                __instance.RequestID = value;
            }
        }

        public sbyte[] OrderLocalID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.OrderLocalID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[13];
                        for (int i = 0; i < 13; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.OrderLocalID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 13; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] ParticipantID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.ParticipantID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[11];
                        for (int i = 0; i < 11; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.ParticipantID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 11; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] ClientID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.ClientID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[21];
                        for (int i = 0; i < 21; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.ClientID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 21; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] ExchangeInstID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.ExchangeInstID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[31];
                        for (int i = 0; i < 31; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.ExchangeInstID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 31; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] BranchPBU
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.BranchPBU)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[21];
                        for (int i = 0; i < 21; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.BranchPBU)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 21; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public int InstallID
        {
            get
            {
                return __instance.InstallID;
            }

            set
            {
                __instance.InstallID = value;
            }
        }

        public sbyte OrderSubmitStatus
        {
            get
            {
                return __instance.OrderSubmitStatus;
            }

            set
            {
                __instance.OrderSubmitStatus = value;
            }
        }

        public sbyte[] AccountID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.AccountID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[15];
                        for (int i = 0; i < 15; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.AccountID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 15; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public int NotifySequence
        {
            get
            {
                return __instance.NotifySequence;
            }

            set
            {
                __instance.NotifySequence = value;
            }
        }

        public sbyte[] TradingDay
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.TradingDay)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[9];
                        for (int i = 0; i < 9; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.TradingDay)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 9; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] OrderSysID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.OrderSysID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[21];
                        for (int i = 0; i < 21; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.OrderSysID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 21; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte OrderSource
        {
            get
            {
                return __instance.OrderSource;
            }

            set
            {
                __instance.OrderSource = value;
            }
        }

        public sbyte OrderStatus
        {
            get
            {
                return __instance.OrderStatus;
            }

            set
            {
                __instance.OrderStatus = value;
            }
        }

        public sbyte OrderType
        {
            get
            {
                return __instance.OrderType;
            }

            set
            {
                __instance.OrderType = value;
            }
        }

        public int VolumeTraded
        {
            get
            {
                return __instance.VolumeTraded;
            }

            set
            {
                __instance.VolumeTraded = value;
            }
        }

        public int VolumeTotal
        {
            get
            {
                return __instance.VolumeTotal;
            }

            set
            {
                __instance.VolumeTotal = value;
            }
        }

        public sbyte[] InsertDate
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.InsertDate)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[9];
                        for (int i = 0; i < 9; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.InsertDate)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 9; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] InsertTime
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.InsertTime)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[9];
                        for (int i = 0; i < 9; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.InsertTime)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 9; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] ActiveTime
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.ActiveTime)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[9];
                        for (int i = 0; i < 9; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.ActiveTime)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 9; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] SuspendTime
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.SuspendTime)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[9];
                        for (int i = 0; i < 9; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.SuspendTime)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 9; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] UpdateTime
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.UpdateTime)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[9];
                        for (int i = 0; i < 9; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.UpdateTime)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 9; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] CancelTime
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.CancelTime)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[9];
                        for (int i = 0; i < 9; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.CancelTime)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 9; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] ActiveTraderID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.ActiveTraderID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[21];
                        for (int i = 0; i < 21; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.ActiveTraderID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 21; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] ClearingPartID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.ClearingPartID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[11];
                        for (int i = 0; i < 11; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.ClearingPartID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 11; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public int SequenceNo
        {
            get
            {
                return __instance.SequenceNo;
            }

            set
            {
                __instance.SequenceNo = value;
            }
        }

        public int FrontID
        {
            get
            {
                return __instance.FrontID;
            }

            set
            {
                __instance.FrontID = value;
            }
        }

        public int SessionID
        {
            get
            {
                return __instance.SessionID;
            }

            set
            {
                __instance.SessionID = value;
            }
        }

        public sbyte[] UserProductInfo
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.UserProductInfo)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[11];
                        for (int i = 0; i < 11; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.UserProductInfo)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 11; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] StatusMsg
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.StatusMsg)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[81];
                        for (int i = 0; i < 81; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.StatusMsg)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 81; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public int UserForceClose
        {
            get
            {
                return __instance.UserForceClose;
            }

            set
            {
                __instance.UserForceClose = value;
            }
        }

        public sbyte[] ActiveUserID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.ActiveUserID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[16];
                        for (int i = 0; i < 16; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.ActiveUserID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 16; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public int BrokerOrderSeq
        {
            get
            {
                return __instance.BrokerOrderSeq;
            }

            set
            {
                __instance.BrokerOrderSeq = value;
            }
        }

        public sbyte[] RelativeOrderSysID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.RelativeOrderSysID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[21];
                        for (int i = 0; i < 21; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.RelativeOrderSysID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 21; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] BranchID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.BranchID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[9];
                        for (int i = 0; i < 9; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.BranchID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 9; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public double TradeAmount
        {
            get
            {
                return __instance.TradeAmount;
            }

            set
            {
                __instance.TradeAmount = value;
            }
        }

        public int IsETF
        {
            get
            {
                return __instance.IsETF;
            }

            set
            {
                __instance.IsETF = value;
            }
        }

        public sbyte InstrumentType
        {
            get
            {
                return __instance.InstrumentType;
            }

            set
            {
                __instance.InstrumentType = value;
            }
        }
    }

    public unsafe partial struct CSecurityFtdcOrderActionField
    {
        public partial struct __Internal
        {
            public fixed sbyte BrokerID[11];

            public fixed sbyte InvestorID[15];

            public int OrderActionRef;

            public fixed sbyte OrderRef[13];

            public int RequestID;

            public int FrontID;

            public int SessionID;

            public fixed sbyte ExchangeID[9];

            public sbyte ActionFlag;

            public double LimitPrice;

            public int VolumeChange;

            public fixed sbyte ActionDate[9];

            public fixed sbyte ActionTime[9];

            public fixed sbyte BranchPBU[21];

            public int InstallID;

            public fixed sbyte OrderLocalID[13];

            public fixed sbyte ActionLocalID[13];

            public fixed sbyte ParticipantID[11];

            public fixed sbyte ClientID[21];

            public fixed sbyte BusinessUnit[21];

            public sbyte OrderActionStatus;

            public fixed sbyte UserID[16];

            public fixed sbyte BranchID[9];

            public fixed sbyte StatusMsg[81];

            public fixed sbyte InstrumentID[31];

            public sbyte InstrumentType;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("securitymduserapi", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0CSecurityFtdcOrderActionField@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);
        }

        private CSecurityFtdcOrderActionField.__Internal __instance;
        internal CSecurityFtdcOrderActionField.__Internal __Instance { get { return __instance; } }

        internal static global::LTSApi.CSecurityFtdcOrderActionField __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new CSecurityFtdcOrderActionField(native.ToPointer(), skipVTables);
        }

        internal static global::LTSApi.CSecurityFtdcOrderActionField __CreateInstance(global::LTSApi.CSecurityFtdcOrderActionField.__Internal native, bool skipVTables = false)
        {
            return new CSecurityFtdcOrderActionField(native, skipVTables);
        }

        private CSecurityFtdcOrderActionField(global::LTSApi.CSecurityFtdcOrderActionField.__Internal native, bool skipVTables = false)
            : this()
        {
            __instance = native;
        }

        private CSecurityFtdcOrderActionField(void* native, bool skipVTables = false) : this()
        {
            __instance = *(global::LTSApi.CSecurityFtdcOrderActionField.__Internal*) native;
        }

        public CSecurityFtdcOrderActionField(global::LTSApi.CSecurityFtdcOrderActionField _0)
            : this()
        {
            var ____arg0 = _0.__Instance;
            var __arg0 = new global::System.IntPtr(&____arg0);
            fixed (__Internal* __instancePtr = &__instance)
            {
                __Internal.cctor_1(new global::System.IntPtr(__instancePtr), __arg0);
            }
        }

        public sbyte[] BrokerID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.BrokerID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[11];
                        for (int i = 0; i < 11; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.BrokerID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 11; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] InvestorID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.InvestorID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[15];
                        for (int i = 0; i < 15; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.InvestorID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 15; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public int OrderActionRef
        {
            get
            {
                return __instance.OrderActionRef;
            }

            set
            {
                __instance.OrderActionRef = value;
            }
        }

        public sbyte[] OrderRef
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.OrderRef)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[13];
                        for (int i = 0; i < 13; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.OrderRef)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 13; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public int RequestID
        {
            get
            {
                return __instance.RequestID;
            }

            set
            {
                __instance.RequestID = value;
            }
        }

        public int FrontID
        {
            get
            {
                return __instance.FrontID;
            }

            set
            {
                __instance.FrontID = value;
            }
        }

        public int SessionID
        {
            get
            {
                return __instance.SessionID;
            }

            set
            {
                __instance.SessionID = value;
            }
        }

        public sbyte[] ExchangeID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.ExchangeID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[9];
                        for (int i = 0; i < 9; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.ExchangeID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 9; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte ActionFlag
        {
            get
            {
                return __instance.ActionFlag;
            }

            set
            {
                __instance.ActionFlag = value;
            }
        }

        public double LimitPrice
        {
            get
            {
                return __instance.LimitPrice;
            }

            set
            {
                __instance.LimitPrice = value;
            }
        }

        public int VolumeChange
        {
            get
            {
                return __instance.VolumeChange;
            }

            set
            {
                __instance.VolumeChange = value;
            }
        }

        public sbyte[] ActionDate
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.ActionDate)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[9];
                        for (int i = 0; i < 9; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.ActionDate)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 9; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] ActionTime
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.ActionTime)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[9];
                        for (int i = 0; i < 9; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.ActionTime)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 9; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] BranchPBU
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.BranchPBU)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[21];
                        for (int i = 0; i < 21; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.BranchPBU)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 21; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public int InstallID
        {
            get
            {
                return __instance.InstallID;
            }

            set
            {
                __instance.InstallID = value;
            }
        }

        public sbyte[] OrderLocalID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.OrderLocalID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[13];
                        for (int i = 0; i < 13; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.OrderLocalID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 13; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] ActionLocalID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.ActionLocalID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[13];
                        for (int i = 0; i < 13; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.ActionLocalID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 13; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] ParticipantID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.ParticipantID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[11];
                        for (int i = 0; i < 11; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.ParticipantID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 11; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] ClientID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.ClientID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[21];
                        for (int i = 0; i < 21; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.ClientID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 21; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] BusinessUnit
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.BusinessUnit)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[21];
                        for (int i = 0; i < 21; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.BusinessUnit)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 21; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte OrderActionStatus
        {
            get
            {
                return __instance.OrderActionStatus;
            }

            set
            {
                __instance.OrderActionStatus = value;
            }
        }

        public sbyte[] UserID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.UserID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[16];
                        for (int i = 0; i < 16; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.UserID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 16; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] BranchID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.BranchID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[9];
                        for (int i = 0; i < 9; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.BranchID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 9; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] StatusMsg
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.StatusMsg)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[81];
                        for (int i = 0; i < 81; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.StatusMsg)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 81; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] InstrumentID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.InstrumentID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[31];
                        for (int i = 0; i < 31; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.InstrumentID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 31; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte InstrumentType
        {
            get
            {
                return __instance.InstrumentType;
            }

            set
            {
                __instance.InstrumentType = value;
            }
        }
    }

    public unsafe partial struct CSecurityFtdcErrOrderField
    {
        public partial struct __Internal
        {
            public fixed sbyte BrokerID[11];

            public fixed sbyte InvestorID[15];

            public fixed sbyte InstrumentID[31];

            public fixed sbyte OrderRef[13];

            public fixed sbyte UserID[16];

            public fixed sbyte ExchangeID[9];

            public sbyte OrderPriceType;

            public sbyte Direction;

            public fixed sbyte CombOffsetFlag[5];

            public fixed sbyte CombHedgeFlag[5];

            public fixed sbyte LimitPrice[16];

            public int VolumeTotalOriginal;

            public sbyte TimeCondition;

            public fixed sbyte GTDDate[9];

            public sbyte VolumeCondition;

            public int MinVolume;

            public sbyte ContingentCondition;

            public double StopPrice;

            public sbyte ForceCloseReason;

            public int IsAutoSuspend;

            public fixed sbyte BusinessUnit[21];

            public int RequestID;

            public int UserForceClose;

            public int ErrorID;

            public fixed sbyte ErrorMsg[81];

            [SuppressUnmanagedCodeSecurity]
            [DllImport("securitymduserapi", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0CSecurityFtdcErrOrderField@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);
        }

        private CSecurityFtdcErrOrderField.__Internal __instance;
        internal CSecurityFtdcErrOrderField.__Internal __Instance { get { return __instance; } }

        internal static global::LTSApi.CSecurityFtdcErrOrderField __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new CSecurityFtdcErrOrderField(native.ToPointer(), skipVTables);
        }

        internal static global::LTSApi.CSecurityFtdcErrOrderField __CreateInstance(global::LTSApi.CSecurityFtdcErrOrderField.__Internal native, bool skipVTables = false)
        {
            return new CSecurityFtdcErrOrderField(native, skipVTables);
        }

        private CSecurityFtdcErrOrderField(global::LTSApi.CSecurityFtdcErrOrderField.__Internal native, bool skipVTables = false)
            : this()
        {
            __instance = native;
        }

        private CSecurityFtdcErrOrderField(void* native, bool skipVTables = false) : this()
        {
            __instance = *(global::LTSApi.CSecurityFtdcErrOrderField.__Internal*) native;
        }

        public CSecurityFtdcErrOrderField(global::LTSApi.CSecurityFtdcErrOrderField _0)
            : this()
        {
            var ____arg0 = _0.__Instance;
            var __arg0 = new global::System.IntPtr(&____arg0);
            fixed (__Internal* __instancePtr = &__instance)
            {
                __Internal.cctor_1(new global::System.IntPtr(__instancePtr), __arg0);
            }
        }

        public sbyte[] BrokerID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.BrokerID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[11];
                        for (int i = 0; i < 11; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.BrokerID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 11; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] InvestorID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.InvestorID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[15];
                        for (int i = 0; i < 15; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.InvestorID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 15; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] InstrumentID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.InstrumentID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[31];
                        for (int i = 0; i < 31; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.InstrumentID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 31; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] OrderRef
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.OrderRef)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[13];
                        for (int i = 0; i < 13; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.OrderRef)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 13; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] UserID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.UserID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[16];
                        for (int i = 0; i < 16; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.UserID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 16; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] ExchangeID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.ExchangeID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[9];
                        for (int i = 0; i < 9; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.ExchangeID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 9; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte OrderPriceType
        {
            get
            {
                return __instance.OrderPriceType;
            }

            set
            {
                __instance.OrderPriceType = value;
            }
        }

        public sbyte Direction
        {
            get
            {
                return __instance.Direction;
            }

            set
            {
                __instance.Direction = value;
            }
        }

        public sbyte[] CombOffsetFlag
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.CombOffsetFlag)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[5];
                        for (int i = 0; i < 5; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.CombOffsetFlag)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 5; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] CombHedgeFlag
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.CombHedgeFlag)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[5];
                        for (int i = 0; i < 5; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.CombHedgeFlag)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 5; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] LimitPrice
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.LimitPrice)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[16];
                        for (int i = 0; i < 16; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.LimitPrice)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 16; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public int VolumeTotalOriginal
        {
            get
            {
                return __instance.VolumeTotalOriginal;
            }

            set
            {
                __instance.VolumeTotalOriginal = value;
            }
        }

        public sbyte TimeCondition
        {
            get
            {
                return __instance.TimeCondition;
            }

            set
            {
                __instance.TimeCondition = value;
            }
        }

        public sbyte[] GTDDate
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.GTDDate)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[9];
                        for (int i = 0; i < 9; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.GTDDate)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 9; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte VolumeCondition
        {
            get
            {
                return __instance.VolumeCondition;
            }

            set
            {
                __instance.VolumeCondition = value;
            }
        }

        public int MinVolume
        {
            get
            {
                return __instance.MinVolume;
            }

            set
            {
                __instance.MinVolume = value;
            }
        }

        public sbyte ContingentCondition
        {
            get
            {
                return __instance.ContingentCondition;
            }

            set
            {
                __instance.ContingentCondition = value;
            }
        }

        public double StopPrice
        {
            get
            {
                return __instance.StopPrice;
            }

            set
            {
                __instance.StopPrice = value;
            }
        }

        public sbyte ForceCloseReason
        {
            get
            {
                return __instance.ForceCloseReason;
            }

            set
            {
                __instance.ForceCloseReason = value;
            }
        }

        public int IsAutoSuspend
        {
            get
            {
                return __instance.IsAutoSuspend;
            }

            set
            {
                __instance.IsAutoSuspend = value;
            }
        }

        public sbyte[] BusinessUnit
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.BusinessUnit)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[21];
                        for (int i = 0; i < 21; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.BusinessUnit)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 21; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public int RequestID
        {
            get
            {
                return __instance.RequestID;
            }

            set
            {
                __instance.RequestID = value;
            }
        }

        public int UserForceClose
        {
            get
            {
                return __instance.UserForceClose;
            }

            set
            {
                __instance.UserForceClose = value;
            }
        }

        public int ErrorID
        {
            get
            {
                return __instance.ErrorID;
            }

            set
            {
                __instance.ErrorID = value;
            }
        }

        public sbyte[] ErrorMsg
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.ErrorMsg)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[81];
                        for (int i = 0; i < 81; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.ErrorMsg)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 81; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }
    }

    public unsafe partial struct CSecurityFtdcErrOrderActionField
    {
        public partial struct __Internal
        {
            public fixed sbyte BrokerID[11];

            public fixed sbyte InvestorID[15];

            public int OrderActionRef;

            public fixed sbyte OrderRef[13];

            public int RequestID;

            public int FrontID;

            public int SessionID;

            public fixed sbyte ExchangeID[9];

            public sbyte ActionFlag;

            public double LimitPrice;

            public int VolumeChange;

            public fixed sbyte ActionDate[9];

            public fixed sbyte ActionTime[9];

            public fixed sbyte BranchPBU[21];

            public int InstallID;

            public fixed sbyte OrderLocalID[13];

            public fixed sbyte ActionLocalID[13];

            public fixed sbyte ParticipantID[11];

            public fixed sbyte ClientID[21];

            public fixed sbyte BusinessUnit[21];

            public sbyte OrderActionStatus;

            public fixed sbyte UserID[16];

            public fixed sbyte BranchID[9];

            public fixed sbyte StatusMsg[81];

            public fixed sbyte InstrumentID[31];

            public int ErrorID;

            public fixed sbyte ErrorMsg[81];

            public sbyte InstrumentType;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("securitymduserapi", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0CSecurityFtdcErrOrderActionField@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);
        }

        private CSecurityFtdcErrOrderActionField.__Internal __instance;
        internal CSecurityFtdcErrOrderActionField.__Internal __Instance { get { return __instance; } }

        internal static global::LTSApi.CSecurityFtdcErrOrderActionField __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new CSecurityFtdcErrOrderActionField(native.ToPointer(), skipVTables);
        }

        internal static global::LTSApi.CSecurityFtdcErrOrderActionField __CreateInstance(global::LTSApi.CSecurityFtdcErrOrderActionField.__Internal native, bool skipVTables = false)
        {
            return new CSecurityFtdcErrOrderActionField(native, skipVTables);
        }

        private CSecurityFtdcErrOrderActionField(global::LTSApi.CSecurityFtdcErrOrderActionField.__Internal native, bool skipVTables = false)
            : this()
        {
            __instance = native;
        }

        private CSecurityFtdcErrOrderActionField(void* native, bool skipVTables = false) : this()
        {
            __instance = *(global::LTSApi.CSecurityFtdcErrOrderActionField.__Internal*) native;
        }

        public CSecurityFtdcErrOrderActionField(global::LTSApi.CSecurityFtdcErrOrderActionField _0)
            : this()
        {
            var ____arg0 = _0.__Instance;
            var __arg0 = new global::System.IntPtr(&____arg0);
            fixed (__Internal* __instancePtr = &__instance)
            {
                __Internal.cctor_1(new global::System.IntPtr(__instancePtr), __arg0);
            }
        }

        public sbyte[] BrokerID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.BrokerID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[11];
                        for (int i = 0; i < 11; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.BrokerID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 11; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] InvestorID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.InvestorID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[15];
                        for (int i = 0; i < 15; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.InvestorID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 15; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public int OrderActionRef
        {
            get
            {
                return __instance.OrderActionRef;
            }

            set
            {
                __instance.OrderActionRef = value;
            }
        }

        public sbyte[] OrderRef
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.OrderRef)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[13];
                        for (int i = 0; i < 13; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.OrderRef)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 13; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public int RequestID
        {
            get
            {
                return __instance.RequestID;
            }

            set
            {
                __instance.RequestID = value;
            }
        }

        public int FrontID
        {
            get
            {
                return __instance.FrontID;
            }

            set
            {
                __instance.FrontID = value;
            }
        }

        public int SessionID
        {
            get
            {
                return __instance.SessionID;
            }

            set
            {
                __instance.SessionID = value;
            }
        }

        public sbyte[] ExchangeID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.ExchangeID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[9];
                        for (int i = 0; i < 9; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.ExchangeID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 9; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte ActionFlag
        {
            get
            {
                return __instance.ActionFlag;
            }

            set
            {
                __instance.ActionFlag = value;
            }
        }

        public double LimitPrice
        {
            get
            {
                return __instance.LimitPrice;
            }

            set
            {
                __instance.LimitPrice = value;
            }
        }

        public int VolumeChange
        {
            get
            {
                return __instance.VolumeChange;
            }

            set
            {
                __instance.VolumeChange = value;
            }
        }

        public sbyte[] ActionDate
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.ActionDate)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[9];
                        for (int i = 0; i < 9; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.ActionDate)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 9; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] ActionTime
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.ActionTime)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[9];
                        for (int i = 0; i < 9; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.ActionTime)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 9; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] BranchPBU
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.BranchPBU)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[21];
                        for (int i = 0; i < 21; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.BranchPBU)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 21; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public int InstallID
        {
            get
            {
                return __instance.InstallID;
            }

            set
            {
                __instance.InstallID = value;
            }
        }

        public sbyte[] OrderLocalID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.OrderLocalID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[13];
                        for (int i = 0; i < 13; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.OrderLocalID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 13; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] ActionLocalID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.ActionLocalID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[13];
                        for (int i = 0; i < 13; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.ActionLocalID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 13; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] ParticipantID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.ParticipantID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[11];
                        for (int i = 0; i < 11; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.ParticipantID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 11; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] ClientID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.ClientID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[21];
                        for (int i = 0; i < 21; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.ClientID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 21; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] BusinessUnit
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.BusinessUnit)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[21];
                        for (int i = 0; i < 21; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.BusinessUnit)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 21; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte OrderActionStatus
        {
            get
            {
                return __instance.OrderActionStatus;
            }

            set
            {
                __instance.OrderActionStatus = value;
            }
        }

        public sbyte[] UserID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.UserID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[16];
                        for (int i = 0; i < 16; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.UserID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 16; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] BranchID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.BranchID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[9];
                        for (int i = 0; i < 9; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.BranchID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 9; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] StatusMsg
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.StatusMsg)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[81];
                        for (int i = 0; i < 81; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.StatusMsg)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 81; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] InstrumentID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.InstrumentID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[31];
                        for (int i = 0; i < 31; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.InstrumentID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 31; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public int ErrorID
        {
            get
            {
                return __instance.ErrorID;
            }

            set
            {
                __instance.ErrorID = value;
            }
        }

        public sbyte[] ErrorMsg
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.ErrorMsg)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[81];
                        for (int i = 0; i < 81; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.ErrorMsg)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 81; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte InstrumentType
        {
            get
            {
                return __instance.InstrumentType;
            }

            set
            {
                __instance.InstrumentType = value;
            }
        }
    }

    public unsafe partial struct CSecurityFtdcTradeField
    {
        public partial struct __Internal
        {
            public fixed sbyte BrokerID[11];

            public fixed sbyte InvestorID[15];

            public fixed sbyte InstrumentID[31];

            public fixed sbyte OrderRef[13];

            public fixed sbyte UserID[16];

            public fixed sbyte ExchangeID[9];

            public fixed sbyte TradeID[21];

            public sbyte Direction;

            public fixed sbyte OrderSysID[21];

            public fixed sbyte ParticipantID[11];

            public fixed sbyte ClientID[21];

            public sbyte TradingRole;

            public fixed sbyte ExchangeInstID[31];

            public sbyte OffsetFlag;

            public sbyte HedgeFlag;

            public fixed sbyte Price[16];

            public int Volume;

            public fixed sbyte TradeDate[9];

            public fixed sbyte TradeTime[9];

            public sbyte TradeType;

            public sbyte PriceSource;

            public fixed sbyte BranchPBU[21];

            public fixed sbyte OrderLocalID[13];

            public fixed sbyte ClearingPartID[11];

            public fixed sbyte BusinessUnit[21];

            public int SequenceNo;

            public sbyte TradeSource;

            public fixed sbyte TradingDay[9];

            public int BrokerOrderSeq;

            public double TradeAmount;

            public int TradeIndex;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("securitymduserapi", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0CSecurityFtdcTradeField@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);
        }

        private CSecurityFtdcTradeField.__Internal __instance;
        internal CSecurityFtdcTradeField.__Internal __Instance { get { return __instance; } }

        internal static global::LTSApi.CSecurityFtdcTradeField __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new CSecurityFtdcTradeField(native.ToPointer(), skipVTables);
        }

        internal static global::LTSApi.CSecurityFtdcTradeField __CreateInstance(global::LTSApi.CSecurityFtdcTradeField.__Internal native, bool skipVTables = false)
        {
            return new CSecurityFtdcTradeField(native, skipVTables);
        }

        private CSecurityFtdcTradeField(global::LTSApi.CSecurityFtdcTradeField.__Internal native, bool skipVTables = false)
            : this()
        {
            __instance = native;
        }

        private CSecurityFtdcTradeField(void* native, bool skipVTables = false) : this()
        {
            __instance = *(global::LTSApi.CSecurityFtdcTradeField.__Internal*) native;
        }

        public CSecurityFtdcTradeField(global::LTSApi.CSecurityFtdcTradeField _0)
            : this()
        {
            var ____arg0 = _0.__Instance;
            var __arg0 = new global::System.IntPtr(&____arg0);
            fixed (__Internal* __instancePtr = &__instance)
            {
                __Internal.cctor_1(new global::System.IntPtr(__instancePtr), __arg0);
            }
        }

        public sbyte[] BrokerID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.BrokerID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[11];
                        for (int i = 0; i < 11; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.BrokerID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 11; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] InvestorID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.InvestorID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[15];
                        for (int i = 0; i < 15; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.InvestorID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 15; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] InstrumentID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.InstrumentID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[31];
                        for (int i = 0; i < 31; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.InstrumentID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 31; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] OrderRef
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.OrderRef)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[13];
                        for (int i = 0; i < 13; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.OrderRef)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 13; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] UserID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.UserID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[16];
                        for (int i = 0; i < 16; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.UserID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 16; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] ExchangeID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.ExchangeID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[9];
                        for (int i = 0; i < 9; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.ExchangeID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 9; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] TradeID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.TradeID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[21];
                        for (int i = 0; i < 21; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.TradeID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 21; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte Direction
        {
            get
            {
                return __instance.Direction;
            }

            set
            {
                __instance.Direction = value;
            }
        }

        public sbyte[] OrderSysID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.OrderSysID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[21];
                        for (int i = 0; i < 21; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.OrderSysID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 21; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] ParticipantID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.ParticipantID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[11];
                        for (int i = 0; i < 11; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.ParticipantID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 11; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] ClientID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.ClientID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[21];
                        for (int i = 0; i < 21; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.ClientID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 21; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte TradingRole
        {
            get
            {
                return __instance.TradingRole;
            }

            set
            {
                __instance.TradingRole = value;
            }
        }

        public sbyte[] ExchangeInstID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.ExchangeInstID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[31];
                        for (int i = 0; i < 31; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.ExchangeInstID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 31; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte OffsetFlag
        {
            get
            {
                return __instance.OffsetFlag;
            }

            set
            {
                __instance.OffsetFlag = value;
            }
        }

        public sbyte HedgeFlag
        {
            get
            {
                return __instance.HedgeFlag;
            }

            set
            {
                __instance.HedgeFlag = value;
            }
        }

        public sbyte[] Price
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.Price)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[16];
                        for (int i = 0; i < 16; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.Price)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 16; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public int Volume
        {
            get
            {
                return __instance.Volume;
            }

            set
            {
                __instance.Volume = value;
            }
        }

        public sbyte[] TradeDate
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.TradeDate)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[9];
                        for (int i = 0; i < 9; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.TradeDate)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 9; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] TradeTime
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.TradeTime)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[9];
                        for (int i = 0; i < 9; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.TradeTime)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 9; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte TradeType
        {
            get
            {
                return __instance.TradeType;
            }

            set
            {
                __instance.TradeType = value;
            }
        }

        public sbyte PriceSource
        {
            get
            {
                return __instance.PriceSource;
            }

            set
            {
                __instance.PriceSource = value;
            }
        }

        public sbyte[] BranchPBU
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.BranchPBU)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[21];
                        for (int i = 0; i < 21; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.BranchPBU)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 21; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] OrderLocalID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.OrderLocalID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[13];
                        for (int i = 0; i < 13; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.OrderLocalID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 13; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] ClearingPartID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.ClearingPartID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[11];
                        for (int i = 0; i < 11; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.ClearingPartID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 11; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] BusinessUnit
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.BusinessUnit)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[21];
                        for (int i = 0; i < 21; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.BusinessUnit)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 21; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public int SequenceNo
        {
            get
            {
                return __instance.SequenceNo;
            }

            set
            {
                __instance.SequenceNo = value;
            }
        }

        public sbyte TradeSource
        {
            get
            {
                return __instance.TradeSource;
            }

            set
            {
                __instance.TradeSource = value;
            }
        }

        public sbyte[] TradingDay
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.TradingDay)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[9];
                        for (int i = 0; i < 9; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.TradingDay)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 9; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public int BrokerOrderSeq
        {
            get
            {
                return __instance.BrokerOrderSeq;
            }

            set
            {
                __instance.BrokerOrderSeq = value;
            }
        }

        public double TradeAmount
        {
            get
            {
                return __instance.TradeAmount;
            }

            set
            {
                __instance.TradeAmount = value;
            }
        }

        public int TradeIndex
        {
            get
            {
                return __instance.TradeIndex;
            }

            set
            {
                __instance.TradeIndex = value;
            }
        }
    }

    public unsafe partial struct CSecurityFtdcInvestorPositionField
    {
        public partial struct __Internal
        {
            public fixed sbyte InstrumentID[31];

            public fixed sbyte BrokerID[11];

            public fixed sbyte InvestorID[15];

            public sbyte PosiDirection;

            public sbyte HedgeFlag;

            public sbyte PositionDate;

            public double YdPosition;

            public double Position;

            public double LongFrozen;

            public double ShortFrozen;

            public double LongFrozenAmount;

            public double ShortFrozenAmount;

            public double OpenVolume;

            public double CloseVolume;

            public double OpenAmount;

            public double CloseAmount;

            public double PositionCost;

            public double FrozenCash;

            public double CashIn;

            public double Commission;

            public double PreSettlementPrice;

            public double SettlementPrice;

            public fixed sbyte TradingDay[9];

            public double OpenCost;

            public double ExchangeMargin;

            public double TodayPosition;

            public double TransferFee;

            public double StampTax;

            public double TodayPurRedVolume;

            public double ConversionRate;

            public double ConversionAmount;

            public double StockValue;

            public fixed sbyte ExchangeID[9];

            public fixed sbyte AccountID[15];

            public double PledgeInPosition;

            public double RepurchasePosition;

            public double PurRedShortFrozen;

            public double MarginTradeVolume;

            public double MarginTradeAmount;

            public double MarginTradeFrozenVolume;

            public double MarginTradeFrozenAmount;

            public double MarginTradeConversionProfit;

            public double ShortSellVolume;

            public double ShortSellAmount;

            public double ShortSellFrozenVolume;

            public double ShortSellFrozenAmount;

            public double ShortSellConversionProfit;

            public double SSStockValue;

            public double TodayMTPosition;

            public double TodaySSPosition;

            public double YdOpenCost;

            public double LockPosition;

            public double CoverPosition;

            public double LockFrozenPosition;

            public double UnlockFrozenPosition;

            public double CoverFrozenPosition;

            public double ExecFrozenPosition;

            public double YDCoverPosition;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("securitymduserapi", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0CSecurityFtdcInvestorPositionField@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);
        }

        private CSecurityFtdcInvestorPositionField.__Internal __instance;
        internal CSecurityFtdcInvestorPositionField.__Internal __Instance { get { return __instance; } }

        internal static global::LTSApi.CSecurityFtdcInvestorPositionField __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new CSecurityFtdcInvestorPositionField(native.ToPointer(), skipVTables);
        }

        internal static global::LTSApi.CSecurityFtdcInvestorPositionField __CreateInstance(global::LTSApi.CSecurityFtdcInvestorPositionField.__Internal native, bool skipVTables = false)
        {
            return new CSecurityFtdcInvestorPositionField(native, skipVTables);
        }

        private CSecurityFtdcInvestorPositionField(global::LTSApi.CSecurityFtdcInvestorPositionField.__Internal native, bool skipVTables = false)
            : this()
        {
            __instance = native;
        }

        private CSecurityFtdcInvestorPositionField(void* native, bool skipVTables = false) : this()
        {
            __instance = *(global::LTSApi.CSecurityFtdcInvestorPositionField.__Internal*) native;
        }

        public CSecurityFtdcInvestorPositionField(global::LTSApi.CSecurityFtdcInvestorPositionField _0)
            : this()
        {
            var ____arg0 = _0.__Instance;
            var __arg0 = new global::System.IntPtr(&____arg0);
            fixed (__Internal* __instancePtr = &__instance)
            {
                __Internal.cctor_1(new global::System.IntPtr(__instancePtr), __arg0);
            }
        }

        public sbyte[] InstrumentID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.InstrumentID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[31];
                        for (int i = 0; i < 31; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.InstrumentID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 31; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] BrokerID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.BrokerID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[11];
                        for (int i = 0; i < 11; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.BrokerID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 11; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] InvestorID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.InvestorID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[15];
                        for (int i = 0; i < 15; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.InvestorID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 15; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte PosiDirection
        {
            get
            {
                return __instance.PosiDirection;
            }

            set
            {
                __instance.PosiDirection = value;
            }
        }

        public sbyte HedgeFlag
        {
            get
            {
                return __instance.HedgeFlag;
            }

            set
            {
                __instance.HedgeFlag = value;
            }
        }

        public sbyte PositionDate
        {
            get
            {
                return __instance.PositionDate;
            }

            set
            {
                __instance.PositionDate = value;
            }
        }

        public double YdPosition
        {
            get
            {
                return __instance.YdPosition;
            }

            set
            {
                __instance.YdPosition = value;
            }
        }

        public double Position
        {
            get
            {
                return __instance.Position;
            }

            set
            {
                __instance.Position = value;
            }
        }

        public double LongFrozen
        {
            get
            {
                return __instance.LongFrozen;
            }

            set
            {
                __instance.LongFrozen = value;
            }
        }

        public double ShortFrozen
        {
            get
            {
                return __instance.ShortFrozen;
            }

            set
            {
                __instance.ShortFrozen = value;
            }
        }

        public double LongFrozenAmount
        {
            get
            {
                return __instance.LongFrozenAmount;
            }

            set
            {
                __instance.LongFrozenAmount = value;
            }
        }

        public double ShortFrozenAmount
        {
            get
            {
                return __instance.ShortFrozenAmount;
            }

            set
            {
                __instance.ShortFrozenAmount = value;
            }
        }

        public double OpenVolume
        {
            get
            {
                return __instance.OpenVolume;
            }

            set
            {
                __instance.OpenVolume = value;
            }
        }

        public double CloseVolume
        {
            get
            {
                return __instance.CloseVolume;
            }

            set
            {
                __instance.CloseVolume = value;
            }
        }

        public double OpenAmount
        {
            get
            {
                return __instance.OpenAmount;
            }

            set
            {
                __instance.OpenAmount = value;
            }
        }

        public double CloseAmount
        {
            get
            {
                return __instance.CloseAmount;
            }

            set
            {
                __instance.CloseAmount = value;
            }
        }

        public double PositionCost
        {
            get
            {
                return __instance.PositionCost;
            }

            set
            {
                __instance.PositionCost = value;
            }
        }

        public double FrozenCash
        {
            get
            {
                return __instance.FrozenCash;
            }

            set
            {
                __instance.FrozenCash = value;
            }
        }

        public double CashIn
        {
            get
            {
                return __instance.CashIn;
            }

            set
            {
                __instance.CashIn = value;
            }
        }

        public double Commission
        {
            get
            {
                return __instance.Commission;
            }

            set
            {
                __instance.Commission = value;
            }
        }

        public double PreSettlementPrice
        {
            get
            {
                return __instance.PreSettlementPrice;
            }

            set
            {
                __instance.PreSettlementPrice = value;
            }
        }

        public double SettlementPrice
        {
            get
            {
                return __instance.SettlementPrice;
            }

            set
            {
                __instance.SettlementPrice = value;
            }
        }

        public sbyte[] TradingDay
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.TradingDay)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[9];
                        for (int i = 0; i < 9; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.TradingDay)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 9; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public double OpenCost
        {
            get
            {
                return __instance.OpenCost;
            }

            set
            {
                __instance.OpenCost = value;
            }
        }

        public double ExchangeMargin
        {
            get
            {
                return __instance.ExchangeMargin;
            }

            set
            {
                __instance.ExchangeMargin = value;
            }
        }

        public double TodayPosition
        {
            get
            {
                return __instance.TodayPosition;
            }

            set
            {
                __instance.TodayPosition = value;
            }
        }

        public double TransferFee
        {
            get
            {
                return __instance.TransferFee;
            }

            set
            {
                __instance.TransferFee = value;
            }
        }

        public double StampTax
        {
            get
            {
                return __instance.StampTax;
            }

            set
            {
                __instance.StampTax = value;
            }
        }

        public double TodayPurRedVolume
        {
            get
            {
                return __instance.TodayPurRedVolume;
            }

            set
            {
                __instance.TodayPurRedVolume = value;
            }
        }

        public double ConversionRate
        {
            get
            {
                return __instance.ConversionRate;
            }

            set
            {
                __instance.ConversionRate = value;
            }
        }

        public double ConversionAmount
        {
            get
            {
                return __instance.ConversionAmount;
            }

            set
            {
                __instance.ConversionAmount = value;
            }
        }

        public double StockValue
        {
            get
            {
                return __instance.StockValue;
            }

            set
            {
                __instance.StockValue = value;
            }
        }

        public sbyte[] ExchangeID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.ExchangeID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[9];
                        for (int i = 0; i < 9; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.ExchangeID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 9; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] AccountID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.AccountID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[15];
                        for (int i = 0; i < 15; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.AccountID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 15; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public double PledgeInPosition
        {
            get
            {
                return __instance.PledgeInPosition;
            }

            set
            {
                __instance.PledgeInPosition = value;
            }
        }

        public double RepurchasePosition
        {
            get
            {
                return __instance.RepurchasePosition;
            }

            set
            {
                __instance.RepurchasePosition = value;
            }
        }

        public double PurRedShortFrozen
        {
            get
            {
                return __instance.PurRedShortFrozen;
            }

            set
            {
                __instance.PurRedShortFrozen = value;
            }
        }

        public double MarginTradeVolume
        {
            get
            {
                return __instance.MarginTradeVolume;
            }

            set
            {
                __instance.MarginTradeVolume = value;
            }
        }

        public double MarginTradeAmount
        {
            get
            {
                return __instance.MarginTradeAmount;
            }

            set
            {
                __instance.MarginTradeAmount = value;
            }
        }

        public double MarginTradeFrozenVolume
        {
            get
            {
                return __instance.MarginTradeFrozenVolume;
            }

            set
            {
                __instance.MarginTradeFrozenVolume = value;
            }
        }

        public double MarginTradeFrozenAmount
        {
            get
            {
                return __instance.MarginTradeFrozenAmount;
            }

            set
            {
                __instance.MarginTradeFrozenAmount = value;
            }
        }

        public double MarginTradeConversionProfit
        {
            get
            {
                return __instance.MarginTradeConversionProfit;
            }

            set
            {
                __instance.MarginTradeConversionProfit = value;
            }
        }

        public double ShortSellVolume
        {
            get
            {
                return __instance.ShortSellVolume;
            }

            set
            {
                __instance.ShortSellVolume = value;
            }
        }

        public double ShortSellAmount
        {
            get
            {
                return __instance.ShortSellAmount;
            }

            set
            {
                __instance.ShortSellAmount = value;
            }
        }

        public double ShortSellFrozenVolume
        {
            get
            {
                return __instance.ShortSellFrozenVolume;
            }

            set
            {
                __instance.ShortSellFrozenVolume = value;
            }
        }

        public double ShortSellFrozenAmount
        {
            get
            {
                return __instance.ShortSellFrozenAmount;
            }

            set
            {
                __instance.ShortSellFrozenAmount = value;
            }
        }

        public double ShortSellConversionProfit
        {
            get
            {
                return __instance.ShortSellConversionProfit;
            }

            set
            {
                __instance.ShortSellConversionProfit = value;
            }
        }

        public double SSStockValue
        {
            get
            {
                return __instance.SSStockValue;
            }

            set
            {
                __instance.SSStockValue = value;
            }
        }

        public double TodayMTPosition
        {
            get
            {
                return __instance.TodayMTPosition;
            }

            set
            {
                __instance.TodayMTPosition = value;
            }
        }

        public double TodaySSPosition
        {
            get
            {
                return __instance.TodaySSPosition;
            }

            set
            {
                __instance.TodaySSPosition = value;
            }
        }

        public double YdOpenCost
        {
            get
            {
                return __instance.YdOpenCost;
            }

            set
            {
                __instance.YdOpenCost = value;
            }
        }

        public double LockPosition
        {
            get
            {
                return __instance.LockPosition;
            }

            set
            {
                __instance.LockPosition = value;
            }
        }

        public double CoverPosition
        {
            get
            {
                return __instance.CoverPosition;
            }

            set
            {
                __instance.CoverPosition = value;
            }
        }

        public double LockFrozenPosition
        {
            get
            {
                return __instance.LockFrozenPosition;
            }

            set
            {
                __instance.LockFrozenPosition = value;
            }
        }

        public double UnlockFrozenPosition
        {
            get
            {
                return __instance.UnlockFrozenPosition;
            }

            set
            {
                __instance.UnlockFrozenPosition = value;
            }
        }

        public double CoverFrozenPosition
        {
            get
            {
                return __instance.CoverFrozenPosition;
            }

            set
            {
                __instance.CoverFrozenPosition = value;
            }
        }

        public double ExecFrozenPosition
        {
            get
            {
                return __instance.ExecFrozenPosition;
            }

            set
            {
                __instance.ExecFrozenPosition = value;
            }
        }

        public double YDCoverPosition
        {
            get
            {
                return __instance.YDCoverPosition;
            }

            set
            {
                __instance.YDCoverPosition = value;
            }
        }
    }

    public unsafe partial struct CSecurityFtdcSyncDepositField
    {
        public partial struct __Internal
        {
            public fixed sbyte DepositSeqNo[15];

            public fixed sbyte BrokerID[11];

            public fixed sbyte InvestorID[15];

            public double Deposit;

            public int IsForce;

            public fixed sbyte AccountID[15];

            [SuppressUnmanagedCodeSecurity]
            [DllImport("securitymduserapi", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0CSecurityFtdcSyncDepositField@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);
        }

        private CSecurityFtdcSyncDepositField.__Internal __instance;
        internal CSecurityFtdcSyncDepositField.__Internal __Instance { get { return __instance; } }

        internal static global::LTSApi.CSecurityFtdcSyncDepositField __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new CSecurityFtdcSyncDepositField(native.ToPointer(), skipVTables);
        }

        internal static global::LTSApi.CSecurityFtdcSyncDepositField __CreateInstance(global::LTSApi.CSecurityFtdcSyncDepositField.__Internal native, bool skipVTables = false)
        {
            return new CSecurityFtdcSyncDepositField(native, skipVTables);
        }

        private CSecurityFtdcSyncDepositField(global::LTSApi.CSecurityFtdcSyncDepositField.__Internal native, bool skipVTables = false)
            : this()
        {
            __instance = native;
        }

        private CSecurityFtdcSyncDepositField(void* native, bool skipVTables = false) : this()
        {
            __instance = *(global::LTSApi.CSecurityFtdcSyncDepositField.__Internal*) native;
        }

        public CSecurityFtdcSyncDepositField(global::LTSApi.CSecurityFtdcSyncDepositField _0)
            : this()
        {
            var ____arg0 = _0.__Instance;
            var __arg0 = new global::System.IntPtr(&____arg0);
            fixed (__Internal* __instancePtr = &__instance)
            {
                __Internal.cctor_1(new global::System.IntPtr(__instancePtr), __arg0);
            }
        }

        public sbyte[] DepositSeqNo
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.DepositSeqNo)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[15];
                        for (int i = 0; i < 15; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.DepositSeqNo)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 15; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] BrokerID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.BrokerID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[11];
                        for (int i = 0; i < 11; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.BrokerID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 11; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] InvestorID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.InvestorID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[15];
                        for (int i = 0; i < 15; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.InvestorID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 15; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public double Deposit
        {
            get
            {
                return __instance.Deposit;
            }

            set
            {
                __instance.Deposit = value;
            }
        }

        public int IsForce
        {
            get
            {
                return __instance.IsForce;
            }

            set
            {
                __instance.IsForce = value;
            }
        }

        public sbyte[] AccountID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.AccountID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[15];
                        for (int i = 0; i < 15; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.AccountID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 15; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }
    }

    public unsafe partial struct CSecurityFtdcAdjustInvestorPositionField
    {
        public partial struct __Internal
        {
            public int OperateID;

            public fixed sbyte BrokerID[11];

            public fixed sbyte InvestorID[15];

            public sbyte ClientType;

            public fixed sbyte ExchangeID[9];

            public fixed sbyte InstrumentID[31];

            public sbyte PosiDirection;

            public double AdjustVolume;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("securitymduserapi", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0CSecurityFtdcAdjustInvestorPositionField@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);
        }

        private CSecurityFtdcAdjustInvestorPositionField.__Internal __instance;
        internal CSecurityFtdcAdjustInvestorPositionField.__Internal __Instance { get { return __instance; } }

        internal static global::LTSApi.CSecurityFtdcAdjustInvestorPositionField __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new CSecurityFtdcAdjustInvestorPositionField(native.ToPointer(), skipVTables);
        }

        internal static global::LTSApi.CSecurityFtdcAdjustInvestorPositionField __CreateInstance(global::LTSApi.CSecurityFtdcAdjustInvestorPositionField.__Internal native, bool skipVTables = false)
        {
            return new CSecurityFtdcAdjustInvestorPositionField(native, skipVTables);
        }

        private CSecurityFtdcAdjustInvestorPositionField(global::LTSApi.CSecurityFtdcAdjustInvestorPositionField.__Internal native, bool skipVTables = false)
            : this()
        {
            __instance = native;
        }

        private CSecurityFtdcAdjustInvestorPositionField(void* native, bool skipVTables = false) : this()
        {
            __instance = *(global::LTSApi.CSecurityFtdcAdjustInvestorPositionField.__Internal*) native;
        }

        public CSecurityFtdcAdjustInvestorPositionField(global::LTSApi.CSecurityFtdcAdjustInvestorPositionField _0)
            : this()
        {
            var ____arg0 = _0.__Instance;
            var __arg0 = new global::System.IntPtr(&____arg0);
            fixed (__Internal* __instancePtr = &__instance)
            {
                __Internal.cctor_1(new global::System.IntPtr(__instancePtr), __arg0);
            }
        }

        public int OperateID
        {
            get
            {
                return __instance.OperateID;
            }

            set
            {
                __instance.OperateID = value;
            }
        }

        public sbyte[] BrokerID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.BrokerID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[11];
                        for (int i = 0; i < 11; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.BrokerID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 11; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] InvestorID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.InvestorID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[15];
                        for (int i = 0; i < 15; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.InvestorID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 15; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte ClientType
        {
            get
            {
                return __instance.ClientType;
            }

            set
            {
                __instance.ClientType = value;
            }
        }

        public sbyte[] ExchangeID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.ExchangeID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[9];
                        for (int i = 0; i < 9; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.ExchangeID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 9; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] InstrumentID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.InstrumentID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[31];
                        for (int i = 0; i < 31; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.InstrumentID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 31; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte PosiDirection
        {
            get
            {
                return __instance.PosiDirection;
            }

            set
            {
                __instance.PosiDirection = value;
            }
        }

        public double AdjustVolume
        {
            get
            {
                return __instance.AdjustVolume;
            }

            set
            {
                __instance.AdjustVolume = value;
            }
        }
    }

    public unsafe partial struct CSecurityFtdcHaltOptionsTargetField
    {
        public partial struct __Internal
        {
            public fixed sbyte BrokerID[11];

            public fixed sbyte ExchangeID[9];

            public fixed sbyte InstrumentID[31];

            [SuppressUnmanagedCodeSecurity]
            [DllImport("securitymduserapi", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0CSecurityFtdcHaltOptionsTargetField@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);
        }

        private CSecurityFtdcHaltOptionsTargetField.__Internal __instance;
        internal CSecurityFtdcHaltOptionsTargetField.__Internal __Instance { get { return __instance; } }

        internal static global::LTSApi.CSecurityFtdcHaltOptionsTargetField __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new CSecurityFtdcHaltOptionsTargetField(native.ToPointer(), skipVTables);
        }

        internal static global::LTSApi.CSecurityFtdcHaltOptionsTargetField __CreateInstance(global::LTSApi.CSecurityFtdcHaltOptionsTargetField.__Internal native, bool skipVTables = false)
        {
            return new CSecurityFtdcHaltOptionsTargetField(native, skipVTables);
        }

        private CSecurityFtdcHaltOptionsTargetField(global::LTSApi.CSecurityFtdcHaltOptionsTargetField.__Internal native, bool skipVTables = false)
            : this()
        {
            __instance = native;
        }

        private CSecurityFtdcHaltOptionsTargetField(void* native, bool skipVTables = false) : this()
        {
            __instance = *(global::LTSApi.CSecurityFtdcHaltOptionsTargetField.__Internal*) native;
        }

        public CSecurityFtdcHaltOptionsTargetField(global::LTSApi.CSecurityFtdcHaltOptionsTargetField _0)
            : this()
        {
            var ____arg0 = _0.__Instance;
            var __arg0 = new global::System.IntPtr(&____arg0);
            fixed (__Internal* __instancePtr = &__instance)
            {
                __Internal.cctor_1(new global::System.IntPtr(__instancePtr), __arg0);
            }
        }

        public sbyte[] BrokerID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.BrokerID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[11];
                        for (int i = 0; i < 11; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.BrokerID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 11; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] ExchangeID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.ExchangeID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[9];
                        for (int i = 0; i < 9; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.ExchangeID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 9; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] InstrumentID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.InstrumentID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[31];
                        for (int i = 0; i < 31; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.InstrumentID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 31; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }
    }

    public unsafe partial struct CSecurityFtdcQryExchangeField
    {
        public partial struct __Internal
        {
            public fixed sbyte ExchangeID[9];

            [SuppressUnmanagedCodeSecurity]
            [DllImport("securitymduserapi", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0CSecurityFtdcQryExchangeField@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);
        }

        private CSecurityFtdcQryExchangeField.__Internal __instance;
        internal CSecurityFtdcQryExchangeField.__Internal __Instance { get { return __instance; } }

        internal static global::LTSApi.CSecurityFtdcQryExchangeField __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new CSecurityFtdcQryExchangeField(native.ToPointer(), skipVTables);
        }

        internal static global::LTSApi.CSecurityFtdcQryExchangeField __CreateInstance(global::LTSApi.CSecurityFtdcQryExchangeField.__Internal native, bool skipVTables = false)
        {
            return new CSecurityFtdcQryExchangeField(native, skipVTables);
        }

        private CSecurityFtdcQryExchangeField(global::LTSApi.CSecurityFtdcQryExchangeField.__Internal native, bool skipVTables = false)
            : this()
        {
            __instance = native;
        }

        private CSecurityFtdcQryExchangeField(void* native, bool skipVTables = false) : this()
        {
            __instance = *(global::LTSApi.CSecurityFtdcQryExchangeField.__Internal*) native;
        }

        public CSecurityFtdcQryExchangeField(global::LTSApi.CSecurityFtdcQryExchangeField _0)
            : this()
        {
            var ____arg0 = _0.__Instance;
            var __arg0 = new global::System.IntPtr(&____arg0);
            fixed (__Internal* __instancePtr = &__instance)
            {
                __Internal.cctor_1(new global::System.IntPtr(__instancePtr), __arg0);
            }
        }

        public sbyte[] ExchangeID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.ExchangeID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[9];
                        for (int i = 0; i < 9; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.ExchangeID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 9; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }
    }

    public unsafe partial struct CSecurityFtdcQryProductField
    {
        public partial struct __Internal
        {
            public fixed sbyte ProductID[31];

            [SuppressUnmanagedCodeSecurity]
            [DllImport("securitymduserapi", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0CSecurityFtdcQryProductField@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);
        }

        private CSecurityFtdcQryProductField.__Internal __instance;
        internal CSecurityFtdcQryProductField.__Internal __Instance { get { return __instance; } }

        internal static global::LTSApi.CSecurityFtdcQryProductField __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new CSecurityFtdcQryProductField(native.ToPointer(), skipVTables);
        }

        internal static global::LTSApi.CSecurityFtdcQryProductField __CreateInstance(global::LTSApi.CSecurityFtdcQryProductField.__Internal native, bool skipVTables = false)
        {
            return new CSecurityFtdcQryProductField(native, skipVTables);
        }

        private CSecurityFtdcQryProductField(global::LTSApi.CSecurityFtdcQryProductField.__Internal native, bool skipVTables = false)
            : this()
        {
            __instance = native;
        }

        private CSecurityFtdcQryProductField(void* native, bool skipVTables = false) : this()
        {
            __instance = *(global::LTSApi.CSecurityFtdcQryProductField.__Internal*) native;
        }

        public CSecurityFtdcQryProductField(global::LTSApi.CSecurityFtdcQryProductField _0)
            : this()
        {
            var ____arg0 = _0.__Instance;
            var __arg0 = new global::System.IntPtr(&____arg0);
            fixed (__Internal* __instancePtr = &__instance)
            {
                __Internal.cctor_1(new global::System.IntPtr(__instancePtr), __arg0);
            }
        }

        public sbyte[] ProductID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.ProductID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[31];
                        for (int i = 0; i < 31; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.ProductID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 31; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }
    }

    public unsafe partial struct CSecurityFtdcQryInstrumentField
    {
        public partial struct __Internal
        {
            public fixed sbyte InstrumentID[31];

            public fixed sbyte ExchangeID[9];

            public fixed sbyte ExchangeInstID[31];

            public fixed sbyte ProductID[31];

            [SuppressUnmanagedCodeSecurity]
            [DllImport("securitymduserapi", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0CSecurityFtdcQryInstrumentField@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);
        }

        private CSecurityFtdcQryInstrumentField.__Internal __instance;
        internal CSecurityFtdcQryInstrumentField.__Internal __Instance { get { return __instance; } }

        internal static global::LTSApi.CSecurityFtdcQryInstrumentField __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new CSecurityFtdcQryInstrumentField(native.ToPointer(), skipVTables);
        }

        internal static global::LTSApi.CSecurityFtdcQryInstrumentField __CreateInstance(global::LTSApi.CSecurityFtdcQryInstrumentField.__Internal native, bool skipVTables = false)
        {
            return new CSecurityFtdcQryInstrumentField(native, skipVTables);
        }

        private CSecurityFtdcQryInstrumentField(global::LTSApi.CSecurityFtdcQryInstrumentField.__Internal native, bool skipVTables = false)
            : this()
        {
            __instance = native;
        }

        private CSecurityFtdcQryInstrumentField(void* native, bool skipVTables = false) : this()
        {
            __instance = *(global::LTSApi.CSecurityFtdcQryInstrumentField.__Internal*) native;
        }

        public CSecurityFtdcQryInstrumentField(global::LTSApi.CSecurityFtdcQryInstrumentField _0)
            : this()
        {
            var ____arg0 = _0.__Instance;
            var __arg0 = new global::System.IntPtr(&____arg0);
            fixed (__Internal* __instancePtr = &__instance)
            {
                __Internal.cctor_1(new global::System.IntPtr(__instancePtr), __arg0);
            }
        }

        public sbyte[] InstrumentID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.InstrumentID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[31];
                        for (int i = 0; i < 31; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.InstrumentID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 31; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] ExchangeID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.ExchangeID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[9];
                        for (int i = 0; i < 9; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.ExchangeID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 9; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] ExchangeInstID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.ExchangeInstID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[31];
                        for (int i = 0; i < 31; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.ExchangeInstID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 31; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] ProductID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.ProductID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[31];
                        for (int i = 0; i < 31; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.ProductID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 31; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }
    }

    public unsafe partial struct CSecurityFtdcQryBrokerField
    {
        public partial struct __Internal
        {
            public fixed sbyte BrokerID[11];

            [SuppressUnmanagedCodeSecurity]
            [DllImport("securitymduserapi", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0CSecurityFtdcQryBrokerField@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);
        }

        private CSecurityFtdcQryBrokerField.__Internal __instance;
        internal CSecurityFtdcQryBrokerField.__Internal __Instance { get { return __instance; } }

        internal static global::LTSApi.CSecurityFtdcQryBrokerField __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new CSecurityFtdcQryBrokerField(native.ToPointer(), skipVTables);
        }

        internal static global::LTSApi.CSecurityFtdcQryBrokerField __CreateInstance(global::LTSApi.CSecurityFtdcQryBrokerField.__Internal native, bool skipVTables = false)
        {
            return new CSecurityFtdcQryBrokerField(native, skipVTables);
        }

        private CSecurityFtdcQryBrokerField(global::LTSApi.CSecurityFtdcQryBrokerField.__Internal native, bool skipVTables = false)
            : this()
        {
            __instance = native;
        }

        private CSecurityFtdcQryBrokerField(void* native, bool skipVTables = false) : this()
        {
            __instance = *(global::LTSApi.CSecurityFtdcQryBrokerField.__Internal*) native;
        }

        public CSecurityFtdcQryBrokerField(global::LTSApi.CSecurityFtdcQryBrokerField _0)
            : this()
        {
            var ____arg0 = _0.__Instance;
            var __arg0 = new global::System.IntPtr(&____arg0);
            fixed (__Internal* __instancePtr = &__instance)
            {
                __Internal.cctor_1(new global::System.IntPtr(__instancePtr), __arg0);
            }
        }

        public sbyte[] BrokerID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.BrokerID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[11];
                        for (int i = 0; i < 11; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.BrokerID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 11; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }
    }

    public unsafe partial struct CSecurityFtdcQryPartBrokerField
    {
        public partial struct __Internal
        {
            public fixed sbyte ExchangeID[9];

            public fixed sbyte BrokerID[11];

            public fixed sbyte ParticipantID[11];

            [SuppressUnmanagedCodeSecurity]
            [DllImport("securitymduserapi", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0CSecurityFtdcQryPartBrokerField@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);
        }

        private CSecurityFtdcQryPartBrokerField.__Internal __instance;
        internal CSecurityFtdcQryPartBrokerField.__Internal __Instance { get { return __instance; } }

        internal static global::LTSApi.CSecurityFtdcQryPartBrokerField __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new CSecurityFtdcQryPartBrokerField(native.ToPointer(), skipVTables);
        }

        internal static global::LTSApi.CSecurityFtdcQryPartBrokerField __CreateInstance(global::LTSApi.CSecurityFtdcQryPartBrokerField.__Internal native, bool skipVTables = false)
        {
            return new CSecurityFtdcQryPartBrokerField(native, skipVTables);
        }

        private CSecurityFtdcQryPartBrokerField(global::LTSApi.CSecurityFtdcQryPartBrokerField.__Internal native, bool skipVTables = false)
            : this()
        {
            __instance = native;
        }

        private CSecurityFtdcQryPartBrokerField(void* native, bool skipVTables = false) : this()
        {
            __instance = *(global::LTSApi.CSecurityFtdcQryPartBrokerField.__Internal*) native;
        }

        public CSecurityFtdcQryPartBrokerField(global::LTSApi.CSecurityFtdcQryPartBrokerField _0)
            : this()
        {
            var ____arg0 = _0.__Instance;
            var __arg0 = new global::System.IntPtr(&____arg0);
            fixed (__Internal* __instancePtr = &__instance)
            {
                __Internal.cctor_1(new global::System.IntPtr(__instancePtr), __arg0);
            }
        }

        public sbyte[] ExchangeID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.ExchangeID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[9];
                        for (int i = 0; i < 9; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.ExchangeID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 9; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] BrokerID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.BrokerID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[11];
                        for (int i = 0; i < 11; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.BrokerID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 11; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] ParticipantID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.ParticipantID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[11];
                        for (int i = 0; i < 11; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.ParticipantID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 11; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }
    }

    public unsafe partial struct CSecurityFtdcQryInvestorField
    {
        public partial struct __Internal
        {
            public fixed sbyte BrokerID[11];

            public fixed sbyte InvestorID[15];

            [SuppressUnmanagedCodeSecurity]
            [DllImport("securitymduserapi", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0CSecurityFtdcQryInvestorField@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);
        }

        private CSecurityFtdcQryInvestorField.__Internal __instance;
        internal CSecurityFtdcQryInvestorField.__Internal __Instance { get { return __instance; } }

        internal static global::LTSApi.CSecurityFtdcQryInvestorField __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new CSecurityFtdcQryInvestorField(native.ToPointer(), skipVTables);
        }

        internal static global::LTSApi.CSecurityFtdcQryInvestorField __CreateInstance(global::LTSApi.CSecurityFtdcQryInvestorField.__Internal native, bool skipVTables = false)
        {
            return new CSecurityFtdcQryInvestorField(native, skipVTables);
        }

        private CSecurityFtdcQryInvestorField(global::LTSApi.CSecurityFtdcQryInvestorField.__Internal native, bool skipVTables = false)
            : this()
        {
            __instance = native;
        }

        private CSecurityFtdcQryInvestorField(void* native, bool skipVTables = false) : this()
        {
            __instance = *(global::LTSApi.CSecurityFtdcQryInvestorField.__Internal*) native;
        }

        public CSecurityFtdcQryInvestorField(global::LTSApi.CSecurityFtdcQryInvestorField _0)
            : this()
        {
            var ____arg0 = _0.__Instance;
            var __arg0 = new global::System.IntPtr(&____arg0);
            fixed (__Internal* __instancePtr = &__instance)
            {
                __Internal.cctor_1(new global::System.IntPtr(__instancePtr), __arg0);
            }
        }

        public sbyte[] BrokerID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.BrokerID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[11];
                        for (int i = 0; i < 11; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.BrokerID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 11; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] InvestorID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.InvestorID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[15];
                        for (int i = 0; i < 15; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.InvestorID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 15; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }
    }

    public unsafe partial struct CSecurityFtdcQryTradingCodeField
    {
        public partial struct __Internal
        {
            public fixed sbyte BrokerID[11];

            public fixed sbyte InvestorID[15];

            public fixed sbyte ExchangeID[9];

            public fixed sbyte ClientID[21];

            [SuppressUnmanagedCodeSecurity]
            [DllImport("securitymduserapi", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0CSecurityFtdcQryTradingCodeField@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);
        }

        private CSecurityFtdcQryTradingCodeField.__Internal __instance;
        internal CSecurityFtdcQryTradingCodeField.__Internal __Instance { get { return __instance; } }

        internal static global::LTSApi.CSecurityFtdcQryTradingCodeField __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new CSecurityFtdcQryTradingCodeField(native.ToPointer(), skipVTables);
        }

        internal static global::LTSApi.CSecurityFtdcQryTradingCodeField __CreateInstance(global::LTSApi.CSecurityFtdcQryTradingCodeField.__Internal native, bool skipVTables = false)
        {
            return new CSecurityFtdcQryTradingCodeField(native, skipVTables);
        }

        private CSecurityFtdcQryTradingCodeField(global::LTSApi.CSecurityFtdcQryTradingCodeField.__Internal native, bool skipVTables = false)
            : this()
        {
            __instance = native;
        }

        private CSecurityFtdcQryTradingCodeField(void* native, bool skipVTables = false) : this()
        {
            __instance = *(global::LTSApi.CSecurityFtdcQryTradingCodeField.__Internal*) native;
        }

        public CSecurityFtdcQryTradingCodeField(global::LTSApi.CSecurityFtdcQryTradingCodeField _0)
            : this()
        {
            var ____arg0 = _0.__Instance;
            var __arg0 = new global::System.IntPtr(&____arg0);
            fixed (__Internal* __instancePtr = &__instance)
            {
                __Internal.cctor_1(new global::System.IntPtr(__instancePtr), __arg0);
            }
        }

        public sbyte[] BrokerID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.BrokerID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[11];
                        for (int i = 0; i < 11; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.BrokerID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 11; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] InvestorID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.InvestorID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[15];
                        for (int i = 0; i < 15; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.InvestorID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 15; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] ExchangeID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.ExchangeID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[9];
                        for (int i = 0; i < 9; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.ExchangeID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 9; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] ClientID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.ClientID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[21];
                        for (int i = 0; i < 21; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.ClientID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 21; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }
    }

    public unsafe partial struct CSecurityFtdcQrySuperUserField
    {
        public partial struct __Internal
        {
            public fixed sbyte UserID[16];

            [SuppressUnmanagedCodeSecurity]
            [DllImport("securitymduserapi", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0CSecurityFtdcQrySuperUserField@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);
        }

        private CSecurityFtdcQrySuperUserField.__Internal __instance;
        internal CSecurityFtdcQrySuperUserField.__Internal __Instance { get { return __instance; } }

        internal static global::LTSApi.CSecurityFtdcQrySuperUserField __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new CSecurityFtdcQrySuperUserField(native.ToPointer(), skipVTables);
        }

        internal static global::LTSApi.CSecurityFtdcQrySuperUserField __CreateInstance(global::LTSApi.CSecurityFtdcQrySuperUserField.__Internal native, bool skipVTables = false)
        {
            return new CSecurityFtdcQrySuperUserField(native, skipVTables);
        }

        private CSecurityFtdcQrySuperUserField(global::LTSApi.CSecurityFtdcQrySuperUserField.__Internal native, bool skipVTables = false)
            : this()
        {
            __instance = native;
        }

        private CSecurityFtdcQrySuperUserField(void* native, bool skipVTables = false) : this()
        {
            __instance = *(global::LTSApi.CSecurityFtdcQrySuperUserField.__Internal*) native;
        }

        public CSecurityFtdcQrySuperUserField(global::LTSApi.CSecurityFtdcQrySuperUserField _0)
            : this()
        {
            var ____arg0 = _0.__Instance;
            var __arg0 = new global::System.IntPtr(&____arg0);
            fixed (__Internal* __instancePtr = &__instance)
            {
                __Internal.cctor_1(new global::System.IntPtr(__instancePtr), __arg0);
            }
        }

        public sbyte[] UserID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.UserID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[16];
                        for (int i = 0; i < 16; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.UserID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 16; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }
    }

    public unsafe partial struct CSecurityFtdcQrySuperUserFunctionField
    {
        public partial struct __Internal
        {
            public fixed sbyte UserID[16];

            [SuppressUnmanagedCodeSecurity]
            [DllImport("securitymduserapi", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0CSecurityFtdcQrySuperUserFunctionField@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);
        }

        private CSecurityFtdcQrySuperUserFunctionField.__Internal __instance;
        internal CSecurityFtdcQrySuperUserFunctionField.__Internal __Instance { get { return __instance; } }

        internal static global::LTSApi.CSecurityFtdcQrySuperUserFunctionField __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new CSecurityFtdcQrySuperUserFunctionField(native.ToPointer(), skipVTables);
        }

        internal static global::LTSApi.CSecurityFtdcQrySuperUserFunctionField __CreateInstance(global::LTSApi.CSecurityFtdcQrySuperUserFunctionField.__Internal native, bool skipVTables = false)
        {
            return new CSecurityFtdcQrySuperUserFunctionField(native, skipVTables);
        }

        private CSecurityFtdcQrySuperUserFunctionField(global::LTSApi.CSecurityFtdcQrySuperUserFunctionField.__Internal native, bool skipVTables = false)
            : this()
        {
            __instance = native;
        }

        private CSecurityFtdcQrySuperUserFunctionField(void* native, bool skipVTables = false) : this()
        {
            __instance = *(global::LTSApi.CSecurityFtdcQrySuperUserFunctionField.__Internal*) native;
        }

        public CSecurityFtdcQrySuperUserFunctionField(global::LTSApi.CSecurityFtdcQrySuperUserFunctionField _0)
            : this()
        {
            var ____arg0 = _0.__Instance;
            var __arg0 = new global::System.IntPtr(&____arg0);
            fixed (__Internal* __instancePtr = &__instance)
            {
                __Internal.cctor_1(new global::System.IntPtr(__instancePtr), __arg0);
            }
        }

        public sbyte[] UserID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.UserID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[16];
                        for (int i = 0; i < 16; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.UserID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 16; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }
    }

    public unsafe partial struct CSecurityFtdcQryBrokerUserField
    {
        public partial struct __Internal
        {
            public fixed sbyte BrokerID[11];

            public fixed sbyte UserID[16];

            [SuppressUnmanagedCodeSecurity]
            [DllImport("securitymduserapi", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0CSecurityFtdcQryBrokerUserField@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);
        }

        private CSecurityFtdcQryBrokerUserField.__Internal __instance;
        internal CSecurityFtdcQryBrokerUserField.__Internal __Instance { get { return __instance; } }

        internal static global::LTSApi.CSecurityFtdcQryBrokerUserField __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new CSecurityFtdcQryBrokerUserField(native.ToPointer(), skipVTables);
        }

        internal static global::LTSApi.CSecurityFtdcQryBrokerUserField __CreateInstance(global::LTSApi.CSecurityFtdcQryBrokerUserField.__Internal native, bool skipVTables = false)
        {
            return new CSecurityFtdcQryBrokerUserField(native, skipVTables);
        }

        private CSecurityFtdcQryBrokerUserField(global::LTSApi.CSecurityFtdcQryBrokerUserField.__Internal native, bool skipVTables = false)
            : this()
        {
            __instance = native;
        }

        private CSecurityFtdcQryBrokerUserField(void* native, bool skipVTables = false) : this()
        {
            __instance = *(global::LTSApi.CSecurityFtdcQryBrokerUserField.__Internal*) native;
        }

        public CSecurityFtdcQryBrokerUserField(global::LTSApi.CSecurityFtdcQryBrokerUserField _0)
            : this()
        {
            var ____arg0 = _0.__Instance;
            var __arg0 = new global::System.IntPtr(&____arg0);
            fixed (__Internal* __instancePtr = &__instance)
            {
                __Internal.cctor_1(new global::System.IntPtr(__instancePtr), __arg0);
            }
        }

        public sbyte[] BrokerID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.BrokerID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[11];
                        for (int i = 0; i < 11; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.BrokerID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 11; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] UserID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.UserID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[16];
                        for (int i = 0; i < 16; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.UserID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 16; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }
    }

    public unsafe partial struct CSecurityFtdcQryBrokerUserFunctionField
    {
        public partial struct __Internal
        {
            public fixed sbyte BrokerID[11];

            public fixed sbyte UserID[16];

            [SuppressUnmanagedCodeSecurity]
            [DllImport("securitymduserapi", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0CSecurityFtdcQryBrokerUserFunctionField@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);
        }

        private CSecurityFtdcQryBrokerUserFunctionField.__Internal __instance;
        internal CSecurityFtdcQryBrokerUserFunctionField.__Internal __Instance { get { return __instance; } }

        internal static global::LTSApi.CSecurityFtdcQryBrokerUserFunctionField __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new CSecurityFtdcQryBrokerUserFunctionField(native.ToPointer(), skipVTables);
        }

        internal static global::LTSApi.CSecurityFtdcQryBrokerUserFunctionField __CreateInstance(global::LTSApi.CSecurityFtdcQryBrokerUserFunctionField.__Internal native, bool skipVTables = false)
        {
            return new CSecurityFtdcQryBrokerUserFunctionField(native, skipVTables);
        }

        private CSecurityFtdcQryBrokerUserFunctionField(global::LTSApi.CSecurityFtdcQryBrokerUserFunctionField.__Internal native, bool skipVTables = false)
            : this()
        {
            __instance = native;
        }

        private CSecurityFtdcQryBrokerUserFunctionField(void* native, bool skipVTables = false) : this()
        {
            __instance = *(global::LTSApi.CSecurityFtdcQryBrokerUserFunctionField.__Internal*) native;
        }

        public CSecurityFtdcQryBrokerUserFunctionField(global::LTSApi.CSecurityFtdcQryBrokerUserFunctionField _0)
            : this()
        {
            var ____arg0 = _0.__Instance;
            var __arg0 = new global::System.IntPtr(&____arg0);
            fixed (__Internal* __instancePtr = &__instance)
            {
                __Internal.cctor_1(new global::System.IntPtr(__instancePtr), __arg0);
            }
        }

        public sbyte[] BrokerID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.BrokerID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[11];
                        for (int i = 0; i < 11; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.BrokerID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 11; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] UserID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.UserID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[16];
                        for (int i = 0; i < 16; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.UserID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 16; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }
    }

    public unsafe partial struct CSecurityFtdcQryTradingAccountField
    {
        public partial struct __Internal
        {
            public fixed sbyte BrokerID[11];

            public fixed sbyte InvestorID[15];

            [SuppressUnmanagedCodeSecurity]
            [DllImport("securitymduserapi", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0CSecurityFtdcQryTradingAccountField@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);
        }

        private CSecurityFtdcQryTradingAccountField.__Internal __instance;
        internal CSecurityFtdcQryTradingAccountField.__Internal __Instance { get { return __instance; } }

        internal static global::LTSApi.CSecurityFtdcQryTradingAccountField __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new CSecurityFtdcQryTradingAccountField(native.ToPointer(), skipVTables);
        }

        internal static global::LTSApi.CSecurityFtdcQryTradingAccountField __CreateInstance(global::LTSApi.CSecurityFtdcQryTradingAccountField.__Internal native, bool skipVTables = false)
        {
            return new CSecurityFtdcQryTradingAccountField(native, skipVTables);
        }

        private CSecurityFtdcQryTradingAccountField(global::LTSApi.CSecurityFtdcQryTradingAccountField.__Internal native, bool skipVTables = false)
            : this()
        {
            __instance = native;
        }

        private CSecurityFtdcQryTradingAccountField(void* native, bool skipVTables = false) : this()
        {
            __instance = *(global::LTSApi.CSecurityFtdcQryTradingAccountField.__Internal*) native;
        }

        public CSecurityFtdcQryTradingAccountField(global::LTSApi.CSecurityFtdcQryTradingAccountField _0)
            : this()
        {
            var ____arg0 = _0.__Instance;
            var __arg0 = new global::System.IntPtr(&____arg0);
            fixed (__Internal* __instancePtr = &__instance)
            {
                __Internal.cctor_1(new global::System.IntPtr(__instancePtr), __arg0);
            }
        }

        public sbyte[] BrokerID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.BrokerID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[11];
                        for (int i = 0; i < 11; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.BrokerID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 11; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] InvestorID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.InvestorID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[15];
                        for (int i = 0; i < 15; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.InvestorID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 15; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }
    }

    public unsafe partial struct CSecurityFtdcQryLoginForbiddenUserField
    {
        public partial struct __Internal
        {
            public fixed sbyte BrokerID[11];

            public fixed sbyte UserID[16];

            [SuppressUnmanagedCodeSecurity]
            [DllImport("securitymduserapi", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0CSecurityFtdcQryLoginForbiddenUserField@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);
        }

        private CSecurityFtdcQryLoginForbiddenUserField.__Internal __instance;
        internal CSecurityFtdcQryLoginForbiddenUserField.__Internal __Instance { get { return __instance; } }

        internal static global::LTSApi.CSecurityFtdcQryLoginForbiddenUserField __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new CSecurityFtdcQryLoginForbiddenUserField(native.ToPointer(), skipVTables);
        }

        internal static global::LTSApi.CSecurityFtdcQryLoginForbiddenUserField __CreateInstance(global::LTSApi.CSecurityFtdcQryLoginForbiddenUserField.__Internal native, bool skipVTables = false)
        {
            return new CSecurityFtdcQryLoginForbiddenUserField(native, skipVTables);
        }

        private CSecurityFtdcQryLoginForbiddenUserField(global::LTSApi.CSecurityFtdcQryLoginForbiddenUserField.__Internal native, bool skipVTables = false)
            : this()
        {
            __instance = native;
        }

        private CSecurityFtdcQryLoginForbiddenUserField(void* native, bool skipVTables = false) : this()
        {
            __instance = *(global::LTSApi.CSecurityFtdcQryLoginForbiddenUserField.__Internal*) native;
        }

        public CSecurityFtdcQryLoginForbiddenUserField(global::LTSApi.CSecurityFtdcQryLoginForbiddenUserField _0)
            : this()
        {
            var ____arg0 = _0.__Instance;
            var __arg0 = new global::System.IntPtr(&____arg0);
            fixed (__Internal* __instancePtr = &__instance)
            {
                __Internal.cctor_1(new global::System.IntPtr(__instancePtr), __arg0);
            }
        }

        public sbyte[] BrokerID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.BrokerID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[11];
                        for (int i = 0; i < 11; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.BrokerID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 11; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] UserID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.UserID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[16];
                        for (int i = 0; i < 16; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.UserID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 16; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }
    }

    public unsafe partial struct CSecurityFtdcQryDepthMarketDataField
    {
        public partial struct __Internal
        {
            public fixed sbyte InstrumentID[31];

            [SuppressUnmanagedCodeSecurity]
            [DllImport("securitymduserapi", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0CSecurityFtdcQryDepthMarketDataField@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);
        }

        private CSecurityFtdcQryDepthMarketDataField.__Internal __instance;
        internal CSecurityFtdcQryDepthMarketDataField.__Internal __Instance { get { return __instance; } }

        internal static global::LTSApi.CSecurityFtdcQryDepthMarketDataField __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new CSecurityFtdcQryDepthMarketDataField(native.ToPointer(), skipVTables);
        }

        internal static global::LTSApi.CSecurityFtdcQryDepthMarketDataField __CreateInstance(global::LTSApi.CSecurityFtdcQryDepthMarketDataField.__Internal native, bool skipVTables = false)
        {
            return new CSecurityFtdcQryDepthMarketDataField(native, skipVTables);
        }

        private CSecurityFtdcQryDepthMarketDataField(global::LTSApi.CSecurityFtdcQryDepthMarketDataField.__Internal native, bool skipVTables = false)
            : this()
        {
            __instance = native;
        }

        private CSecurityFtdcQryDepthMarketDataField(void* native, bool skipVTables = false) : this()
        {
            __instance = *(global::LTSApi.CSecurityFtdcQryDepthMarketDataField.__Internal*) native;
        }

        public CSecurityFtdcQryDepthMarketDataField(global::LTSApi.CSecurityFtdcQryDepthMarketDataField _0)
            : this()
        {
            var ____arg0 = _0.__Instance;
            var __arg0 = new global::System.IntPtr(&____arg0);
            fixed (__Internal* __instancePtr = &__instance)
            {
                __Internal.cctor_1(new global::System.IntPtr(__instancePtr), __arg0);
            }
        }

        public sbyte[] InstrumentID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.InstrumentID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[31];
                        for (int i = 0; i < 31; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.InstrumentID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 31; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }
    }

    public unsafe partial struct CSecurityFtdcQryInstrumentTradingRightField
    {
        public partial struct __Internal
        {
            public fixed sbyte ExchangeID[9];

            public fixed sbyte BrokerID[11];

            public fixed sbyte InvestorID[15];

            public fixed sbyte InstrumentID[31];

            [SuppressUnmanagedCodeSecurity]
            [DllImport("securitymduserapi", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0CSecurityFtdcQryInstrumentTradingRightField@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);
        }

        private CSecurityFtdcQryInstrumentTradingRightField.__Internal __instance;
        internal CSecurityFtdcQryInstrumentTradingRightField.__Internal __Instance { get { return __instance; } }

        internal static global::LTSApi.CSecurityFtdcQryInstrumentTradingRightField __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new CSecurityFtdcQryInstrumentTradingRightField(native.ToPointer(), skipVTables);
        }

        internal static global::LTSApi.CSecurityFtdcQryInstrumentTradingRightField __CreateInstance(global::LTSApi.CSecurityFtdcQryInstrumentTradingRightField.__Internal native, bool skipVTables = false)
        {
            return new CSecurityFtdcQryInstrumentTradingRightField(native, skipVTables);
        }

        private CSecurityFtdcQryInstrumentTradingRightField(global::LTSApi.CSecurityFtdcQryInstrumentTradingRightField.__Internal native, bool skipVTables = false)
            : this()
        {
            __instance = native;
        }

        private CSecurityFtdcQryInstrumentTradingRightField(void* native, bool skipVTables = false) : this()
        {
            __instance = *(global::LTSApi.CSecurityFtdcQryInstrumentTradingRightField.__Internal*) native;
        }

        public CSecurityFtdcQryInstrumentTradingRightField(global::LTSApi.CSecurityFtdcQryInstrumentTradingRightField _0)
            : this()
        {
            var ____arg0 = _0.__Instance;
            var __arg0 = new global::System.IntPtr(&____arg0);
            fixed (__Internal* __instancePtr = &__instance)
            {
                __Internal.cctor_1(new global::System.IntPtr(__instancePtr), __arg0);
            }
        }

        public sbyte[] ExchangeID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.ExchangeID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[9];
                        for (int i = 0; i < 9; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.ExchangeID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 9; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] BrokerID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.BrokerID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[11];
                        for (int i = 0; i < 11; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.BrokerID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 11; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] InvestorID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.InvestorID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[15];
                        for (int i = 0; i < 15; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.InvestorID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 15; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] InstrumentID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.InstrumentID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[31];
                        for (int i = 0; i < 31; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.InstrumentID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 31; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }
    }

    public unsafe partial struct CSecurityFtdcQryInvestorPositionDetailField
    {
        public partial struct __Internal
        {
            public fixed sbyte BrokerID[11];

            public fixed sbyte InvestorID[15];

            public fixed sbyte InstrumentID[31];

            [SuppressUnmanagedCodeSecurity]
            [DllImport("securitymduserapi", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0CSecurityFtdcQryInvestorPositionDetailField@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);
        }

        private CSecurityFtdcQryInvestorPositionDetailField.__Internal __instance;
        internal CSecurityFtdcQryInvestorPositionDetailField.__Internal __Instance { get { return __instance; } }

        internal static global::LTSApi.CSecurityFtdcQryInvestorPositionDetailField __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new CSecurityFtdcQryInvestorPositionDetailField(native.ToPointer(), skipVTables);
        }

        internal static global::LTSApi.CSecurityFtdcQryInvestorPositionDetailField __CreateInstance(global::LTSApi.CSecurityFtdcQryInvestorPositionDetailField.__Internal native, bool skipVTables = false)
        {
            return new CSecurityFtdcQryInvestorPositionDetailField(native, skipVTables);
        }

        private CSecurityFtdcQryInvestorPositionDetailField(global::LTSApi.CSecurityFtdcQryInvestorPositionDetailField.__Internal native, bool skipVTables = false)
            : this()
        {
            __instance = native;
        }

        private CSecurityFtdcQryInvestorPositionDetailField(void* native, bool skipVTables = false) : this()
        {
            __instance = *(global::LTSApi.CSecurityFtdcQryInvestorPositionDetailField.__Internal*) native;
        }

        public CSecurityFtdcQryInvestorPositionDetailField(global::LTSApi.CSecurityFtdcQryInvestorPositionDetailField _0)
            : this()
        {
            var ____arg0 = _0.__Instance;
            var __arg0 = new global::System.IntPtr(&____arg0);
            fixed (__Internal* __instancePtr = &__instance)
            {
                __Internal.cctor_1(new global::System.IntPtr(__instancePtr), __arg0);
            }
        }

        public sbyte[] BrokerID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.BrokerID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[11];
                        for (int i = 0; i < 11; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.BrokerID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 11; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] InvestorID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.InvestorID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[15];
                        for (int i = 0; i < 15; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.InvestorID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 15; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] InstrumentID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.InstrumentID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[31];
                        for (int i = 0; i < 31; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.InstrumentID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 31; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }
    }

    public unsafe partial struct CSecurityFtdcQryBondInterestField
    {
        public partial struct __Internal
        {
            public fixed sbyte ExchangeID[9];

            public fixed sbyte InstrumentID[31];

            [SuppressUnmanagedCodeSecurity]
            [DllImport("securitymduserapi", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0CSecurityFtdcQryBondInterestField@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);
        }

        private CSecurityFtdcQryBondInterestField.__Internal __instance;
        internal CSecurityFtdcQryBondInterestField.__Internal __Instance { get { return __instance; } }

        internal static global::LTSApi.CSecurityFtdcQryBondInterestField __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new CSecurityFtdcQryBondInterestField(native.ToPointer(), skipVTables);
        }

        internal static global::LTSApi.CSecurityFtdcQryBondInterestField __CreateInstance(global::LTSApi.CSecurityFtdcQryBondInterestField.__Internal native, bool skipVTables = false)
        {
            return new CSecurityFtdcQryBondInterestField(native, skipVTables);
        }

        private CSecurityFtdcQryBondInterestField(global::LTSApi.CSecurityFtdcQryBondInterestField.__Internal native, bool skipVTables = false)
            : this()
        {
            __instance = native;
        }

        private CSecurityFtdcQryBondInterestField(void* native, bool skipVTables = false) : this()
        {
            __instance = *(global::LTSApi.CSecurityFtdcQryBondInterestField.__Internal*) native;
        }

        public CSecurityFtdcQryBondInterestField(global::LTSApi.CSecurityFtdcQryBondInterestField _0)
            : this()
        {
            var ____arg0 = _0.__Instance;
            var __arg0 = new global::System.IntPtr(&____arg0);
            fixed (__Internal* __instancePtr = &__instance)
            {
                __Internal.cctor_1(new global::System.IntPtr(__instancePtr), __arg0);
            }
        }

        public sbyte[] ExchangeID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.ExchangeID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[9];
                        for (int i = 0; i < 9; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.ExchangeID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 9; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] InstrumentID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.InstrumentID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[31];
                        for (int i = 0; i < 31; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.InstrumentID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 31; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }
    }

    public unsafe partial struct CSecurityFtdcQryMarketRationInfoField
    {
        public partial struct __Internal
        {
            public fixed sbyte BrokerID[11];

            public fixed sbyte InvestorID[15];

            public fixed sbyte ExchangeID[9];

            [SuppressUnmanagedCodeSecurity]
            [DllImport("securitymduserapi", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0CSecurityFtdcQryMarketRationInfoField@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);
        }

        private CSecurityFtdcQryMarketRationInfoField.__Internal __instance;
        internal CSecurityFtdcQryMarketRationInfoField.__Internal __Instance { get { return __instance; } }

        internal static global::LTSApi.CSecurityFtdcQryMarketRationInfoField __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new CSecurityFtdcQryMarketRationInfoField(native.ToPointer(), skipVTables);
        }

        internal static global::LTSApi.CSecurityFtdcQryMarketRationInfoField __CreateInstance(global::LTSApi.CSecurityFtdcQryMarketRationInfoField.__Internal native, bool skipVTables = false)
        {
            return new CSecurityFtdcQryMarketRationInfoField(native, skipVTables);
        }

        private CSecurityFtdcQryMarketRationInfoField(global::LTSApi.CSecurityFtdcQryMarketRationInfoField.__Internal native, bool skipVTables = false)
            : this()
        {
            __instance = native;
        }

        private CSecurityFtdcQryMarketRationInfoField(void* native, bool skipVTables = false) : this()
        {
            __instance = *(global::LTSApi.CSecurityFtdcQryMarketRationInfoField.__Internal*) native;
        }

        public CSecurityFtdcQryMarketRationInfoField(global::LTSApi.CSecurityFtdcQryMarketRationInfoField _0)
            : this()
        {
            var ____arg0 = _0.__Instance;
            var __arg0 = new global::System.IntPtr(&____arg0);
            fixed (__Internal* __instancePtr = &__instance)
            {
                __Internal.cctor_1(new global::System.IntPtr(__instancePtr), __arg0);
            }
        }

        public sbyte[] BrokerID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.BrokerID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[11];
                        for (int i = 0; i < 11; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.BrokerID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 11; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] InvestorID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.InvestorID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[15];
                        for (int i = 0; i < 15; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.InvestorID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 15; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] ExchangeID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.ExchangeID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[9];
                        for (int i = 0; i < 9; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.ExchangeID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 9; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }
    }

    public unsafe partial struct CSecurityFtdcQryInstrumentCommissionRateField
    {
        public partial struct __Internal
        {
            public fixed sbyte ExchangeID[9];

            public fixed sbyte BrokerID[11];

            public fixed sbyte InvestorID[15];

            public fixed sbyte InstrumentID[31];

            public sbyte Direction;

            public sbyte OffsetFlag;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("securitymduserapi", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0CSecurityFtdcQryInstrumentCommissionRateField@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);
        }

        private CSecurityFtdcQryInstrumentCommissionRateField.__Internal __instance;
        internal CSecurityFtdcQryInstrumentCommissionRateField.__Internal __Instance { get { return __instance; } }

        internal static global::LTSApi.CSecurityFtdcQryInstrumentCommissionRateField __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new CSecurityFtdcQryInstrumentCommissionRateField(native.ToPointer(), skipVTables);
        }

        internal static global::LTSApi.CSecurityFtdcQryInstrumentCommissionRateField __CreateInstance(global::LTSApi.CSecurityFtdcQryInstrumentCommissionRateField.__Internal native, bool skipVTables = false)
        {
            return new CSecurityFtdcQryInstrumentCommissionRateField(native, skipVTables);
        }

        private CSecurityFtdcQryInstrumentCommissionRateField(global::LTSApi.CSecurityFtdcQryInstrumentCommissionRateField.__Internal native, bool skipVTables = false)
            : this()
        {
            __instance = native;
        }

        private CSecurityFtdcQryInstrumentCommissionRateField(void* native, bool skipVTables = false) : this()
        {
            __instance = *(global::LTSApi.CSecurityFtdcQryInstrumentCommissionRateField.__Internal*) native;
        }

        public CSecurityFtdcQryInstrumentCommissionRateField(global::LTSApi.CSecurityFtdcQryInstrumentCommissionRateField _0)
            : this()
        {
            var ____arg0 = _0.__Instance;
            var __arg0 = new global::System.IntPtr(&____arg0);
            fixed (__Internal* __instancePtr = &__instance)
            {
                __Internal.cctor_1(new global::System.IntPtr(__instancePtr), __arg0);
            }
        }

        public sbyte[] ExchangeID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.ExchangeID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[9];
                        for (int i = 0; i < 9; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.ExchangeID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 9; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] BrokerID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.BrokerID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[11];
                        for (int i = 0; i < 11; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.BrokerID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 11; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] InvestorID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.InvestorID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[15];
                        for (int i = 0; i < 15; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.InvestorID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 15; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] InstrumentID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.InstrumentID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[31];
                        for (int i = 0; i < 31; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.InstrumentID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 31; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte Direction
        {
            get
            {
                return __instance.Direction;
            }

            set
            {
                __instance.Direction = value;
            }
        }

        public sbyte OffsetFlag
        {
            get
            {
                return __instance.OffsetFlag;
            }

            set
            {
                __instance.OffsetFlag = value;
            }
        }
    }

    public unsafe partial struct CSecurityFtdcQryExcessStockInfoField
    {
        public partial struct __Internal
        {
            public fixed sbyte BrokerID[11];

            public fixed sbyte InvestorID[15];

            public fixed sbyte ExchangeID[9];

            public fixed sbyte InstrumentID[31];

            [SuppressUnmanagedCodeSecurity]
            [DllImport("securitymduserapi", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0CSecurityFtdcQryExcessStockInfoField@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);
        }

        private CSecurityFtdcQryExcessStockInfoField.__Internal __instance;
        internal CSecurityFtdcQryExcessStockInfoField.__Internal __Instance { get { return __instance; } }

        internal static global::LTSApi.CSecurityFtdcQryExcessStockInfoField __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new CSecurityFtdcQryExcessStockInfoField(native.ToPointer(), skipVTables);
        }

        internal static global::LTSApi.CSecurityFtdcQryExcessStockInfoField __CreateInstance(global::LTSApi.CSecurityFtdcQryExcessStockInfoField.__Internal native, bool skipVTables = false)
        {
            return new CSecurityFtdcQryExcessStockInfoField(native, skipVTables);
        }

        private CSecurityFtdcQryExcessStockInfoField(global::LTSApi.CSecurityFtdcQryExcessStockInfoField.__Internal native, bool skipVTables = false)
            : this()
        {
            __instance = native;
        }

        private CSecurityFtdcQryExcessStockInfoField(void* native, bool skipVTables = false) : this()
        {
            __instance = *(global::LTSApi.CSecurityFtdcQryExcessStockInfoField.__Internal*) native;
        }

        public CSecurityFtdcQryExcessStockInfoField(global::LTSApi.CSecurityFtdcQryExcessStockInfoField _0)
            : this()
        {
            var ____arg0 = _0.__Instance;
            var __arg0 = new global::System.IntPtr(&____arg0);
            fixed (__Internal* __instancePtr = &__instance)
            {
                __Internal.cctor_1(new global::System.IntPtr(__instancePtr), __arg0);
            }
        }

        public sbyte[] BrokerID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.BrokerID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[11];
                        for (int i = 0; i < 11; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.BrokerID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 11; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] InvestorID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.InvestorID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[15];
                        for (int i = 0; i < 15; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.InvestorID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 15; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] ExchangeID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.ExchangeID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[9];
                        for (int i = 0; i < 9; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.ExchangeID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 9; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] InstrumentID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.InstrumentID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[31];
                        for (int i = 0; i < 31; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.InstrumentID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 31; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }
    }

    public unsafe partial struct CSecurityFtdcQryInvestorAccountField
    {
        public partial struct __Internal
        {
            public fixed sbyte BrokerID[11];

            public fixed sbyte InvestorID[15];

            [SuppressUnmanagedCodeSecurity]
            [DllImport("securitymduserapi", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0CSecurityFtdcQryInvestorAccountField@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);
        }

        private CSecurityFtdcQryInvestorAccountField.__Internal __instance;
        internal CSecurityFtdcQryInvestorAccountField.__Internal __Instance { get { return __instance; } }

        internal static global::LTSApi.CSecurityFtdcQryInvestorAccountField __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new CSecurityFtdcQryInvestorAccountField(native.ToPointer(), skipVTables);
        }

        internal static global::LTSApi.CSecurityFtdcQryInvestorAccountField __CreateInstance(global::LTSApi.CSecurityFtdcQryInvestorAccountField.__Internal native, bool skipVTables = false)
        {
            return new CSecurityFtdcQryInvestorAccountField(native, skipVTables);
        }

        private CSecurityFtdcQryInvestorAccountField(global::LTSApi.CSecurityFtdcQryInvestorAccountField.__Internal native, bool skipVTables = false)
            : this()
        {
            __instance = native;
        }

        private CSecurityFtdcQryInvestorAccountField(void* native, bool skipVTables = false) : this()
        {
            __instance = *(global::LTSApi.CSecurityFtdcQryInvestorAccountField.__Internal*) native;
        }

        public CSecurityFtdcQryInvestorAccountField(global::LTSApi.CSecurityFtdcQryInvestorAccountField _0)
            : this()
        {
            var ____arg0 = _0.__Instance;
            var __arg0 = new global::System.IntPtr(&____arg0);
            fixed (__Internal* __instancePtr = &__instance)
            {
                __Internal.cctor_1(new global::System.IntPtr(__instancePtr), __arg0);
            }
        }

        public sbyte[] BrokerID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.BrokerID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[11];
                        for (int i = 0; i < 11; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.BrokerID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 11; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] InvestorID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.InvestorID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[15];
                        for (int i = 0; i < 15; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.InvestorID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 15; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }
    }

    public unsafe partial struct CSecurityFtdcQryETFInstrumentField
    {
        public partial struct __Internal
        {
            public fixed sbyte ExchangeID[9];

            public fixed sbyte ETFInstrumentID[31];

            [SuppressUnmanagedCodeSecurity]
            [DllImport("securitymduserapi", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0CSecurityFtdcQryETFInstrumentField@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);
        }

        private CSecurityFtdcQryETFInstrumentField.__Internal __instance;
        internal CSecurityFtdcQryETFInstrumentField.__Internal __Instance { get { return __instance; } }

        internal static global::LTSApi.CSecurityFtdcQryETFInstrumentField __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new CSecurityFtdcQryETFInstrumentField(native.ToPointer(), skipVTables);
        }

        internal static global::LTSApi.CSecurityFtdcQryETFInstrumentField __CreateInstance(global::LTSApi.CSecurityFtdcQryETFInstrumentField.__Internal native, bool skipVTables = false)
        {
            return new CSecurityFtdcQryETFInstrumentField(native, skipVTables);
        }

        private CSecurityFtdcQryETFInstrumentField(global::LTSApi.CSecurityFtdcQryETFInstrumentField.__Internal native, bool skipVTables = false)
            : this()
        {
            __instance = native;
        }

        private CSecurityFtdcQryETFInstrumentField(void* native, bool skipVTables = false) : this()
        {
            __instance = *(global::LTSApi.CSecurityFtdcQryETFInstrumentField.__Internal*) native;
        }

        public CSecurityFtdcQryETFInstrumentField(global::LTSApi.CSecurityFtdcQryETFInstrumentField _0)
            : this()
        {
            var ____arg0 = _0.__Instance;
            var __arg0 = new global::System.IntPtr(&____arg0);
            fixed (__Internal* __instancePtr = &__instance)
            {
                __Internal.cctor_1(new global::System.IntPtr(__instancePtr), __arg0);
            }
        }

        public sbyte[] ExchangeID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.ExchangeID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[9];
                        for (int i = 0; i < 9; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.ExchangeID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 9; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] ETFInstrumentID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.ETFInstrumentID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[31];
                        for (int i = 0; i < 31; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.ETFInstrumentID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 31; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }
    }

    public unsafe partial struct CSecurityFtdcQryETFBasketField
    {
        public partial struct __Internal
        {
            public fixed sbyte ExchangeID[9];

            public fixed sbyte ETFInstrumentID[31];

            [SuppressUnmanagedCodeSecurity]
            [DllImport("securitymduserapi", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0CSecurityFtdcQryETFBasketField@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);
        }

        private CSecurityFtdcQryETFBasketField.__Internal __instance;
        internal CSecurityFtdcQryETFBasketField.__Internal __Instance { get { return __instance; } }

        internal static global::LTSApi.CSecurityFtdcQryETFBasketField __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new CSecurityFtdcQryETFBasketField(native.ToPointer(), skipVTables);
        }

        internal static global::LTSApi.CSecurityFtdcQryETFBasketField __CreateInstance(global::LTSApi.CSecurityFtdcQryETFBasketField.__Internal native, bool skipVTables = false)
        {
            return new CSecurityFtdcQryETFBasketField(native, skipVTables);
        }

        private CSecurityFtdcQryETFBasketField(global::LTSApi.CSecurityFtdcQryETFBasketField.__Internal native, bool skipVTables = false)
            : this()
        {
            __instance = native;
        }

        private CSecurityFtdcQryETFBasketField(void* native, bool skipVTables = false) : this()
        {
            __instance = *(global::LTSApi.CSecurityFtdcQryETFBasketField.__Internal*) native;
        }

        public CSecurityFtdcQryETFBasketField(global::LTSApi.CSecurityFtdcQryETFBasketField _0)
            : this()
        {
            var ____arg0 = _0.__Instance;
            var __arg0 = new global::System.IntPtr(&____arg0);
            fixed (__Internal* __instancePtr = &__instance)
            {
                __Internal.cctor_1(new global::System.IntPtr(__instancePtr), __arg0);
            }
        }

        public sbyte[] ExchangeID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.ExchangeID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[9];
                        for (int i = 0; i < 9; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.ExchangeID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 9; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] ETFInstrumentID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.ETFInstrumentID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[31];
                        for (int i = 0; i < 31; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.ETFInstrumentID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 31; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }
    }

    public unsafe partial struct CSecurityFtdcQryOFInstrumentField
    {
        public partial struct __Internal
        {
            public fixed sbyte ExchangeID[9];

            public fixed sbyte OFInstrumentID[31];

            [SuppressUnmanagedCodeSecurity]
            [DllImport("securitymduserapi", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0CSecurityFtdcQryOFInstrumentField@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);
        }

        private CSecurityFtdcQryOFInstrumentField.__Internal __instance;
        internal CSecurityFtdcQryOFInstrumentField.__Internal __Instance { get { return __instance; } }

        internal static global::LTSApi.CSecurityFtdcQryOFInstrumentField __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new CSecurityFtdcQryOFInstrumentField(native.ToPointer(), skipVTables);
        }

        internal static global::LTSApi.CSecurityFtdcQryOFInstrumentField __CreateInstance(global::LTSApi.CSecurityFtdcQryOFInstrumentField.__Internal native, bool skipVTables = false)
        {
            return new CSecurityFtdcQryOFInstrumentField(native, skipVTables);
        }

        private CSecurityFtdcQryOFInstrumentField(global::LTSApi.CSecurityFtdcQryOFInstrumentField.__Internal native, bool skipVTables = false)
            : this()
        {
            __instance = native;
        }

        private CSecurityFtdcQryOFInstrumentField(void* native, bool skipVTables = false) : this()
        {
            __instance = *(global::LTSApi.CSecurityFtdcQryOFInstrumentField.__Internal*) native;
        }

        public CSecurityFtdcQryOFInstrumentField(global::LTSApi.CSecurityFtdcQryOFInstrumentField _0)
            : this()
        {
            var ____arg0 = _0.__Instance;
            var __arg0 = new global::System.IntPtr(&____arg0);
            fixed (__Internal* __instancePtr = &__instance)
            {
                __Internal.cctor_1(new global::System.IntPtr(__instancePtr), __arg0);
            }
        }

        public sbyte[] ExchangeID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.ExchangeID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[9];
                        for (int i = 0; i < 9; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.ExchangeID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 9; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] OFInstrumentID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.OFInstrumentID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[31];
                        for (int i = 0; i < 31; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.OFInstrumentID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 31; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }
    }

    public unsafe partial struct CSecurityFtdcQrySFInstrumentField
    {
        public partial struct __Internal
        {
            public fixed sbyte ExchangeID[9];

            public fixed sbyte SFInstrumentID[31];

            [SuppressUnmanagedCodeSecurity]
            [DllImport("securitymduserapi", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0CSecurityFtdcQrySFInstrumentField@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);
        }

        private CSecurityFtdcQrySFInstrumentField.__Internal __instance;
        internal CSecurityFtdcQrySFInstrumentField.__Internal __Instance { get { return __instance; } }

        internal static global::LTSApi.CSecurityFtdcQrySFInstrumentField __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new CSecurityFtdcQrySFInstrumentField(native.ToPointer(), skipVTables);
        }

        internal static global::LTSApi.CSecurityFtdcQrySFInstrumentField __CreateInstance(global::LTSApi.CSecurityFtdcQrySFInstrumentField.__Internal native, bool skipVTables = false)
        {
            return new CSecurityFtdcQrySFInstrumentField(native, skipVTables);
        }

        private CSecurityFtdcQrySFInstrumentField(global::LTSApi.CSecurityFtdcQrySFInstrumentField.__Internal native, bool skipVTables = false)
            : this()
        {
            __instance = native;
        }

        private CSecurityFtdcQrySFInstrumentField(void* native, bool skipVTables = false) : this()
        {
            __instance = *(global::LTSApi.CSecurityFtdcQrySFInstrumentField.__Internal*) native;
        }

        public CSecurityFtdcQrySFInstrumentField(global::LTSApi.CSecurityFtdcQrySFInstrumentField _0)
            : this()
        {
            var ____arg0 = _0.__Instance;
            var __arg0 = new global::System.IntPtr(&____arg0);
            fixed (__Internal* __instancePtr = &__instance)
            {
                __Internal.cctor_1(new global::System.IntPtr(__instancePtr), __arg0);
            }
        }

        public sbyte[] ExchangeID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.ExchangeID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[9];
                        for (int i = 0; i < 9; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.ExchangeID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 9; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] SFInstrumentID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.SFInstrumentID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[31];
                        for (int i = 0; i < 31; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.SFInstrumentID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 31; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }
    }

    public unsafe partial struct CSecurityFtdcQryInstrumentUnitMarginField
    {
        public partial struct __Internal
        {
            public fixed sbyte BrokerID[11];

            public fixed sbyte InvestorID[15];

            public fixed sbyte ExchangeID[9];

            public fixed sbyte InstrumentID[31];

            [SuppressUnmanagedCodeSecurity]
            [DllImport("securitymduserapi", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0CSecurityFtdcQryInstrumentUnitMarginField@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);
        }

        private CSecurityFtdcQryInstrumentUnitMarginField.__Internal __instance;
        internal CSecurityFtdcQryInstrumentUnitMarginField.__Internal __Instance { get { return __instance; } }

        internal static global::LTSApi.CSecurityFtdcQryInstrumentUnitMarginField __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new CSecurityFtdcQryInstrumentUnitMarginField(native.ToPointer(), skipVTables);
        }

        internal static global::LTSApi.CSecurityFtdcQryInstrumentUnitMarginField __CreateInstance(global::LTSApi.CSecurityFtdcQryInstrumentUnitMarginField.__Internal native, bool skipVTables = false)
        {
            return new CSecurityFtdcQryInstrumentUnitMarginField(native, skipVTables);
        }

        private CSecurityFtdcQryInstrumentUnitMarginField(global::LTSApi.CSecurityFtdcQryInstrumentUnitMarginField.__Internal native, bool skipVTables = false)
            : this()
        {
            __instance = native;
        }

        private CSecurityFtdcQryInstrumentUnitMarginField(void* native, bool skipVTables = false) : this()
        {
            __instance = *(global::LTSApi.CSecurityFtdcQryInstrumentUnitMarginField.__Internal*) native;
        }

        public CSecurityFtdcQryInstrumentUnitMarginField(global::LTSApi.CSecurityFtdcQryInstrumentUnitMarginField _0)
            : this()
        {
            var ____arg0 = _0.__Instance;
            var __arg0 = new global::System.IntPtr(&____arg0);
            fixed (__Internal* __instancePtr = &__instance)
            {
                __Internal.cctor_1(new global::System.IntPtr(__instancePtr), __arg0);
            }
        }

        public sbyte[] BrokerID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.BrokerID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[11];
                        for (int i = 0; i < 11; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.BrokerID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 11; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] InvestorID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.InvestorID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[15];
                        for (int i = 0; i < 15; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.InvestorID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 15; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] ExchangeID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.ExchangeID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[9];
                        for (int i = 0; i < 9; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.ExchangeID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 9; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] InstrumentID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.InstrumentID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[31];
                        for (int i = 0; i < 31; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.InstrumentID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 31; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }
    }

    public unsafe partial struct CSecurityFtdcQryOptionsFundLimitParamField
    {
        public partial struct __Internal
        {
            public fixed sbyte BrokerID[11];

            public fixed sbyte InvestorID[15];

            public fixed sbyte ExchangeID[9];

            [SuppressUnmanagedCodeSecurity]
            [DllImport("securitymduserapi", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0CSecurityFtdcQryOptionsFundLimitParamField@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);
        }

        private CSecurityFtdcQryOptionsFundLimitParamField.__Internal __instance;
        internal CSecurityFtdcQryOptionsFundLimitParamField.__Internal __Instance { get { return __instance; } }

        internal static global::LTSApi.CSecurityFtdcQryOptionsFundLimitParamField __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new CSecurityFtdcQryOptionsFundLimitParamField(native.ToPointer(), skipVTables);
        }

        internal static global::LTSApi.CSecurityFtdcQryOptionsFundLimitParamField __CreateInstance(global::LTSApi.CSecurityFtdcQryOptionsFundLimitParamField.__Internal native, bool skipVTables = false)
        {
            return new CSecurityFtdcQryOptionsFundLimitParamField(native, skipVTables);
        }

        private CSecurityFtdcQryOptionsFundLimitParamField(global::LTSApi.CSecurityFtdcQryOptionsFundLimitParamField.__Internal native, bool skipVTables = false)
            : this()
        {
            __instance = native;
        }

        private CSecurityFtdcQryOptionsFundLimitParamField(void* native, bool skipVTables = false) : this()
        {
            __instance = *(global::LTSApi.CSecurityFtdcQryOptionsFundLimitParamField.__Internal*) native;
        }

        public CSecurityFtdcQryOptionsFundLimitParamField(global::LTSApi.CSecurityFtdcQryOptionsFundLimitParamField _0)
            : this()
        {
            var ____arg0 = _0.__Instance;
            var __arg0 = new global::System.IntPtr(&____arg0);
            fixed (__Internal* __instancePtr = &__instance)
            {
                __Internal.cctor_1(new global::System.IntPtr(__instancePtr), __arg0);
            }
        }

        public sbyte[] BrokerID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.BrokerID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[11];
                        for (int i = 0; i < 11; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.BrokerID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 11; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] InvestorID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.InvestorID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[15];
                        for (int i = 0; i < 15; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.InvestorID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 15; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] ExchangeID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.ExchangeID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[9];
                        for (int i = 0; i < 9; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.ExchangeID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 9; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }
    }

    public unsafe partial struct CSecurityFtdcQryInvestorOptionsPositionField
    {
        public partial struct __Internal
        {
            public fixed sbyte BrokerID[11];

            public fixed sbyte InvestorID[15];

            public fixed sbyte ExchangeID[9];

            public fixed sbyte InstrumentID[31];

            [SuppressUnmanagedCodeSecurity]
            [DllImport("securitymduserapi", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0CSecurityFtdcQryInvestorOptionsPositionField@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);
        }

        private CSecurityFtdcQryInvestorOptionsPositionField.__Internal __instance;
        internal CSecurityFtdcQryInvestorOptionsPositionField.__Internal __Instance { get { return __instance; } }

        internal static global::LTSApi.CSecurityFtdcQryInvestorOptionsPositionField __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new CSecurityFtdcQryInvestorOptionsPositionField(native.ToPointer(), skipVTables);
        }

        internal static global::LTSApi.CSecurityFtdcQryInvestorOptionsPositionField __CreateInstance(global::LTSApi.CSecurityFtdcQryInvestorOptionsPositionField.__Internal native, bool skipVTables = false)
        {
            return new CSecurityFtdcQryInvestorOptionsPositionField(native, skipVTables);
        }

        private CSecurityFtdcQryInvestorOptionsPositionField(global::LTSApi.CSecurityFtdcQryInvestorOptionsPositionField.__Internal native, bool skipVTables = false)
            : this()
        {
            __instance = native;
        }

        private CSecurityFtdcQryInvestorOptionsPositionField(void* native, bool skipVTables = false) : this()
        {
            __instance = *(global::LTSApi.CSecurityFtdcQryInvestorOptionsPositionField.__Internal*) native;
        }

        public CSecurityFtdcQryInvestorOptionsPositionField(global::LTSApi.CSecurityFtdcQryInvestorOptionsPositionField _0)
            : this()
        {
            var ____arg0 = _0.__Instance;
            var __arg0 = new global::System.IntPtr(&____arg0);
            fixed (__Internal* __instancePtr = &__instance)
            {
                __Internal.cctor_1(new global::System.IntPtr(__instancePtr), __arg0);
            }
        }

        public sbyte[] BrokerID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.BrokerID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[11];
                        for (int i = 0; i < 11; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.BrokerID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 11; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] InvestorID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.InvestorID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[15];
                        for (int i = 0; i < 15; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.InvestorID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 15; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] ExchangeID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.ExchangeID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[9];
                        for (int i = 0; i < 9; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.ExchangeID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 9; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] InstrumentID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.InstrumentID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[31];
                        for (int i = 0; i < 31; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.InstrumentID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 31; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }
    }

    public unsafe partial struct CSecurityFtdcQryPreDelivInfoField
    {
        public partial struct __Internal
        {
            public fixed sbyte BrokerID[11];

            public fixed sbyte InvestorID[15];

            public fixed sbyte ExchangeID[9];

            public fixed sbyte InstrumentID[31];

            [SuppressUnmanagedCodeSecurity]
            [DllImport("securitymduserapi", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0CSecurityFtdcQryPreDelivInfoField@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);
        }

        private CSecurityFtdcQryPreDelivInfoField.__Internal __instance;
        internal CSecurityFtdcQryPreDelivInfoField.__Internal __Instance { get { return __instance; } }

        internal static global::LTSApi.CSecurityFtdcQryPreDelivInfoField __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new CSecurityFtdcQryPreDelivInfoField(native.ToPointer(), skipVTables);
        }

        internal static global::LTSApi.CSecurityFtdcQryPreDelivInfoField __CreateInstance(global::LTSApi.CSecurityFtdcQryPreDelivInfoField.__Internal native, bool skipVTables = false)
        {
            return new CSecurityFtdcQryPreDelivInfoField(native, skipVTables);
        }

        private CSecurityFtdcQryPreDelivInfoField(global::LTSApi.CSecurityFtdcQryPreDelivInfoField.__Internal native, bool skipVTables = false)
            : this()
        {
            __instance = native;
        }

        private CSecurityFtdcQryPreDelivInfoField(void* native, bool skipVTables = false) : this()
        {
            __instance = *(global::LTSApi.CSecurityFtdcQryPreDelivInfoField.__Internal*) native;
        }

        public CSecurityFtdcQryPreDelivInfoField(global::LTSApi.CSecurityFtdcQryPreDelivInfoField _0)
            : this()
        {
            var ____arg0 = _0.__Instance;
            var __arg0 = new global::System.IntPtr(&____arg0);
            fixed (__Internal* __instancePtr = &__instance)
            {
                __Internal.cctor_1(new global::System.IntPtr(__instancePtr), __arg0);
            }
        }

        public sbyte[] BrokerID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.BrokerID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[11];
                        for (int i = 0; i < 11; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.BrokerID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 11; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] InvestorID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.InvestorID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[15];
                        for (int i = 0; i < 15; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.InvestorID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 15; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] ExchangeID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.ExchangeID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[9];
                        for (int i = 0; i < 9; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.ExchangeID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 9; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] InstrumentID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.InstrumentID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[31];
                        for (int i = 0; i < 31; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.InstrumentID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 31; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }
    }

    public unsafe partial struct CSecurityFtdcQryCreditStockAssignInfoField
    {
        public partial struct __Internal
        {
            public fixed sbyte BrokerID[11];

            public fixed sbyte InvestorID[15];

            public fixed sbyte ExchangeID[9];

            public fixed sbyte InstrumentID[31];

            [SuppressUnmanagedCodeSecurity]
            [DllImport("securitymduserapi", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0CSecurityFtdcQryCreditStockAssignInfoField@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);
        }

        private CSecurityFtdcQryCreditStockAssignInfoField.__Internal __instance;
        internal CSecurityFtdcQryCreditStockAssignInfoField.__Internal __Instance { get { return __instance; } }

        internal static global::LTSApi.CSecurityFtdcQryCreditStockAssignInfoField __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new CSecurityFtdcQryCreditStockAssignInfoField(native.ToPointer(), skipVTables);
        }

        internal static global::LTSApi.CSecurityFtdcQryCreditStockAssignInfoField __CreateInstance(global::LTSApi.CSecurityFtdcQryCreditStockAssignInfoField.__Internal native, bool skipVTables = false)
        {
            return new CSecurityFtdcQryCreditStockAssignInfoField(native, skipVTables);
        }

        private CSecurityFtdcQryCreditStockAssignInfoField(global::LTSApi.CSecurityFtdcQryCreditStockAssignInfoField.__Internal native, bool skipVTables = false)
            : this()
        {
            __instance = native;
        }

        private CSecurityFtdcQryCreditStockAssignInfoField(void* native, bool skipVTables = false) : this()
        {
            __instance = *(global::LTSApi.CSecurityFtdcQryCreditStockAssignInfoField.__Internal*) native;
        }

        public CSecurityFtdcQryCreditStockAssignInfoField(global::LTSApi.CSecurityFtdcQryCreditStockAssignInfoField _0)
            : this()
        {
            var ____arg0 = _0.__Instance;
            var __arg0 = new global::System.IntPtr(&____arg0);
            fixed (__Internal* __instancePtr = &__instance)
            {
                __Internal.cctor_1(new global::System.IntPtr(__instancePtr), __arg0);
            }
        }

        public sbyte[] BrokerID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.BrokerID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[11];
                        for (int i = 0; i < 11; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.BrokerID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 11; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] InvestorID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.InvestorID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[15];
                        for (int i = 0; i < 15; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.InvestorID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 15; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] ExchangeID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.ExchangeID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[9];
                        for (int i = 0; i < 9; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.ExchangeID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 9; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] InstrumentID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.InstrumentID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[31];
                        for (int i = 0; i < 31; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.InstrumentID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 31; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }
    }

    public unsafe partial struct CSecurityFtdcQryCreditCashAssignInfoField
    {
        public partial struct __Internal
        {
            public fixed sbyte BrokerID[11];

            public fixed sbyte InvestorID[15];

            [SuppressUnmanagedCodeSecurity]
            [DllImport("securitymduserapi", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0CSecurityFtdcQryCreditCashAssignInfoField@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);
        }

        private CSecurityFtdcQryCreditCashAssignInfoField.__Internal __instance;
        internal CSecurityFtdcQryCreditCashAssignInfoField.__Internal __Instance { get { return __instance; } }

        internal static global::LTSApi.CSecurityFtdcQryCreditCashAssignInfoField __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new CSecurityFtdcQryCreditCashAssignInfoField(native.ToPointer(), skipVTables);
        }

        internal static global::LTSApi.CSecurityFtdcQryCreditCashAssignInfoField __CreateInstance(global::LTSApi.CSecurityFtdcQryCreditCashAssignInfoField.__Internal native, bool skipVTables = false)
        {
            return new CSecurityFtdcQryCreditCashAssignInfoField(native, skipVTables);
        }

        private CSecurityFtdcQryCreditCashAssignInfoField(global::LTSApi.CSecurityFtdcQryCreditCashAssignInfoField.__Internal native, bool skipVTables = false)
            : this()
        {
            __instance = native;
        }

        private CSecurityFtdcQryCreditCashAssignInfoField(void* native, bool skipVTables = false) : this()
        {
            __instance = *(global::LTSApi.CSecurityFtdcQryCreditCashAssignInfoField.__Internal*) native;
        }

        public CSecurityFtdcQryCreditCashAssignInfoField(global::LTSApi.CSecurityFtdcQryCreditCashAssignInfoField _0)
            : this()
        {
            var ____arg0 = _0.__Instance;
            var __arg0 = new global::System.IntPtr(&____arg0);
            fixed (__Internal* __instancePtr = &__instance)
            {
                __Internal.cctor_1(new global::System.IntPtr(__instancePtr), __arg0);
            }
        }

        public sbyte[] BrokerID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.BrokerID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[11];
                        for (int i = 0; i < 11; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.BrokerID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 11; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] InvestorID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.InvestorID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[15];
                        for (int i = 0; i < 15; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.InvestorID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 15; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }
    }

    public unsafe partial struct CSecurityFtdcQryConversionRateField
    {
        public partial struct __Internal
        {
            public fixed sbyte ExchangeID[9];

            public fixed sbyte InstrumentID[31];

            [SuppressUnmanagedCodeSecurity]
            [DllImport("securitymduserapi", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0CSecurityFtdcQryConversionRateField@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);
        }

        private CSecurityFtdcQryConversionRateField.__Internal __instance;
        internal CSecurityFtdcQryConversionRateField.__Internal __Instance { get { return __instance; } }

        internal static global::LTSApi.CSecurityFtdcQryConversionRateField __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new CSecurityFtdcQryConversionRateField(native.ToPointer(), skipVTables);
        }

        internal static global::LTSApi.CSecurityFtdcQryConversionRateField __CreateInstance(global::LTSApi.CSecurityFtdcQryConversionRateField.__Internal native, bool skipVTables = false)
        {
            return new CSecurityFtdcQryConversionRateField(native, skipVTables);
        }

        private CSecurityFtdcQryConversionRateField(global::LTSApi.CSecurityFtdcQryConversionRateField.__Internal native, bool skipVTables = false)
            : this()
        {
            __instance = native;
        }

        private CSecurityFtdcQryConversionRateField(void* native, bool skipVTables = false) : this()
        {
            __instance = *(global::LTSApi.CSecurityFtdcQryConversionRateField.__Internal*) native;
        }

        public CSecurityFtdcQryConversionRateField(global::LTSApi.CSecurityFtdcQryConversionRateField _0)
            : this()
        {
            var ____arg0 = _0.__Instance;
            var __arg0 = new global::System.IntPtr(&____arg0);
            fixed (__Internal* __instancePtr = &__instance)
            {
                __Internal.cctor_1(new global::System.IntPtr(__instancePtr), __arg0);
            }
        }

        public sbyte[] ExchangeID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.ExchangeID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[9];
                        for (int i = 0; i < 9; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.ExchangeID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 9; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] InstrumentID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.InstrumentID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[31];
                        for (int i = 0; i < 31; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.InstrumentID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 31; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }
    }

    public unsafe partial struct CSecurityFtdcQryHisCreditDebtInfoField
    {
        public partial struct __Internal
        {
            public fixed sbyte BrokerID[11];

            public fixed sbyte InvestorID[15];

            public fixed sbyte ExchangeID[9];

            public fixed sbyte InstrumentID[31];

            [SuppressUnmanagedCodeSecurity]
            [DllImport("securitymduserapi", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0CSecurityFtdcQryHisCreditDebtInfoField@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);
        }

        private CSecurityFtdcQryHisCreditDebtInfoField.__Internal __instance;
        internal CSecurityFtdcQryHisCreditDebtInfoField.__Internal __Instance { get { return __instance; } }

        internal static global::LTSApi.CSecurityFtdcQryHisCreditDebtInfoField __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new CSecurityFtdcQryHisCreditDebtInfoField(native.ToPointer(), skipVTables);
        }

        internal static global::LTSApi.CSecurityFtdcQryHisCreditDebtInfoField __CreateInstance(global::LTSApi.CSecurityFtdcQryHisCreditDebtInfoField.__Internal native, bool skipVTables = false)
        {
            return new CSecurityFtdcQryHisCreditDebtInfoField(native, skipVTables);
        }

        private CSecurityFtdcQryHisCreditDebtInfoField(global::LTSApi.CSecurityFtdcQryHisCreditDebtInfoField.__Internal native, bool skipVTables = false)
            : this()
        {
            __instance = native;
        }

        private CSecurityFtdcQryHisCreditDebtInfoField(void* native, bool skipVTables = false) : this()
        {
            __instance = *(global::LTSApi.CSecurityFtdcQryHisCreditDebtInfoField.__Internal*) native;
        }

        public CSecurityFtdcQryHisCreditDebtInfoField(global::LTSApi.CSecurityFtdcQryHisCreditDebtInfoField _0)
            : this()
        {
            var ____arg0 = _0.__Instance;
            var __arg0 = new global::System.IntPtr(&____arg0);
            fixed (__Internal* __instancePtr = &__instance)
            {
                __Internal.cctor_1(new global::System.IntPtr(__instancePtr), __arg0);
            }
        }

        public sbyte[] BrokerID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.BrokerID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[11];
                        for (int i = 0; i < 11; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.BrokerID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 11; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] InvestorID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.InvestorID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[15];
                        for (int i = 0; i < 15; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.InvestorID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 15; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] ExchangeID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.ExchangeID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[9];
                        for (int i = 0; i < 9; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.ExchangeID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 9; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] InstrumentID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.InstrumentID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[31];
                        for (int i = 0; i < 31; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.InstrumentID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 31; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }
    }

    public unsafe partial struct CSecurityFtdcQryMarketDataStaticInfoField
    {
        public partial struct __Internal
        {
            public fixed sbyte ExchangeID[9];

            public fixed sbyte InstrumentID[31];

            [SuppressUnmanagedCodeSecurity]
            [DllImport("securitymduserapi", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0CSecurityFtdcQryMarketDataStaticInfoField@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);
        }

        private CSecurityFtdcQryMarketDataStaticInfoField.__Internal __instance;
        internal CSecurityFtdcQryMarketDataStaticInfoField.__Internal __Instance { get { return __instance; } }

        internal static global::LTSApi.CSecurityFtdcQryMarketDataStaticInfoField __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new CSecurityFtdcQryMarketDataStaticInfoField(native.ToPointer(), skipVTables);
        }

        internal static global::LTSApi.CSecurityFtdcQryMarketDataStaticInfoField __CreateInstance(global::LTSApi.CSecurityFtdcQryMarketDataStaticInfoField.__Internal native, bool skipVTables = false)
        {
            return new CSecurityFtdcQryMarketDataStaticInfoField(native, skipVTables);
        }

        private CSecurityFtdcQryMarketDataStaticInfoField(global::LTSApi.CSecurityFtdcQryMarketDataStaticInfoField.__Internal native, bool skipVTables = false)
            : this()
        {
            __instance = native;
        }

        private CSecurityFtdcQryMarketDataStaticInfoField(void* native, bool skipVTables = false) : this()
        {
            __instance = *(global::LTSApi.CSecurityFtdcQryMarketDataStaticInfoField.__Internal*) native;
        }

        public CSecurityFtdcQryMarketDataStaticInfoField(global::LTSApi.CSecurityFtdcQryMarketDataStaticInfoField _0)
            : this()
        {
            var ____arg0 = _0.__Instance;
            var __arg0 = new global::System.IntPtr(&____arg0);
            fixed (__Internal* __instancePtr = &__instance)
            {
                __Internal.cctor_1(new global::System.IntPtr(__instancePtr), __arg0);
            }
        }

        public sbyte[] ExchangeID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.ExchangeID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[9];
                        for (int i = 0; i < 9; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.ExchangeID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 9; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] InstrumentID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.InstrumentID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[31];
                        for (int i = 0; i < 31; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.InstrumentID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 31; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }
    }

    public unsafe partial struct CSecurityFtdcQryExpireRepurchInfoField
    {
        public partial struct __Internal
        {
            public fixed sbyte BrokerID[11];

            public fixed sbyte InvestorID[15];

            [SuppressUnmanagedCodeSecurity]
            [DllImport("securitymduserapi", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0CSecurityFtdcQryExpireRepurchInfoField@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);
        }

        private CSecurityFtdcQryExpireRepurchInfoField.__Internal __instance;
        internal CSecurityFtdcQryExpireRepurchInfoField.__Internal __Instance { get { return __instance; } }

        internal static global::LTSApi.CSecurityFtdcQryExpireRepurchInfoField __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new CSecurityFtdcQryExpireRepurchInfoField(native.ToPointer(), skipVTables);
        }

        internal static global::LTSApi.CSecurityFtdcQryExpireRepurchInfoField __CreateInstance(global::LTSApi.CSecurityFtdcQryExpireRepurchInfoField.__Internal native, bool skipVTables = false)
        {
            return new CSecurityFtdcQryExpireRepurchInfoField(native, skipVTables);
        }

        private CSecurityFtdcQryExpireRepurchInfoField(global::LTSApi.CSecurityFtdcQryExpireRepurchInfoField.__Internal native, bool skipVTables = false)
            : this()
        {
            __instance = native;
        }

        private CSecurityFtdcQryExpireRepurchInfoField(void* native, bool skipVTables = false) : this()
        {
            __instance = *(global::LTSApi.CSecurityFtdcQryExpireRepurchInfoField.__Internal*) native;
        }

        public CSecurityFtdcQryExpireRepurchInfoField(global::LTSApi.CSecurityFtdcQryExpireRepurchInfoField _0)
            : this()
        {
            var ____arg0 = _0.__Instance;
            var __arg0 = new global::System.IntPtr(&____arg0);
            fixed (__Internal* __instancePtr = &__instance)
            {
                __Internal.cctor_1(new global::System.IntPtr(__instancePtr), __arg0);
            }
        }

        public sbyte[] BrokerID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.BrokerID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[11];
                        for (int i = 0; i < 11; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.BrokerID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 11; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] InvestorID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.InvestorID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[15];
                        for (int i = 0; i < 15; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.InvestorID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 15; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }
    }

    public unsafe partial struct CSecurityFtdcQryBondPledgeRateField
    {
        public partial struct __Internal
        {
            public fixed sbyte ExchangeID[9];

            public fixed sbyte InstrumentID[31];

            [SuppressUnmanagedCodeSecurity]
            [DllImport("securitymduserapi", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0CSecurityFtdcQryBondPledgeRateField@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);
        }

        private CSecurityFtdcQryBondPledgeRateField.__Internal __instance;
        internal CSecurityFtdcQryBondPledgeRateField.__Internal __Instance { get { return __instance; } }

        internal static global::LTSApi.CSecurityFtdcQryBondPledgeRateField __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new CSecurityFtdcQryBondPledgeRateField(native.ToPointer(), skipVTables);
        }

        internal static global::LTSApi.CSecurityFtdcQryBondPledgeRateField __CreateInstance(global::LTSApi.CSecurityFtdcQryBondPledgeRateField.__Internal native, bool skipVTables = false)
        {
            return new CSecurityFtdcQryBondPledgeRateField(native, skipVTables);
        }

        private CSecurityFtdcQryBondPledgeRateField(global::LTSApi.CSecurityFtdcQryBondPledgeRateField.__Internal native, bool skipVTables = false)
            : this()
        {
            __instance = native;
        }

        private CSecurityFtdcQryBondPledgeRateField(void* native, bool skipVTables = false) : this()
        {
            __instance = *(global::LTSApi.CSecurityFtdcQryBondPledgeRateField.__Internal*) native;
        }

        public CSecurityFtdcQryBondPledgeRateField(global::LTSApi.CSecurityFtdcQryBondPledgeRateField _0)
            : this()
        {
            var ____arg0 = _0.__Instance;
            var __arg0 = new global::System.IntPtr(&____arg0);
            fixed (__Internal* __instancePtr = &__instance)
            {
                __Internal.cctor_1(new global::System.IntPtr(__instancePtr), __arg0);
            }
        }

        public sbyte[] ExchangeID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.ExchangeID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[9];
                        for (int i = 0; i < 9; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.ExchangeID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 9; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] InstrumentID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.InstrumentID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[31];
                        for (int i = 0; i < 31; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.InstrumentID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 31; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }
    }

    public unsafe partial struct CSecurityFtdcQryPledgeBondField
    {
        public partial struct __Internal
        {
            public fixed sbyte ExchangeID[9];

            public fixed sbyte InstrumentID[31];

            [SuppressUnmanagedCodeSecurity]
            [DllImport("securitymduserapi", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0CSecurityFtdcQryPledgeBondField@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);
        }

        private CSecurityFtdcQryPledgeBondField.__Internal __instance;
        internal CSecurityFtdcQryPledgeBondField.__Internal __Instance { get { return __instance; } }

        internal static global::LTSApi.CSecurityFtdcQryPledgeBondField __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new CSecurityFtdcQryPledgeBondField(native.ToPointer(), skipVTables);
        }

        internal static global::LTSApi.CSecurityFtdcQryPledgeBondField __CreateInstance(global::LTSApi.CSecurityFtdcQryPledgeBondField.__Internal native, bool skipVTables = false)
        {
            return new CSecurityFtdcQryPledgeBondField(native, skipVTables);
        }

        private CSecurityFtdcQryPledgeBondField(global::LTSApi.CSecurityFtdcQryPledgeBondField.__Internal native, bool skipVTables = false)
            : this()
        {
            __instance = native;
        }

        private CSecurityFtdcQryPledgeBondField(void* native, bool skipVTables = false) : this()
        {
            __instance = *(global::LTSApi.CSecurityFtdcQryPledgeBondField.__Internal*) native;
        }

        public CSecurityFtdcQryPledgeBondField(global::LTSApi.CSecurityFtdcQryPledgeBondField _0)
            : this()
        {
            var ____arg0 = _0.__Instance;
            var __arg0 = new global::System.IntPtr(&____arg0);
            fixed (__Internal* __instancePtr = &__instance)
            {
                __Internal.cctor_1(new global::System.IntPtr(__instancePtr), __arg0);
            }
        }

        public sbyte[] ExchangeID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.ExchangeID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[9];
                        for (int i = 0; i < 9; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.ExchangeID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 9; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] InstrumentID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.InstrumentID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[31];
                        for (int i = 0; i < 31; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.InstrumentID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 31; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }
    }

    public unsafe partial struct CSecurityFtdcQryTraderOfferField
    {
        public partial struct __Internal
        {
            public fixed sbyte ExchangeID[9];

            public fixed sbyte ParticipantID[11];

            public fixed sbyte BranchPBU[21];

            [SuppressUnmanagedCodeSecurity]
            [DllImport("securitymduserapi", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0CSecurityFtdcQryTraderOfferField@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);
        }

        private CSecurityFtdcQryTraderOfferField.__Internal __instance;
        internal CSecurityFtdcQryTraderOfferField.__Internal __Instance { get { return __instance; } }

        internal static global::LTSApi.CSecurityFtdcQryTraderOfferField __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new CSecurityFtdcQryTraderOfferField(native.ToPointer(), skipVTables);
        }

        internal static global::LTSApi.CSecurityFtdcQryTraderOfferField __CreateInstance(global::LTSApi.CSecurityFtdcQryTraderOfferField.__Internal native, bool skipVTables = false)
        {
            return new CSecurityFtdcQryTraderOfferField(native, skipVTables);
        }

        private CSecurityFtdcQryTraderOfferField(global::LTSApi.CSecurityFtdcQryTraderOfferField.__Internal native, bool skipVTables = false)
            : this()
        {
            __instance = native;
        }

        private CSecurityFtdcQryTraderOfferField(void* native, bool skipVTables = false) : this()
        {
            __instance = *(global::LTSApi.CSecurityFtdcQryTraderOfferField.__Internal*) native;
        }

        public CSecurityFtdcQryTraderOfferField(global::LTSApi.CSecurityFtdcQryTraderOfferField _0)
            : this()
        {
            var ____arg0 = _0.__Instance;
            var __arg0 = new global::System.IntPtr(&____arg0);
            fixed (__Internal* __instancePtr = &__instance)
            {
                __Internal.cctor_1(new global::System.IntPtr(__instancePtr), __arg0);
            }
        }

        public sbyte[] ExchangeID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.ExchangeID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[9];
                        for (int i = 0; i < 9; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.ExchangeID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 9; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] ParticipantID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.ParticipantID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[11];
                        for (int i = 0; i < 11; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.ParticipantID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 11; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] BranchPBU
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.BranchPBU)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[21];
                        for (int i = 0; i < 21; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.BranchPBU)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 21; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }
    }

    public unsafe partial struct CSecurityFtdcQryMDTraderOfferField
    {
        public partial struct __Internal
        {
            public fixed sbyte ExchangeID[9];

            public fixed sbyte ParticipantID[11];

            public fixed sbyte BranchPBU[21];

            [SuppressUnmanagedCodeSecurity]
            [DllImport("securitymduserapi", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0CSecurityFtdcQryMDTraderOfferField@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);
        }

        private CSecurityFtdcQryMDTraderOfferField.__Internal __instance;
        internal CSecurityFtdcQryMDTraderOfferField.__Internal __Instance { get { return __instance; } }

        internal static global::LTSApi.CSecurityFtdcQryMDTraderOfferField __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new CSecurityFtdcQryMDTraderOfferField(native.ToPointer(), skipVTables);
        }

        internal static global::LTSApi.CSecurityFtdcQryMDTraderOfferField __CreateInstance(global::LTSApi.CSecurityFtdcQryMDTraderOfferField.__Internal native, bool skipVTables = false)
        {
            return new CSecurityFtdcQryMDTraderOfferField(native, skipVTables);
        }

        private CSecurityFtdcQryMDTraderOfferField(global::LTSApi.CSecurityFtdcQryMDTraderOfferField.__Internal native, bool skipVTables = false)
            : this()
        {
            __instance = native;
        }

        private CSecurityFtdcQryMDTraderOfferField(void* native, bool skipVTables = false) : this()
        {
            __instance = *(global::LTSApi.CSecurityFtdcQryMDTraderOfferField.__Internal*) native;
        }

        public CSecurityFtdcQryMDTraderOfferField(global::LTSApi.CSecurityFtdcQryMDTraderOfferField _0)
            : this()
        {
            var ____arg0 = _0.__Instance;
            var __arg0 = new global::System.IntPtr(&____arg0);
            fixed (__Internal* __instancePtr = &__instance)
            {
                __Internal.cctor_1(new global::System.IntPtr(__instancePtr), __arg0);
            }
        }

        public sbyte[] ExchangeID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.ExchangeID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[9];
                        for (int i = 0; i < 9; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.ExchangeID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 9; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] ParticipantID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.ParticipantID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[11];
                        for (int i = 0; i < 11; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.ParticipantID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 11; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] BranchPBU
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.BranchPBU)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[21];
                        for (int i = 0; i < 21; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.BranchPBU)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 21; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }
    }

    public unsafe partial struct CSecurityFtdcQryFrontStatusField
    {
        public partial struct __Internal
        {
            public int FrontID;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("securitymduserapi", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0CSecurityFtdcQryFrontStatusField@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);
        }

        private CSecurityFtdcQryFrontStatusField.__Internal __instance;
        internal CSecurityFtdcQryFrontStatusField.__Internal __Instance { get { return __instance; } }

        internal static global::LTSApi.CSecurityFtdcQryFrontStatusField __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new CSecurityFtdcQryFrontStatusField(native.ToPointer(), skipVTables);
        }

        internal static global::LTSApi.CSecurityFtdcQryFrontStatusField __CreateInstance(global::LTSApi.CSecurityFtdcQryFrontStatusField.__Internal native, bool skipVTables = false)
        {
            return new CSecurityFtdcQryFrontStatusField(native, skipVTables);
        }

        private CSecurityFtdcQryFrontStatusField(global::LTSApi.CSecurityFtdcQryFrontStatusField.__Internal native, bool skipVTables = false)
            : this()
        {
            __instance = native;
        }

        private CSecurityFtdcQryFrontStatusField(void* native, bool skipVTables = false) : this()
        {
            __instance = *(global::LTSApi.CSecurityFtdcQryFrontStatusField.__Internal*) native;
        }

        public CSecurityFtdcQryFrontStatusField(global::LTSApi.CSecurityFtdcQryFrontStatusField _0)
            : this()
        {
            var ____arg0 = _0.__Instance;
            var __arg0 = new global::System.IntPtr(&____arg0);
            fixed (__Internal* __instancePtr = &__instance)
            {
                __Internal.cctor_1(new global::System.IntPtr(__instancePtr), __arg0);
            }
        }

        public int FrontID
        {
            get
            {
                return __instance.FrontID;
            }

            set
            {
                __instance.FrontID = value;
            }
        }
    }

    public unsafe partial struct CSecurityFtdcQryUserSessionField
    {
        public partial struct __Internal
        {
            public int FrontID;

            public int SessionID;

            public fixed sbyte BrokerID[11];

            public fixed sbyte UserID[16];

            [SuppressUnmanagedCodeSecurity]
            [DllImport("securitymduserapi", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0CSecurityFtdcQryUserSessionField@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);
        }

        private CSecurityFtdcQryUserSessionField.__Internal __instance;
        internal CSecurityFtdcQryUserSessionField.__Internal __Instance { get { return __instance; } }

        internal static global::LTSApi.CSecurityFtdcQryUserSessionField __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new CSecurityFtdcQryUserSessionField(native.ToPointer(), skipVTables);
        }

        internal static global::LTSApi.CSecurityFtdcQryUserSessionField __CreateInstance(global::LTSApi.CSecurityFtdcQryUserSessionField.__Internal native, bool skipVTables = false)
        {
            return new CSecurityFtdcQryUserSessionField(native, skipVTables);
        }

        private CSecurityFtdcQryUserSessionField(global::LTSApi.CSecurityFtdcQryUserSessionField.__Internal native, bool skipVTables = false)
            : this()
        {
            __instance = native;
        }

        private CSecurityFtdcQryUserSessionField(void* native, bool skipVTables = false) : this()
        {
            __instance = *(global::LTSApi.CSecurityFtdcQryUserSessionField.__Internal*) native;
        }

        public CSecurityFtdcQryUserSessionField(global::LTSApi.CSecurityFtdcQryUserSessionField _0)
            : this()
        {
            var ____arg0 = _0.__Instance;
            var __arg0 = new global::System.IntPtr(&____arg0);
            fixed (__Internal* __instancePtr = &__instance)
            {
                __Internal.cctor_1(new global::System.IntPtr(__instancePtr), __arg0);
            }
        }

        public int FrontID
        {
            get
            {
                return __instance.FrontID;
            }

            set
            {
                __instance.FrontID = value;
            }
        }

        public int SessionID
        {
            get
            {
                return __instance.SessionID;
            }

            set
            {
                __instance.SessionID = value;
            }
        }

        public sbyte[] BrokerID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.BrokerID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[11];
                        for (int i = 0; i < 11; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.BrokerID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 11; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] UserID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.UserID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[16];
                        for (int i = 0; i < 16; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.UserID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 16; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }
    }

    public unsafe partial struct CSecurityFtdcQryOrderField
    {
        public partial struct __Internal
        {
            public fixed sbyte BrokerID[11];

            public fixed sbyte InvestorID[15];

            public fixed sbyte InstrumentID[31];

            public fixed sbyte ExchangeID[9];

            public fixed sbyte OrderSysID[21];

            public fixed sbyte InsertTimeStart[9];

            public fixed sbyte InsertTimeEnd[9];

            [SuppressUnmanagedCodeSecurity]
            [DllImport("securitymduserapi", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0CSecurityFtdcQryOrderField@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);
        }

        private CSecurityFtdcQryOrderField.__Internal __instance;
        internal CSecurityFtdcQryOrderField.__Internal __Instance { get { return __instance; } }

        internal static global::LTSApi.CSecurityFtdcQryOrderField __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new CSecurityFtdcQryOrderField(native.ToPointer(), skipVTables);
        }

        internal static global::LTSApi.CSecurityFtdcQryOrderField __CreateInstance(global::LTSApi.CSecurityFtdcQryOrderField.__Internal native, bool skipVTables = false)
        {
            return new CSecurityFtdcQryOrderField(native, skipVTables);
        }

        private CSecurityFtdcQryOrderField(global::LTSApi.CSecurityFtdcQryOrderField.__Internal native, bool skipVTables = false)
            : this()
        {
            __instance = native;
        }

        private CSecurityFtdcQryOrderField(void* native, bool skipVTables = false) : this()
        {
            __instance = *(global::LTSApi.CSecurityFtdcQryOrderField.__Internal*) native;
        }

        public CSecurityFtdcQryOrderField(global::LTSApi.CSecurityFtdcQryOrderField _0)
            : this()
        {
            var ____arg0 = _0.__Instance;
            var __arg0 = new global::System.IntPtr(&____arg0);
            fixed (__Internal* __instancePtr = &__instance)
            {
                __Internal.cctor_1(new global::System.IntPtr(__instancePtr), __arg0);
            }
        }

        public sbyte[] BrokerID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.BrokerID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[11];
                        for (int i = 0; i < 11; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.BrokerID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 11; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] InvestorID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.InvestorID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[15];
                        for (int i = 0; i < 15; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.InvestorID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 15; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] InstrumentID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.InstrumentID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[31];
                        for (int i = 0; i < 31; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.InstrumentID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 31; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] ExchangeID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.ExchangeID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[9];
                        for (int i = 0; i < 9; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.ExchangeID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 9; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] OrderSysID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.OrderSysID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[21];
                        for (int i = 0; i < 21; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.OrderSysID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 21; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] InsertTimeStart
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.InsertTimeStart)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[9];
                        for (int i = 0; i < 9; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.InsertTimeStart)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 9; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] InsertTimeEnd
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.InsertTimeEnd)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[9];
                        for (int i = 0; i < 9; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.InsertTimeEnd)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 9; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }
    }

    public unsafe partial struct CSecurityFtdcQryOrderActionField
    {
        public partial struct __Internal
        {
            public fixed sbyte BrokerID[11];

            public fixed sbyte InvestorID[15];

            public fixed sbyte ExchangeID[9];

            [SuppressUnmanagedCodeSecurity]
            [DllImport("securitymduserapi", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0CSecurityFtdcQryOrderActionField@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);
        }

        private CSecurityFtdcQryOrderActionField.__Internal __instance;
        internal CSecurityFtdcQryOrderActionField.__Internal __Instance { get { return __instance; } }

        internal static global::LTSApi.CSecurityFtdcQryOrderActionField __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new CSecurityFtdcQryOrderActionField(native.ToPointer(), skipVTables);
        }

        internal static global::LTSApi.CSecurityFtdcQryOrderActionField __CreateInstance(global::LTSApi.CSecurityFtdcQryOrderActionField.__Internal native, bool skipVTables = false)
        {
            return new CSecurityFtdcQryOrderActionField(native, skipVTables);
        }

        private CSecurityFtdcQryOrderActionField(global::LTSApi.CSecurityFtdcQryOrderActionField.__Internal native, bool skipVTables = false)
            : this()
        {
            __instance = native;
        }

        private CSecurityFtdcQryOrderActionField(void* native, bool skipVTables = false) : this()
        {
            __instance = *(global::LTSApi.CSecurityFtdcQryOrderActionField.__Internal*) native;
        }

        public CSecurityFtdcQryOrderActionField(global::LTSApi.CSecurityFtdcQryOrderActionField _0)
            : this()
        {
            var ____arg0 = _0.__Instance;
            var __arg0 = new global::System.IntPtr(&____arg0);
            fixed (__Internal* __instancePtr = &__instance)
            {
                __Internal.cctor_1(new global::System.IntPtr(__instancePtr), __arg0);
            }
        }

        public sbyte[] BrokerID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.BrokerID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[11];
                        for (int i = 0; i < 11; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.BrokerID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 11; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] InvestorID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.InvestorID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[15];
                        for (int i = 0; i < 15; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.InvestorID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 15; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] ExchangeID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.ExchangeID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[9];
                        for (int i = 0; i < 9; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.ExchangeID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 9; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }
    }

    public unsafe partial struct CSecurityFtdcQryErrOrderField
    {
        public partial struct __Internal
        {
            public fixed sbyte BrokerID[11];

            public fixed sbyte InvestorID[15];

            [SuppressUnmanagedCodeSecurity]
            [DllImport("securitymduserapi", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0CSecurityFtdcQryErrOrderField@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);
        }

        private CSecurityFtdcQryErrOrderField.__Internal __instance;
        internal CSecurityFtdcQryErrOrderField.__Internal __Instance { get { return __instance; } }

        internal static global::LTSApi.CSecurityFtdcQryErrOrderField __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new CSecurityFtdcQryErrOrderField(native.ToPointer(), skipVTables);
        }

        internal static global::LTSApi.CSecurityFtdcQryErrOrderField __CreateInstance(global::LTSApi.CSecurityFtdcQryErrOrderField.__Internal native, bool skipVTables = false)
        {
            return new CSecurityFtdcQryErrOrderField(native, skipVTables);
        }

        private CSecurityFtdcQryErrOrderField(global::LTSApi.CSecurityFtdcQryErrOrderField.__Internal native, bool skipVTables = false)
            : this()
        {
            __instance = native;
        }

        private CSecurityFtdcQryErrOrderField(void* native, bool skipVTables = false) : this()
        {
            __instance = *(global::LTSApi.CSecurityFtdcQryErrOrderField.__Internal*) native;
        }

        public CSecurityFtdcQryErrOrderField(global::LTSApi.CSecurityFtdcQryErrOrderField _0)
            : this()
        {
            var ____arg0 = _0.__Instance;
            var __arg0 = new global::System.IntPtr(&____arg0);
            fixed (__Internal* __instancePtr = &__instance)
            {
                __Internal.cctor_1(new global::System.IntPtr(__instancePtr), __arg0);
            }
        }

        public sbyte[] BrokerID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.BrokerID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[11];
                        for (int i = 0; i < 11; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.BrokerID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 11; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] InvestorID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.InvestorID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[15];
                        for (int i = 0; i < 15; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.InvestorID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 15; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }
    }

    public unsafe partial struct CSecurityFtdcQryErrOrderActionField
    {
        public partial struct __Internal
        {
            public fixed sbyte BrokerID[11];

            public fixed sbyte InvestorID[15];

            [SuppressUnmanagedCodeSecurity]
            [DllImport("securitymduserapi", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0CSecurityFtdcQryErrOrderActionField@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);
        }

        private CSecurityFtdcQryErrOrderActionField.__Internal __instance;
        internal CSecurityFtdcQryErrOrderActionField.__Internal __Instance { get { return __instance; } }

        internal static global::LTSApi.CSecurityFtdcQryErrOrderActionField __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new CSecurityFtdcQryErrOrderActionField(native.ToPointer(), skipVTables);
        }

        internal static global::LTSApi.CSecurityFtdcQryErrOrderActionField __CreateInstance(global::LTSApi.CSecurityFtdcQryErrOrderActionField.__Internal native, bool skipVTables = false)
        {
            return new CSecurityFtdcQryErrOrderActionField(native, skipVTables);
        }

        private CSecurityFtdcQryErrOrderActionField(global::LTSApi.CSecurityFtdcQryErrOrderActionField.__Internal native, bool skipVTables = false)
            : this()
        {
            __instance = native;
        }

        private CSecurityFtdcQryErrOrderActionField(void* native, bool skipVTables = false) : this()
        {
            __instance = *(global::LTSApi.CSecurityFtdcQryErrOrderActionField.__Internal*) native;
        }

        public CSecurityFtdcQryErrOrderActionField(global::LTSApi.CSecurityFtdcQryErrOrderActionField _0)
            : this()
        {
            var ____arg0 = _0.__Instance;
            var __arg0 = new global::System.IntPtr(&____arg0);
            fixed (__Internal* __instancePtr = &__instance)
            {
                __Internal.cctor_1(new global::System.IntPtr(__instancePtr), __arg0);
            }
        }

        public sbyte[] BrokerID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.BrokerID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[11];
                        for (int i = 0; i < 11; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.BrokerID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 11; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] InvestorID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.InvestorID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[15];
                        for (int i = 0; i < 15; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.InvestorID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 15; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }
    }

    public unsafe partial struct CSecurityFtdcQryTradeField
    {
        public partial struct __Internal
        {
            public fixed sbyte BrokerID[11];

            public fixed sbyte InvestorID[15];

            public fixed sbyte InstrumentID[31];

            public fixed sbyte ExchangeID[9];

            public fixed sbyte TradeID[21];

            public fixed sbyte TradeTimeStart[9];

            public fixed sbyte TradeTimeEnd[9];

            [SuppressUnmanagedCodeSecurity]
            [DllImport("securitymduserapi", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0CSecurityFtdcQryTradeField@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);
        }

        private CSecurityFtdcQryTradeField.__Internal __instance;
        internal CSecurityFtdcQryTradeField.__Internal __Instance { get { return __instance; } }

        internal static global::LTSApi.CSecurityFtdcQryTradeField __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new CSecurityFtdcQryTradeField(native.ToPointer(), skipVTables);
        }

        internal static global::LTSApi.CSecurityFtdcQryTradeField __CreateInstance(global::LTSApi.CSecurityFtdcQryTradeField.__Internal native, bool skipVTables = false)
        {
            return new CSecurityFtdcQryTradeField(native, skipVTables);
        }

        private CSecurityFtdcQryTradeField(global::LTSApi.CSecurityFtdcQryTradeField.__Internal native, bool skipVTables = false)
            : this()
        {
            __instance = native;
        }

        private CSecurityFtdcQryTradeField(void* native, bool skipVTables = false) : this()
        {
            __instance = *(global::LTSApi.CSecurityFtdcQryTradeField.__Internal*) native;
        }

        public CSecurityFtdcQryTradeField(global::LTSApi.CSecurityFtdcQryTradeField _0)
            : this()
        {
            var ____arg0 = _0.__Instance;
            var __arg0 = new global::System.IntPtr(&____arg0);
            fixed (__Internal* __instancePtr = &__instance)
            {
                __Internal.cctor_1(new global::System.IntPtr(__instancePtr), __arg0);
            }
        }

        public sbyte[] BrokerID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.BrokerID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[11];
                        for (int i = 0; i < 11; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.BrokerID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 11; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] InvestorID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.InvestorID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[15];
                        for (int i = 0; i < 15; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.InvestorID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 15; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] InstrumentID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.InstrumentID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[31];
                        for (int i = 0; i < 31; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.InstrumentID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 31; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] ExchangeID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.ExchangeID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[9];
                        for (int i = 0; i < 9; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.ExchangeID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 9; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] TradeID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.TradeID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[21];
                        for (int i = 0; i < 21; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.TradeID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 21; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] TradeTimeStart
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.TradeTimeStart)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[9];
                        for (int i = 0; i < 9; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.TradeTimeStart)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 9; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] TradeTimeEnd
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.TradeTimeEnd)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[9];
                        for (int i = 0; i < 9; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.TradeTimeEnd)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 9; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }
    }

    public unsafe partial struct CSecurityFtdcQryInvestorPositionField
    {
        public partial struct __Internal
        {
            public fixed sbyte BrokerID[11];

            public fixed sbyte InvestorID[15];

            public fixed sbyte InstrumentID[31];

            [SuppressUnmanagedCodeSecurity]
            [DllImport("securitymduserapi", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0CSecurityFtdcQryInvestorPositionField@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);
        }

        private CSecurityFtdcQryInvestorPositionField.__Internal __instance;
        internal CSecurityFtdcQryInvestorPositionField.__Internal __Instance { get { return __instance; } }

        internal static global::LTSApi.CSecurityFtdcQryInvestorPositionField __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new CSecurityFtdcQryInvestorPositionField(native.ToPointer(), skipVTables);
        }

        internal static global::LTSApi.CSecurityFtdcQryInvestorPositionField __CreateInstance(global::LTSApi.CSecurityFtdcQryInvestorPositionField.__Internal native, bool skipVTables = false)
        {
            return new CSecurityFtdcQryInvestorPositionField(native, skipVTables);
        }

        private CSecurityFtdcQryInvestorPositionField(global::LTSApi.CSecurityFtdcQryInvestorPositionField.__Internal native, bool skipVTables = false)
            : this()
        {
            __instance = native;
        }

        private CSecurityFtdcQryInvestorPositionField(void* native, bool skipVTables = false) : this()
        {
            __instance = *(global::LTSApi.CSecurityFtdcQryInvestorPositionField.__Internal*) native;
        }

        public CSecurityFtdcQryInvestorPositionField(global::LTSApi.CSecurityFtdcQryInvestorPositionField _0)
            : this()
        {
            var ____arg0 = _0.__Instance;
            var __arg0 = new global::System.IntPtr(&____arg0);
            fixed (__Internal* __instancePtr = &__instance)
            {
                __Internal.cctor_1(new global::System.IntPtr(__instancePtr), __arg0);
            }
        }

        public sbyte[] BrokerID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.BrokerID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[11];
                        for (int i = 0; i < 11; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.BrokerID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 11; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] InvestorID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.InvestorID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[15];
                        for (int i = 0; i < 15; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.InvestorID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 15; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] InstrumentID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.InstrumentID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[31];
                        for (int i = 0; i < 31; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.InstrumentID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 31; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }
    }

    public unsafe partial struct CSecurityFtdcQrySyncDepositField
    {
        public partial struct __Internal
        {
            public fixed sbyte BrokerID[11];

            public fixed sbyte DepositSeqNo[15];

            [SuppressUnmanagedCodeSecurity]
            [DllImport("securitymduserapi", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0CSecurityFtdcQrySyncDepositField@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);
        }

        private CSecurityFtdcQrySyncDepositField.__Internal __instance;
        internal CSecurityFtdcQrySyncDepositField.__Internal __Instance { get { return __instance; } }

        internal static global::LTSApi.CSecurityFtdcQrySyncDepositField __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new CSecurityFtdcQrySyncDepositField(native.ToPointer(), skipVTables);
        }

        internal static global::LTSApi.CSecurityFtdcQrySyncDepositField __CreateInstance(global::LTSApi.CSecurityFtdcQrySyncDepositField.__Internal native, bool skipVTables = false)
        {
            return new CSecurityFtdcQrySyncDepositField(native, skipVTables);
        }

        private CSecurityFtdcQrySyncDepositField(global::LTSApi.CSecurityFtdcQrySyncDepositField.__Internal native, bool skipVTables = false)
            : this()
        {
            __instance = native;
        }

        private CSecurityFtdcQrySyncDepositField(void* native, bool skipVTables = false) : this()
        {
            __instance = *(global::LTSApi.CSecurityFtdcQrySyncDepositField.__Internal*) native;
        }

        public CSecurityFtdcQrySyncDepositField(global::LTSApi.CSecurityFtdcQrySyncDepositField _0)
            : this()
        {
            var ____arg0 = _0.__Instance;
            var __arg0 = new global::System.IntPtr(&____arg0);
            fixed (__Internal* __instancePtr = &__instance)
            {
                __Internal.cctor_1(new global::System.IntPtr(__instancePtr), __arg0);
            }
        }

        public sbyte[] BrokerID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.BrokerID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[11];
                        for (int i = 0; i < 11; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.BrokerID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 11; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] DepositSeqNo
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.DepositSeqNo)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[15];
                        for (int i = 0; i < 15; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.DepositSeqNo)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 15; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }
    }

    public unsafe partial struct CSecurityFtdcUserPasswordUpdateField
    {
        public partial struct __Internal
        {
            public fixed sbyte BrokerID[11];

            public fixed sbyte UserID[16];

            public fixed sbyte OldPassword[41];

            public fixed sbyte NewPassword[41];

            [SuppressUnmanagedCodeSecurity]
            [DllImport("securitymduserapi", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0CSecurityFtdcUserPasswordUpdateField@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);
        }

        private CSecurityFtdcUserPasswordUpdateField.__Internal __instance;
        internal CSecurityFtdcUserPasswordUpdateField.__Internal __Instance { get { return __instance; } }

        internal static global::LTSApi.CSecurityFtdcUserPasswordUpdateField __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new CSecurityFtdcUserPasswordUpdateField(native.ToPointer(), skipVTables);
        }

        internal static global::LTSApi.CSecurityFtdcUserPasswordUpdateField __CreateInstance(global::LTSApi.CSecurityFtdcUserPasswordUpdateField.__Internal native, bool skipVTables = false)
        {
            return new CSecurityFtdcUserPasswordUpdateField(native, skipVTables);
        }

        private CSecurityFtdcUserPasswordUpdateField(global::LTSApi.CSecurityFtdcUserPasswordUpdateField.__Internal native, bool skipVTables = false)
            : this()
        {
            __instance = native;
        }

        private CSecurityFtdcUserPasswordUpdateField(void* native, bool skipVTables = false) : this()
        {
            __instance = *(global::LTSApi.CSecurityFtdcUserPasswordUpdateField.__Internal*) native;
        }

        public CSecurityFtdcUserPasswordUpdateField(global::LTSApi.CSecurityFtdcUserPasswordUpdateField _0)
            : this()
        {
            var ____arg0 = _0.__Instance;
            var __arg0 = new global::System.IntPtr(&____arg0);
            fixed (__Internal* __instancePtr = &__instance)
            {
                __Internal.cctor_1(new global::System.IntPtr(__instancePtr), __arg0);
            }
        }

        public sbyte[] BrokerID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.BrokerID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[11];
                        for (int i = 0; i < 11; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.BrokerID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 11; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] UserID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.UserID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[16];
                        for (int i = 0; i < 16; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.UserID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 16; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] OldPassword
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.OldPassword)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[41];
                        for (int i = 0; i < 41; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.OldPassword)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 41; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] NewPassword
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.NewPassword)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[41];
                        for (int i = 0; i < 41; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.NewPassword)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 41; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }
    }

    public unsafe partial struct CSecurityFtdcTradingAccountPasswordUpdateField
    {
        public partial struct __Internal
        {
            public fixed sbyte BrokerID[11];

            public fixed sbyte AccountID[15];

            public fixed sbyte OldPassword[41];

            public fixed sbyte NewPassword[41];

            [SuppressUnmanagedCodeSecurity]
            [DllImport("securitymduserapi", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0CSecurityFtdcTradingAccountPasswordUpdateField@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);
        }

        private CSecurityFtdcTradingAccountPasswordUpdateField.__Internal __instance;
        internal CSecurityFtdcTradingAccountPasswordUpdateField.__Internal __Instance { get { return __instance; } }

        internal static global::LTSApi.CSecurityFtdcTradingAccountPasswordUpdateField __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new CSecurityFtdcTradingAccountPasswordUpdateField(native.ToPointer(), skipVTables);
        }

        internal static global::LTSApi.CSecurityFtdcTradingAccountPasswordUpdateField __CreateInstance(global::LTSApi.CSecurityFtdcTradingAccountPasswordUpdateField.__Internal native, bool skipVTables = false)
        {
            return new CSecurityFtdcTradingAccountPasswordUpdateField(native, skipVTables);
        }

        private CSecurityFtdcTradingAccountPasswordUpdateField(global::LTSApi.CSecurityFtdcTradingAccountPasswordUpdateField.__Internal native, bool skipVTables = false)
            : this()
        {
            __instance = native;
        }

        private CSecurityFtdcTradingAccountPasswordUpdateField(void* native, bool skipVTables = false) : this()
        {
            __instance = *(global::LTSApi.CSecurityFtdcTradingAccountPasswordUpdateField.__Internal*) native;
        }

        public CSecurityFtdcTradingAccountPasswordUpdateField(global::LTSApi.CSecurityFtdcTradingAccountPasswordUpdateField _0)
            : this()
        {
            var ____arg0 = _0.__Instance;
            var __arg0 = new global::System.IntPtr(&____arg0);
            fixed (__Internal* __instancePtr = &__instance)
            {
                __Internal.cctor_1(new global::System.IntPtr(__instancePtr), __arg0);
            }
        }

        public sbyte[] BrokerID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.BrokerID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[11];
                        for (int i = 0; i < 11; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.BrokerID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 11; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] AccountID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.AccountID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[15];
                        for (int i = 0; i < 15; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.AccountID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 15; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] OldPassword
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.OldPassword)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[41];
                        for (int i = 0; i < 41; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.OldPassword)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 41; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] NewPassword
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.NewPassword)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[41];
                        for (int i = 0; i < 41; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.NewPassword)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 41; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }
    }

    public unsafe partial struct CSecurityFtdcManualSyncBrokerUserOTPField
    {
        public partial struct __Internal
        {
            public fixed sbyte BrokerID[11];

            public fixed sbyte UserID[16];

            public sbyte OTPType;

            public fixed sbyte FirstOTP[41];

            public fixed sbyte SecondOTP[41];

            [SuppressUnmanagedCodeSecurity]
            [DllImport("securitymduserapi", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0CSecurityFtdcManualSyncBrokerUserOTPField@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);
        }

        private CSecurityFtdcManualSyncBrokerUserOTPField.__Internal __instance;
        internal CSecurityFtdcManualSyncBrokerUserOTPField.__Internal __Instance { get { return __instance; } }

        internal static global::LTSApi.CSecurityFtdcManualSyncBrokerUserOTPField __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new CSecurityFtdcManualSyncBrokerUserOTPField(native.ToPointer(), skipVTables);
        }

        internal static global::LTSApi.CSecurityFtdcManualSyncBrokerUserOTPField __CreateInstance(global::LTSApi.CSecurityFtdcManualSyncBrokerUserOTPField.__Internal native, bool skipVTables = false)
        {
            return new CSecurityFtdcManualSyncBrokerUserOTPField(native, skipVTables);
        }

        private CSecurityFtdcManualSyncBrokerUserOTPField(global::LTSApi.CSecurityFtdcManualSyncBrokerUserOTPField.__Internal native, bool skipVTables = false)
            : this()
        {
            __instance = native;
        }

        private CSecurityFtdcManualSyncBrokerUserOTPField(void* native, bool skipVTables = false) : this()
        {
            __instance = *(global::LTSApi.CSecurityFtdcManualSyncBrokerUserOTPField.__Internal*) native;
        }

        public CSecurityFtdcManualSyncBrokerUserOTPField(global::LTSApi.CSecurityFtdcManualSyncBrokerUserOTPField _0)
            : this()
        {
            var ____arg0 = _0.__Instance;
            var __arg0 = new global::System.IntPtr(&____arg0);
            fixed (__Internal* __instancePtr = &__instance)
            {
                __Internal.cctor_1(new global::System.IntPtr(__instancePtr), __arg0);
            }
        }

        public sbyte[] BrokerID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.BrokerID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[11];
                        for (int i = 0; i < 11; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.BrokerID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 11; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] UserID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.UserID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[16];
                        for (int i = 0; i < 16; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.UserID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 16; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte OTPType
        {
            get
            {
                return __instance.OTPType;
            }

            set
            {
                __instance.OTPType = value;
            }
        }

        public sbyte[] FirstOTP
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.FirstOTP)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[41];
                        for (int i = 0; i < 41; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.FirstOTP)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 41; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] SecondOTP
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.SecondOTP)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[41];
                        for (int i = 0; i < 41; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.SecondOTP)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 41; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }
    }

    public unsafe partial struct CSecurityFtdcBrokerUserPasswordField
    {
        public partial struct __Internal
        {
            public fixed sbyte BrokerID[11];

            public fixed sbyte UserID[16];

            public fixed sbyte Password[41];

            [SuppressUnmanagedCodeSecurity]
            [DllImport("securitymduserapi", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0CSecurityFtdcBrokerUserPasswordField@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);
        }

        private CSecurityFtdcBrokerUserPasswordField.__Internal __instance;
        internal CSecurityFtdcBrokerUserPasswordField.__Internal __Instance { get { return __instance; } }

        internal static global::LTSApi.CSecurityFtdcBrokerUserPasswordField __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new CSecurityFtdcBrokerUserPasswordField(native.ToPointer(), skipVTables);
        }

        internal static global::LTSApi.CSecurityFtdcBrokerUserPasswordField __CreateInstance(global::LTSApi.CSecurityFtdcBrokerUserPasswordField.__Internal native, bool skipVTables = false)
        {
            return new CSecurityFtdcBrokerUserPasswordField(native, skipVTables);
        }

        private CSecurityFtdcBrokerUserPasswordField(global::LTSApi.CSecurityFtdcBrokerUserPasswordField.__Internal native, bool skipVTables = false)
            : this()
        {
            __instance = native;
        }

        private CSecurityFtdcBrokerUserPasswordField(void* native, bool skipVTables = false) : this()
        {
            __instance = *(global::LTSApi.CSecurityFtdcBrokerUserPasswordField.__Internal*) native;
        }

        public CSecurityFtdcBrokerUserPasswordField(global::LTSApi.CSecurityFtdcBrokerUserPasswordField _0)
            : this()
        {
            var ____arg0 = _0.__Instance;
            var __arg0 = new global::System.IntPtr(&____arg0);
            fixed (__Internal* __instancePtr = &__instance)
            {
                __Internal.cctor_1(new global::System.IntPtr(__instancePtr), __arg0);
            }
        }

        public sbyte[] BrokerID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.BrokerID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[11];
                        for (int i = 0; i < 11; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.BrokerID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 11; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] UserID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.UserID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[16];
                        for (int i = 0; i < 16; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.UserID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 16; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] Password
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.Password)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[41];
                        for (int i = 0; i < 41; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.Password)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 41; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }
    }

    public unsafe partial struct CSecurityFtdcTradingAccountPasswordField
    {
        public partial struct __Internal
        {
            public fixed sbyte BrokerID[11];

            public fixed sbyte AccountID[15];

            public fixed sbyte Password[41];

            [SuppressUnmanagedCodeSecurity]
            [DllImport("securitymduserapi", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0CSecurityFtdcTradingAccountPasswordField@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);
        }

        private CSecurityFtdcTradingAccountPasswordField.__Internal __instance;
        internal CSecurityFtdcTradingAccountPasswordField.__Internal __Instance { get { return __instance; } }

        internal static global::LTSApi.CSecurityFtdcTradingAccountPasswordField __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new CSecurityFtdcTradingAccountPasswordField(native.ToPointer(), skipVTables);
        }

        internal static global::LTSApi.CSecurityFtdcTradingAccountPasswordField __CreateInstance(global::LTSApi.CSecurityFtdcTradingAccountPasswordField.__Internal native, bool skipVTables = false)
        {
            return new CSecurityFtdcTradingAccountPasswordField(native, skipVTables);
        }

        private CSecurityFtdcTradingAccountPasswordField(global::LTSApi.CSecurityFtdcTradingAccountPasswordField.__Internal native, bool skipVTables = false)
            : this()
        {
            __instance = native;
        }

        private CSecurityFtdcTradingAccountPasswordField(void* native, bool skipVTables = false) : this()
        {
            __instance = *(global::LTSApi.CSecurityFtdcTradingAccountPasswordField.__Internal*) native;
        }

        public CSecurityFtdcTradingAccountPasswordField(global::LTSApi.CSecurityFtdcTradingAccountPasswordField _0)
            : this()
        {
            var ____arg0 = _0.__Instance;
            var __arg0 = new global::System.IntPtr(&____arg0);
            fixed (__Internal* __instancePtr = &__instance)
            {
                __Internal.cctor_1(new global::System.IntPtr(__instancePtr), __arg0);
            }
        }

        public sbyte[] BrokerID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.BrokerID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[11];
                        for (int i = 0; i < 11; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.BrokerID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 11; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] AccountID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.AccountID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[15];
                        for (int i = 0; i < 15; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.AccountID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 15; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] Password
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.Password)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[41];
                        for (int i = 0; i < 41; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.Password)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 41; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }
    }

    public unsafe partial struct CSecurityFtdcUserRightField
    {
        public partial struct __Internal
        {
            public fixed sbyte BrokerID[11];

            public fixed sbyte UserID[16];

            public sbyte UserRightType;

            public int IsForbidden;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("securitymduserapi", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0CSecurityFtdcUserRightField@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);
        }

        private CSecurityFtdcUserRightField.__Internal __instance;
        internal CSecurityFtdcUserRightField.__Internal __Instance { get { return __instance; } }

        internal static global::LTSApi.CSecurityFtdcUserRightField __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new CSecurityFtdcUserRightField(native.ToPointer(), skipVTables);
        }

        internal static global::LTSApi.CSecurityFtdcUserRightField __CreateInstance(global::LTSApi.CSecurityFtdcUserRightField.__Internal native, bool skipVTables = false)
        {
            return new CSecurityFtdcUserRightField(native, skipVTables);
        }

        private CSecurityFtdcUserRightField(global::LTSApi.CSecurityFtdcUserRightField.__Internal native, bool skipVTables = false)
            : this()
        {
            __instance = native;
        }

        private CSecurityFtdcUserRightField(void* native, bool skipVTables = false) : this()
        {
            __instance = *(global::LTSApi.CSecurityFtdcUserRightField.__Internal*) native;
        }

        public CSecurityFtdcUserRightField(global::LTSApi.CSecurityFtdcUserRightField _0)
            : this()
        {
            var ____arg0 = _0.__Instance;
            var __arg0 = new global::System.IntPtr(&____arg0);
            fixed (__Internal* __instancePtr = &__instance)
            {
                __Internal.cctor_1(new global::System.IntPtr(__instancePtr), __arg0);
            }
        }

        public sbyte[] BrokerID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.BrokerID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[11];
                        for (int i = 0; i < 11; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.BrokerID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 11; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] UserID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.UserID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[16];
                        for (int i = 0; i < 16; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.UserID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 16; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte UserRightType
        {
            get
            {
                return __instance.UserRightType;
            }

            set
            {
                __instance.UserRightType = value;
            }
        }

        public int IsForbidden
        {
            get
            {
                return __instance.IsForbidden;
            }

            set
            {
                __instance.IsForbidden = value;
            }
        }
    }

    public unsafe partial struct CSecurityFtdcInvestorAccountField
    {
        public partial struct __Internal
        {
            public fixed sbyte BrokerID[11];

            public fixed sbyte InvestorID[15];

            public fixed sbyte AccountID[15];

            public int IsDefault;

            public sbyte AccountType;

            public int IsActive;

            public fixed sbyte SHBranchPBU[21];

            public fixed sbyte SZBranchPBU[21];

            [SuppressUnmanagedCodeSecurity]
            [DllImport("securitymduserapi", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0CSecurityFtdcInvestorAccountField@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);
        }

        private CSecurityFtdcInvestorAccountField.__Internal __instance;
        internal CSecurityFtdcInvestorAccountField.__Internal __Instance { get { return __instance; } }

        internal static global::LTSApi.CSecurityFtdcInvestorAccountField __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new CSecurityFtdcInvestorAccountField(native.ToPointer(), skipVTables);
        }

        internal static global::LTSApi.CSecurityFtdcInvestorAccountField __CreateInstance(global::LTSApi.CSecurityFtdcInvestorAccountField.__Internal native, bool skipVTables = false)
        {
            return new CSecurityFtdcInvestorAccountField(native, skipVTables);
        }

        private CSecurityFtdcInvestorAccountField(global::LTSApi.CSecurityFtdcInvestorAccountField.__Internal native, bool skipVTables = false)
            : this()
        {
            __instance = native;
        }

        private CSecurityFtdcInvestorAccountField(void* native, bool skipVTables = false) : this()
        {
            __instance = *(global::LTSApi.CSecurityFtdcInvestorAccountField.__Internal*) native;
        }

        public CSecurityFtdcInvestorAccountField(global::LTSApi.CSecurityFtdcInvestorAccountField _0)
            : this()
        {
            var ____arg0 = _0.__Instance;
            var __arg0 = new global::System.IntPtr(&____arg0);
            fixed (__Internal* __instancePtr = &__instance)
            {
                __Internal.cctor_1(new global::System.IntPtr(__instancePtr), __arg0);
            }
        }

        public sbyte[] BrokerID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.BrokerID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[11];
                        for (int i = 0; i < 11; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.BrokerID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 11; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] InvestorID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.InvestorID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[15];
                        for (int i = 0; i < 15; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.InvestorID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 15; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] AccountID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.AccountID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[15];
                        for (int i = 0; i < 15; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.AccountID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 15; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public int IsDefault
        {
            get
            {
                return __instance.IsDefault;
            }

            set
            {
                __instance.IsDefault = value;
            }
        }

        public sbyte AccountType
        {
            get
            {
                return __instance.AccountType;
            }

            set
            {
                __instance.AccountType = value;
            }
        }

        public int IsActive
        {
            get
            {
                return __instance.IsActive;
            }

            set
            {
                __instance.IsActive = value;
            }
        }

        public sbyte[] SHBranchPBU
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.SHBranchPBU)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[21];
                        for (int i = 0; i < 21; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.SHBranchPBU)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 21; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] SZBranchPBU
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.SZBranchPBU)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[21];
                        for (int i = 0; i < 21; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.SZBranchPBU)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 21; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }
    }

    public unsafe partial struct CSecurityFtdcUserIPField
    {
        public partial struct __Internal
        {
            public fixed sbyte BrokerID[11];

            public fixed sbyte UserID[16];

            public fixed sbyte IPAddress[16];

            public fixed sbyte IPMask[16];

            public fixed sbyte MacAddress[21];

            [SuppressUnmanagedCodeSecurity]
            [DllImport("securitymduserapi", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0CSecurityFtdcUserIPField@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);
        }

        private CSecurityFtdcUserIPField.__Internal __instance;
        internal CSecurityFtdcUserIPField.__Internal __Instance { get { return __instance; } }

        internal static global::LTSApi.CSecurityFtdcUserIPField __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new CSecurityFtdcUserIPField(native.ToPointer(), skipVTables);
        }

        internal static global::LTSApi.CSecurityFtdcUserIPField __CreateInstance(global::LTSApi.CSecurityFtdcUserIPField.__Internal native, bool skipVTables = false)
        {
            return new CSecurityFtdcUserIPField(native, skipVTables);
        }

        private CSecurityFtdcUserIPField(global::LTSApi.CSecurityFtdcUserIPField.__Internal native, bool skipVTables = false)
            : this()
        {
            __instance = native;
        }

        private CSecurityFtdcUserIPField(void* native, bool skipVTables = false) : this()
        {
            __instance = *(global::LTSApi.CSecurityFtdcUserIPField.__Internal*) native;
        }

        public CSecurityFtdcUserIPField(global::LTSApi.CSecurityFtdcUserIPField _0)
            : this()
        {
            var ____arg0 = _0.__Instance;
            var __arg0 = new global::System.IntPtr(&____arg0);
            fixed (__Internal* __instancePtr = &__instance)
            {
                __Internal.cctor_1(new global::System.IntPtr(__instancePtr), __arg0);
            }
        }

        public sbyte[] BrokerID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.BrokerID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[11];
                        for (int i = 0; i < 11; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.BrokerID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 11; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] UserID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.UserID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[16];
                        for (int i = 0; i < 16; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.UserID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 16; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] IPAddress
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.IPAddress)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[16];
                        for (int i = 0; i < 16; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.IPAddress)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 16; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] IPMask
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.IPMask)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[16];
                        for (int i = 0; i < 16; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.IPMask)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 16; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] MacAddress
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.MacAddress)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[21];
                        for (int i = 0; i < 21; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.MacAddress)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 21; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }
    }

    public unsafe partial struct CSecurityFtdcBrokerUserOTPParamField
    {
        public partial struct __Internal
        {
            public fixed sbyte BrokerID[11];

            public fixed sbyte UserID[16];

            public fixed sbyte OTPVendorsID[2];

            public fixed sbyte SerialNumber[17];

            public fixed sbyte AuthKey[41];

            public int LastDrift;

            public int LastSuccess;

            public sbyte OTPType;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("securitymduserapi", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0CSecurityFtdcBrokerUserOTPParamField@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);
        }

        private CSecurityFtdcBrokerUserOTPParamField.__Internal __instance;
        internal CSecurityFtdcBrokerUserOTPParamField.__Internal __Instance { get { return __instance; } }

        internal static global::LTSApi.CSecurityFtdcBrokerUserOTPParamField __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new CSecurityFtdcBrokerUserOTPParamField(native.ToPointer(), skipVTables);
        }

        internal static global::LTSApi.CSecurityFtdcBrokerUserOTPParamField __CreateInstance(global::LTSApi.CSecurityFtdcBrokerUserOTPParamField.__Internal native, bool skipVTables = false)
        {
            return new CSecurityFtdcBrokerUserOTPParamField(native, skipVTables);
        }

        private CSecurityFtdcBrokerUserOTPParamField(global::LTSApi.CSecurityFtdcBrokerUserOTPParamField.__Internal native, bool skipVTables = false)
            : this()
        {
            __instance = native;
        }

        private CSecurityFtdcBrokerUserOTPParamField(void* native, bool skipVTables = false) : this()
        {
            __instance = *(global::LTSApi.CSecurityFtdcBrokerUserOTPParamField.__Internal*) native;
        }

        public CSecurityFtdcBrokerUserOTPParamField(global::LTSApi.CSecurityFtdcBrokerUserOTPParamField _0)
            : this()
        {
            var ____arg0 = _0.__Instance;
            var __arg0 = new global::System.IntPtr(&____arg0);
            fixed (__Internal* __instancePtr = &__instance)
            {
                __Internal.cctor_1(new global::System.IntPtr(__instancePtr), __arg0);
            }
        }

        public sbyte[] BrokerID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.BrokerID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[11];
                        for (int i = 0; i < 11; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.BrokerID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 11; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] UserID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.UserID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[16];
                        for (int i = 0; i < 16; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.UserID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 16; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] OTPVendorsID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.OTPVendorsID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[2];
                        for (int i = 0; i < 2; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.OTPVendorsID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 2; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] SerialNumber
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.SerialNumber)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[17];
                        for (int i = 0; i < 17; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.SerialNumber)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 17; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] AuthKey
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.AuthKey)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[41];
                        for (int i = 0; i < 41; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.AuthKey)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 41; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public int LastDrift
        {
            get
            {
                return __instance.LastDrift;
            }

            set
            {
                __instance.LastDrift = value;
            }
        }

        public int LastSuccess
        {
            get
            {
                return __instance.LastSuccess;
            }

            set
            {
                __instance.LastSuccess = value;
            }
        }

        public sbyte OTPType
        {
            get
            {
                return __instance.OTPType;
            }

            set
            {
                __instance.OTPType = value;
            }
        }
    }

    public unsafe partial struct CSecurityFtdcReqUserLoginField
    {
        public partial struct __Internal
        {
            public fixed sbyte TradingDay[9];

            public fixed sbyte BrokerID[11];

            public fixed sbyte UserID[16];

            public fixed sbyte Password[41];

            public fixed sbyte UserProductInfo[11];

            public fixed sbyte InterfaceProductInfo[11];

            public fixed sbyte ProtocolInfo[11];

            public fixed sbyte MacAddress[21];

            public fixed sbyte OneTimePassword[41];

            public fixed sbyte ClientIPAddress[16];

            public fixed sbyte AuthCode[17];

            public fixed sbyte RandCode[17];

            public fixed sbyte HDSerialNumber[21];

            [SuppressUnmanagedCodeSecurity]
            [DllImport("securitymduserapi", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0CSecurityFtdcReqUserLoginField@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);
        }

        private CSecurityFtdcReqUserLoginField.__Internal __instance;
        internal CSecurityFtdcReqUserLoginField.__Internal __Instance { get { return __instance; } }

        internal static global::LTSApi.CSecurityFtdcReqUserLoginField __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new CSecurityFtdcReqUserLoginField(native.ToPointer(), skipVTables);
        }

        internal static global::LTSApi.CSecurityFtdcReqUserLoginField __CreateInstance(global::LTSApi.CSecurityFtdcReqUserLoginField.__Internal native, bool skipVTables = false)
        {
            return new CSecurityFtdcReqUserLoginField(native, skipVTables);
        }

        private CSecurityFtdcReqUserLoginField(global::LTSApi.CSecurityFtdcReqUserLoginField.__Internal native, bool skipVTables = false)
            : this()
        {
            __instance = native;
        }

        private CSecurityFtdcReqUserLoginField(void* native, bool skipVTables = false) : this()
        {
            __instance = *(global::LTSApi.CSecurityFtdcReqUserLoginField.__Internal*) native;
        }

        public CSecurityFtdcReqUserLoginField(global::LTSApi.CSecurityFtdcReqUserLoginField _0)
            : this()
        {
            var ____arg0 = _0.__Instance;
            var __arg0 = new global::System.IntPtr(&____arg0);
            fixed (__Internal* __instancePtr = &__instance)
            {
                __Internal.cctor_1(new global::System.IntPtr(__instancePtr), __arg0);
            }
        }

        public sbyte[] TradingDay
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.TradingDay)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[9];
                        for (int i = 0; i < 9; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.TradingDay)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 9; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] BrokerID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.BrokerID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[11];
                        for (int i = 0; i < 11; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.BrokerID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 11; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] UserID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.UserID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[16];
                        for (int i = 0; i < 16; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.UserID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 16; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] Password
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.Password)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[41];
                        for (int i = 0; i < 41; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.Password)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 41; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] UserProductInfo
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.UserProductInfo)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[11];
                        for (int i = 0; i < 11; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.UserProductInfo)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 11; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] InterfaceProductInfo
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.InterfaceProductInfo)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[11];
                        for (int i = 0; i < 11; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.InterfaceProductInfo)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 11; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] ProtocolInfo
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.ProtocolInfo)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[11];
                        for (int i = 0; i < 11; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.ProtocolInfo)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 11; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] MacAddress
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.MacAddress)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[21];
                        for (int i = 0; i < 21; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.MacAddress)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 21; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] OneTimePassword
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.OneTimePassword)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[41];
                        for (int i = 0; i < 41; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.OneTimePassword)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 41; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] ClientIPAddress
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.ClientIPAddress)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[16];
                        for (int i = 0; i < 16; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.ClientIPAddress)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 16; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] AuthCode
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.AuthCode)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[17];
                        for (int i = 0; i < 17; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.AuthCode)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 17; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] RandCode
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.RandCode)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[17];
                        for (int i = 0; i < 17; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.RandCode)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 17; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] HDSerialNumber
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.HDSerialNumber)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[21];
                        for (int i = 0; i < 21; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.HDSerialNumber)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 21; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }
    }

    public unsafe partial struct CSecurityFtdcRspUserLoginField
    {
        public partial struct __Internal
        {
            public fixed sbyte TradingDay[9];

            public fixed sbyte LoginTime[9];

            public fixed sbyte BrokerID[11];

            public fixed sbyte UserID[16];

            public fixed sbyte SystemName[41];

            public int FrontID;

            public int SessionID;

            public fixed sbyte MaxOrderRef[13];

            [SuppressUnmanagedCodeSecurity]
            [DllImport("securitymduserapi", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0CSecurityFtdcRspUserLoginField@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);
        }

        private CSecurityFtdcRspUserLoginField.__Internal __instance;
        internal CSecurityFtdcRspUserLoginField.__Internal __Instance { get { return __instance; } }

        internal static global::LTSApi.CSecurityFtdcRspUserLoginField __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new CSecurityFtdcRspUserLoginField(native.ToPointer(), skipVTables);
        }

        internal static global::LTSApi.CSecurityFtdcRspUserLoginField __CreateInstance(global::LTSApi.CSecurityFtdcRspUserLoginField.__Internal native, bool skipVTables = false)
        {
            return new CSecurityFtdcRspUserLoginField(native, skipVTables);
        }

        private CSecurityFtdcRspUserLoginField(global::LTSApi.CSecurityFtdcRspUserLoginField.__Internal native, bool skipVTables = false)
            : this()
        {
            __instance = native;
        }

        private CSecurityFtdcRspUserLoginField(void* native, bool skipVTables = false) : this()
        {
            __instance = *(global::LTSApi.CSecurityFtdcRspUserLoginField.__Internal*) native;
        }

        public CSecurityFtdcRspUserLoginField(global::LTSApi.CSecurityFtdcRspUserLoginField _0)
            : this()
        {
            var ____arg0 = _0.__Instance;
            var __arg0 = new global::System.IntPtr(&____arg0);
            fixed (__Internal* __instancePtr = &__instance)
            {
                __Internal.cctor_1(new global::System.IntPtr(__instancePtr), __arg0);
            }
        }

        public sbyte[] TradingDay
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.TradingDay)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[9];
                        for (int i = 0; i < 9; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.TradingDay)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 9; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] LoginTime
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.LoginTime)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[9];
                        for (int i = 0; i < 9; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.LoginTime)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 9; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] BrokerID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.BrokerID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[11];
                        for (int i = 0; i < 11; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.BrokerID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 11; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] UserID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.UserID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[16];
                        for (int i = 0; i < 16; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.UserID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 16; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] SystemName
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.SystemName)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[41];
                        for (int i = 0; i < 41; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.SystemName)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 41; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public int FrontID
        {
            get
            {
                return __instance.FrontID;
            }

            set
            {
                __instance.FrontID = value;
            }
        }

        public int SessionID
        {
            get
            {
                return __instance.SessionID;
            }

            set
            {
                __instance.SessionID = value;
            }
        }

        public sbyte[] MaxOrderRef
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.MaxOrderRef)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[13];
                        for (int i = 0; i < 13; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.MaxOrderRef)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 13; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }
    }

    public unsafe partial struct CSecurityFtdcUserLogoutField
    {
        public partial struct __Internal
        {
            public fixed sbyte BrokerID[11];

            public fixed sbyte UserID[16];

            [SuppressUnmanagedCodeSecurity]
            [DllImport("securitymduserapi", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0CSecurityFtdcUserLogoutField@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);
        }

        private CSecurityFtdcUserLogoutField.__Internal __instance;
        internal CSecurityFtdcUserLogoutField.__Internal __Instance { get { return __instance; } }

        internal static global::LTSApi.CSecurityFtdcUserLogoutField __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new CSecurityFtdcUserLogoutField(native.ToPointer(), skipVTables);
        }

        internal static global::LTSApi.CSecurityFtdcUserLogoutField __CreateInstance(global::LTSApi.CSecurityFtdcUserLogoutField.__Internal native, bool skipVTables = false)
        {
            return new CSecurityFtdcUserLogoutField(native, skipVTables);
        }

        private CSecurityFtdcUserLogoutField(global::LTSApi.CSecurityFtdcUserLogoutField.__Internal native, bool skipVTables = false)
            : this()
        {
            __instance = native;
        }

        private CSecurityFtdcUserLogoutField(void* native, bool skipVTables = false) : this()
        {
            __instance = *(global::LTSApi.CSecurityFtdcUserLogoutField.__Internal*) native;
        }

        public CSecurityFtdcUserLogoutField(global::LTSApi.CSecurityFtdcUserLogoutField _0)
            : this()
        {
            var ____arg0 = _0.__Instance;
            var __arg0 = new global::System.IntPtr(&____arg0);
            fixed (__Internal* __instancePtr = &__instance)
            {
                __Internal.cctor_1(new global::System.IntPtr(__instancePtr), __arg0);
            }
        }

        public sbyte[] BrokerID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.BrokerID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[11];
                        for (int i = 0; i < 11; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.BrokerID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 11; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] UserID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.UserID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[16];
                        for (int i = 0; i < 16; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.UserID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 16; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }
    }

    public unsafe partial struct CSecurityFtdcLogoutAllField
    {
        public partial struct __Internal
        {
            public int FrontID;

            public int SessionID;

            public fixed sbyte SystemName[41];

            [SuppressUnmanagedCodeSecurity]
            [DllImport("securitymduserapi", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0CSecurityFtdcLogoutAllField@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);
        }

        private CSecurityFtdcLogoutAllField.__Internal __instance;
        internal CSecurityFtdcLogoutAllField.__Internal __Instance { get { return __instance; } }

        internal static global::LTSApi.CSecurityFtdcLogoutAllField __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new CSecurityFtdcLogoutAllField(native.ToPointer(), skipVTables);
        }

        internal static global::LTSApi.CSecurityFtdcLogoutAllField __CreateInstance(global::LTSApi.CSecurityFtdcLogoutAllField.__Internal native, bool skipVTables = false)
        {
            return new CSecurityFtdcLogoutAllField(native, skipVTables);
        }

        private CSecurityFtdcLogoutAllField(global::LTSApi.CSecurityFtdcLogoutAllField.__Internal native, bool skipVTables = false)
            : this()
        {
            __instance = native;
        }

        private CSecurityFtdcLogoutAllField(void* native, bool skipVTables = false) : this()
        {
            __instance = *(global::LTSApi.CSecurityFtdcLogoutAllField.__Internal*) native;
        }

        public CSecurityFtdcLogoutAllField(global::LTSApi.CSecurityFtdcLogoutAllField _0)
            : this()
        {
            var ____arg0 = _0.__Instance;
            var __arg0 = new global::System.IntPtr(&____arg0);
            fixed (__Internal* __instancePtr = &__instance)
            {
                __Internal.cctor_1(new global::System.IntPtr(__instancePtr), __arg0);
            }
        }

        public int FrontID
        {
            get
            {
                return __instance.FrontID;
            }

            set
            {
                __instance.FrontID = value;
            }
        }

        public int SessionID
        {
            get
            {
                return __instance.SessionID;
            }

            set
            {
                __instance.SessionID = value;
            }
        }

        public sbyte[] SystemName
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.SystemName)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[41];
                        for (int i = 0; i < 41; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.SystemName)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 41; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }
    }

    public unsafe partial struct CSecurityFtdcForceUserLogoutField
    {
        public partial struct __Internal
        {
            public fixed sbyte BrokerID[11];

            public fixed sbyte UserID[16];

            [SuppressUnmanagedCodeSecurity]
            [DllImport("securitymduserapi", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0CSecurityFtdcForceUserLogoutField@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);
        }

        private CSecurityFtdcForceUserLogoutField.__Internal __instance;
        internal CSecurityFtdcForceUserLogoutField.__Internal __Instance { get { return __instance; } }

        internal static global::LTSApi.CSecurityFtdcForceUserLogoutField __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new CSecurityFtdcForceUserLogoutField(native.ToPointer(), skipVTables);
        }

        internal static global::LTSApi.CSecurityFtdcForceUserLogoutField __CreateInstance(global::LTSApi.CSecurityFtdcForceUserLogoutField.__Internal native, bool skipVTables = false)
        {
            return new CSecurityFtdcForceUserLogoutField(native, skipVTables);
        }

        private CSecurityFtdcForceUserLogoutField(global::LTSApi.CSecurityFtdcForceUserLogoutField.__Internal native, bool skipVTables = false)
            : this()
        {
            __instance = native;
        }

        private CSecurityFtdcForceUserLogoutField(void* native, bool skipVTables = false) : this()
        {
            __instance = *(global::LTSApi.CSecurityFtdcForceUserLogoutField.__Internal*) native;
        }

        public CSecurityFtdcForceUserLogoutField(global::LTSApi.CSecurityFtdcForceUserLogoutField _0)
            : this()
        {
            var ____arg0 = _0.__Instance;
            var __arg0 = new global::System.IntPtr(&____arg0);
            fixed (__Internal* __instancePtr = &__instance)
            {
                __Internal.cctor_1(new global::System.IntPtr(__instancePtr), __arg0);
            }
        }

        public sbyte[] BrokerID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.BrokerID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[11];
                        for (int i = 0; i < 11; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.BrokerID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 11; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] UserID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.UserID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[16];
                        for (int i = 0; i < 16; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.UserID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 16; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }
    }

    public unsafe partial struct CSecurityFtdcActivateBrokerUserField
    {
        public partial struct __Internal
        {
            public fixed sbyte BrokerID[11];

            public fixed sbyte UserID[16];

            [SuppressUnmanagedCodeSecurity]
            [DllImport("securitymduserapi", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0CSecurityFtdcActivateBrokerUserField@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);
        }

        private CSecurityFtdcActivateBrokerUserField.__Internal __instance;
        internal CSecurityFtdcActivateBrokerUserField.__Internal __Instance { get { return __instance; } }

        internal static global::LTSApi.CSecurityFtdcActivateBrokerUserField __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new CSecurityFtdcActivateBrokerUserField(native.ToPointer(), skipVTables);
        }

        internal static global::LTSApi.CSecurityFtdcActivateBrokerUserField __CreateInstance(global::LTSApi.CSecurityFtdcActivateBrokerUserField.__Internal native, bool skipVTables = false)
        {
            return new CSecurityFtdcActivateBrokerUserField(native, skipVTables);
        }

        private CSecurityFtdcActivateBrokerUserField(global::LTSApi.CSecurityFtdcActivateBrokerUserField.__Internal native, bool skipVTables = false)
            : this()
        {
            __instance = native;
        }

        private CSecurityFtdcActivateBrokerUserField(void* native, bool skipVTables = false) : this()
        {
            __instance = *(global::LTSApi.CSecurityFtdcActivateBrokerUserField.__Internal*) native;
        }

        public CSecurityFtdcActivateBrokerUserField(global::LTSApi.CSecurityFtdcActivateBrokerUserField _0)
            : this()
        {
            var ____arg0 = _0.__Instance;
            var __arg0 = new global::System.IntPtr(&____arg0);
            fixed (__Internal* __instancePtr = &__instance)
            {
                __Internal.cctor_1(new global::System.IntPtr(__instancePtr), __arg0);
            }
        }

        public sbyte[] BrokerID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.BrokerID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[11];
                        for (int i = 0; i < 11; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.BrokerID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 11; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] UserID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.UserID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[16];
                        for (int i = 0; i < 16; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.UserID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 16; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }
    }

    public unsafe partial struct CSecurityFtdcAuthRandCodeField
    {
        public partial struct __Internal
        {
            public fixed sbyte RandCode[17];

            [SuppressUnmanagedCodeSecurity]
            [DllImport("securitymduserapi", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0CSecurityFtdcAuthRandCodeField@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);
        }

        private CSecurityFtdcAuthRandCodeField.__Internal __instance;
        internal CSecurityFtdcAuthRandCodeField.__Internal __Instance { get { return __instance; } }

        internal static global::LTSApi.CSecurityFtdcAuthRandCodeField __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new CSecurityFtdcAuthRandCodeField(native.ToPointer(), skipVTables);
        }

        internal static global::LTSApi.CSecurityFtdcAuthRandCodeField __CreateInstance(global::LTSApi.CSecurityFtdcAuthRandCodeField.__Internal native, bool skipVTables = false)
        {
            return new CSecurityFtdcAuthRandCodeField(native, skipVTables);
        }

        private CSecurityFtdcAuthRandCodeField(global::LTSApi.CSecurityFtdcAuthRandCodeField.__Internal native, bool skipVTables = false)
            : this()
        {
            __instance = native;
        }

        private CSecurityFtdcAuthRandCodeField(void* native, bool skipVTables = false) : this()
        {
            __instance = *(global::LTSApi.CSecurityFtdcAuthRandCodeField.__Internal*) native;
        }

        public CSecurityFtdcAuthRandCodeField(global::LTSApi.CSecurityFtdcAuthRandCodeField _0)
            : this()
        {
            var ____arg0 = _0.__Instance;
            var __arg0 = new global::System.IntPtr(&____arg0);
            fixed (__Internal* __instancePtr = &__instance)
            {
                __Internal.cctor_1(new global::System.IntPtr(__instancePtr), __arg0);
            }
        }

        public sbyte[] RandCode
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.RandCode)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[17];
                        for (int i = 0; i < 17; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.RandCode)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 17; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }
    }

    public unsafe partial struct CSecurityFtdcInputOrderField
    {
        public partial struct __Internal
        {
            public fixed sbyte BrokerID[11];

            public fixed sbyte InvestorID[15];

            public fixed sbyte InstrumentID[31];

            public fixed sbyte OrderRef[13];

            public fixed sbyte UserID[16];

            public fixed sbyte ExchangeID[9];

            public sbyte OrderPriceType;

            public sbyte Direction;

            public fixed sbyte CombOffsetFlag[5];

            public fixed sbyte CombHedgeFlag[5];

            public fixed sbyte LimitPrice[16];

            public int VolumeTotalOriginal;

            public sbyte TimeCondition;

            public fixed sbyte GTDDate[9];

            public sbyte VolumeCondition;

            public int MinVolume;

            public sbyte ContingentCondition;

            public double StopPrice;

            public sbyte ForceCloseReason;

            public int IsAutoSuspend;

            public fixed sbyte BusinessUnit[21];

            public int RequestID;

            public int UserForceClose;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("securitymduserapi", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0CSecurityFtdcInputOrderField@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);
        }

        private CSecurityFtdcInputOrderField.__Internal __instance;
        internal CSecurityFtdcInputOrderField.__Internal __Instance { get { return __instance; } }

        internal static global::LTSApi.CSecurityFtdcInputOrderField __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new CSecurityFtdcInputOrderField(native.ToPointer(), skipVTables);
        }

        internal static global::LTSApi.CSecurityFtdcInputOrderField __CreateInstance(global::LTSApi.CSecurityFtdcInputOrderField.__Internal native, bool skipVTables = false)
        {
            return new CSecurityFtdcInputOrderField(native, skipVTables);
        }

        private CSecurityFtdcInputOrderField(global::LTSApi.CSecurityFtdcInputOrderField.__Internal native, bool skipVTables = false)
            : this()
        {
            __instance = native;
        }

        private CSecurityFtdcInputOrderField(void* native, bool skipVTables = false) : this()
        {
            __instance = *(global::LTSApi.CSecurityFtdcInputOrderField.__Internal*) native;
        }

        public CSecurityFtdcInputOrderField(global::LTSApi.CSecurityFtdcInputOrderField _0)
            : this()
        {
            var ____arg0 = _0.__Instance;
            var __arg0 = new global::System.IntPtr(&____arg0);
            fixed (__Internal* __instancePtr = &__instance)
            {
                __Internal.cctor_1(new global::System.IntPtr(__instancePtr), __arg0);
            }
        }

        public sbyte[] BrokerID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.BrokerID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[11];
                        for (int i = 0; i < 11; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.BrokerID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 11; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] InvestorID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.InvestorID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[15];
                        for (int i = 0; i < 15; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.InvestorID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 15; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] InstrumentID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.InstrumentID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[31];
                        for (int i = 0; i < 31; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.InstrumentID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 31; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] OrderRef
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.OrderRef)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[13];
                        for (int i = 0; i < 13; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.OrderRef)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 13; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] UserID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.UserID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[16];
                        for (int i = 0; i < 16; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.UserID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 16; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] ExchangeID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.ExchangeID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[9];
                        for (int i = 0; i < 9; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.ExchangeID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 9; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte OrderPriceType
        {
            get
            {
                return __instance.OrderPriceType;
            }

            set
            {
                __instance.OrderPriceType = value;
            }
        }

        public sbyte Direction
        {
            get
            {
                return __instance.Direction;
            }

            set
            {
                __instance.Direction = value;
            }
        }

        public sbyte[] CombOffsetFlag
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.CombOffsetFlag)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[5];
                        for (int i = 0; i < 5; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.CombOffsetFlag)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 5; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] CombHedgeFlag
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.CombHedgeFlag)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[5];
                        for (int i = 0; i < 5; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.CombHedgeFlag)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 5; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] LimitPrice
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.LimitPrice)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[16];
                        for (int i = 0; i < 16; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.LimitPrice)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 16; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public int VolumeTotalOriginal
        {
            get
            {
                return __instance.VolumeTotalOriginal;
            }

            set
            {
                __instance.VolumeTotalOriginal = value;
            }
        }

        public sbyte TimeCondition
        {
            get
            {
                return __instance.TimeCondition;
            }

            set
            {
                __instance.TimeCondition = value;
            }
        }

        public sbyte[] GTDDate
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.GTDDate)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[9];
                        for (int i = 0; i < 9; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.GTDDate)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 9; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte VolumeCondition
        {
            get
            {
                return __instance.VolumeCondition;
            }

            set
            {
                __instance.VolumeCondition = value;
            }
        }

        public int MinVolume
        {
            get
            {
                return __instance.MinVolume;
            }

            set
            {
                __instance.MinVolume = value;
            }
        }

        public sbyte ContingentCondition
        {
            get
            {
                return __instance.ContingentCondition;
            }

            set
            {
                __instance.ContingentCondition = value;
            }
        }

        public double StopPrice
        {
            get
            {
                return __instance.StopPrice;
            }

            set
            {
                __instance.StopPrice = value;
            }
        }

        public sbyte ForceCloseReason
        {
            get
            {
                return __instance.ForceCloseReason;
            }

            set
            {
                __instance.ForceCloseReason = value;
            }
        }

        public int IsAutoSuspend
        {
            get
            {
                return __instance.IsAutoSuspend;
            }

            set
            {
                __instance.IsAutoSuspend = value;
            }
        }

        public sbyte[] BusinessUnit
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.BusinessUnit)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[21];
                        for (int i = 0; i < 21; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.BusinessUnit)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 21; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public int RequestID
        {
            get
            {
                return __instance.RequestID;
            }

            set
            {
                __instance.RequestID = value;
            }
        }

        public int UserForceClose
        {
            get
            {
                return __instance.UserForceClose;
            }

            set
            {
                __instance.UserForceClose = value;
            }
        }
    }

    public unsafe partial struct CSecurityFtdcInputOrderActionField
    {
        public partial struct __Internal
        {
            public fixed sbyte BrokerID[11];

            public fixed sbyte InvestorID[15];

            public int OrderActionRef;

            public fixed sbyte OrderRef[13];

            public int RequestID;

            public int FrontID;

            public int SessionID;

            public fixed sbyte ExchangeID[9];

            public sbyte ActionFlag;

            public double LimitPrice;

            public int VolumeChange;

            public fixed sbyte UserID[16];

            public fixed sbyte InstrumentID[31];

            public fixed sbyte BranchPBU[21];

            public fixed sbyte OrderLocalID[13];

            [SuppressUnmanagedCodeSecurity]
            [DllImport("securitymduserapi", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0CSecurityFtdcInputOrderActionField@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);
        }

        private CSecurityFtdcInputOrderActionField.__Internal __instance;
        internal CSecurityFtdcInputOrderActionField.__Internal __Instance { get { return __instance; } }

        internal static global::LTSApi.CSecurityFtdcInputOrderActionField __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new CSecurityFtdcInputOrderActionField(native.ToPointer(), skipVTables);
        }

        internal static global::LTSApi.CSecurityFtdcInputOrderActionField __CreateInstance(global::LTSApi.CSecurityFtdcInputOrderActionField.__Internal native, bool skipVTables = false)
        {
            return new CSecurityFtdcInputOrderActionField(native, skipVTables);
        }

        private CSecurityFtdcInputOrderActionField(global::LTSApi.CSecurityFtdcInputOrderActionField.__Internal native, bool skipVTables = false)
            : this()
        {
            __instance = native;
        }

        private CSecurityFtdcInputOrderActionField(void* native, bool skipVTables = false) : this()
        {
            __instance = *(global::LTSApi.CSecurityFtdcInputOrderActionField.__Internal*) native;
        }

        public CSecurityFtdcInputOrderActionField(global::LTSApi.CSecurityFtdcInputOrderActionField _0)
            : this()
        {
            var ____arg0 = _0.__Instance;
            var __arg0 = new global::System.IntPtr(&____arg0);
            fixed (__Internal* __instancePtr = &__instance)
            {
                __Internal.cctor_1(new global::System.IntPtr(__instancePtr), __arg0);
            }
        }

        public sbyte[] BrokerID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.BrokerID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[11];
                        for (int i = 0; i < 11; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.BrokerID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 11; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] InvestorID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.InvestorID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[15];
                        for (int i = 0; i < 15; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.InvestorID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 15; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public int OrderActionRef
        {
            get
            {
                return __instance.OrderActionRef;
            }

            set
            {
                __instance.OrderActionRef = value;
            }
        }

        public sbyte[] OrderRef
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.OrderRef)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[13];
                        for (int i = 0; i < 13; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.OrderRef)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 13; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public int RequestID
        {
            get
            {
                return __instance.RequestID;
            }

            set
            {
                __instance.RequestID = value;
            }
        }

        public int FrontID
        {
            get
            {
                return __instance.FrontID;
            }

            set
            {
                __instance.FrontID = value;
            }
        }

        public int SessionID
        {
            get
            {
                return __instance.SessionID;
            }

            set
            {
                __instance.SessionID = value;
            }
        }

        public sbyte[] ExchangeID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.ExchangeID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[9];
                        for (int i = 0; i < 9; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.ExchangeID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 9; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte ActionFlag
        {
            get
            {
                return __instance.ActionFlag;
            }

            set
            {
                __instance.ActionFlag = value;
            }
        }

        public double LimitPrice
        {
            get
            {
                return __instance.LimitPrice;
            }

            set
            {
                __instance.LimitPrice = value;
            }
        }

        public int VolumeChange
        {
            get
            {
                return __instance.VolumeChange;
            }

            set
            {
                __instance.VolumeChange = value;
            }
        }

        public sbyte[] UserID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.UserID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[16];
                        for (int i = 0; i < 16; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.UserID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 16; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] InstrumentID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.InstrumentID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[31];
                        for (int i = 0; i < 31; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.InstrumentID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 31; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] BranchPBU
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.BranchPBU)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[21];
                        for (int i = 0; i < 21; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.BranchPBU)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 21; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] OrderLocalID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.OrderLocalID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[13];
                        for (int i = 0; i < 13; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.OrderLocalID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 13; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }
    }

    public unsafe partial struct CSecurityFtdcSpecificInstrumentField
    {
        public partial struct __Internal
        {
            public fixed sbyte InstrumentID[31];

            public fixed sbyte ExchangeID[9];

            [SuppressUnmanagedCodeSecurity]
            [DllImport("securitymduserapi", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0CSecurityFtdcSpecificInstrumentField@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);
        }

        private CSecurityFtdcSpecificInstrumentField.__Internal __instance;
        internal CSecurityFtdcSpecificInstrumentField.__Internal __Instance { get { return __instance; } }

        internal static global::LTSApi.CSecurityFtdcSpecificInstrumentField __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new CSecurityFtdcSpecificInstrumentField(native.ToPointer(), skipVTables);
        }

        internal static global::LTSApi.CSecurityFtdcSpecificInstrumentField __CreateInstance(global::LTSApi.CSecurityFtdcSpecificInstrumentField.__Internal native, bool skipVTables = false)
        {
            return new CSecurityFtdcSpecificInstrumentField(native, skipVTables);
        }

        private CSecurityFtdcSpecificInstrumentField(global::LTSApi.CSecurityFtdcSpecificInstrumentField.__Internal native, bool skipVTables = false)
            : this()
        {
            __instance = native;
        }

        private CSecurityFtdcSpecificInstrumentField(void* native, bool skipVTables = false) : this()
        {
            __instance = *(global::LTSApi.CSecurityFtdcSpecificInstrumentField.__Internal*) native;
        }

        public CSecurityFtdcSpecificInstrumentField(global::LTSApi.CSecurityFtdcSpecificInstrumentField _0)
            : this()
        {
            var ____arg0 = _0.__Instance;
            var __arg0 = new global::System.IntPtr(&____arg0);
            fixed (__Internal* __instancePtr = &__instance)
            {
                __Internal.cctor_1(new global::System.IntPtr(__instancePtr), __arg0);
            }
        }

        public sbyte[] InstrumentID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.InstrumentID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[31];
                        for (int i = 0; i < 31; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.InstrumentID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 31; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] ExchangeID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.ExchangeID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[9];
                        for (int i = 0; i < 9; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.ExchangeID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 9; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }
    }

    public unsafe partial struct CSecurityFtdcSpecificExchangeField
    {
        public partial struct __Internal
        {
            public fixed sbyte ExchangeID[9];

            [SuppressUnmanagedCodeSecurity]
            [DllImport("securitymduserapi", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0CSecurityFtdcSpecificExchangeField@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);
        }

        private CSecurityFtdcSpecificExchangeField.__Internal __instance;
        internal CSecurityFtdcSpecificExchangeField.__Internal __Instance { get { return __instance; } }

        internal static global::LTSApi.CSecurityFtdcSpecificExchangeField __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new CSecurityFtdcSpecificExchangeField(native.ToPointer(), skipVTables);
        }

        internal static global::LTSApi.CSecurityFtdcSpecificExchangeField __CreateInstance(global::LTSApi.CSecurityFtdcSpecificExchangeField.__Internal native, bool skipVTables = false)
        {
            return new CSecurityFtdcSpecificExchangeField(native, skipVTables);
        }

        private CSecurityFtdcSpecificExchangeField(global::LTSApi.CSecurityFtdcSpecificExchangeField.__Internal native, bool skipVTables = false)
            : this()
        {
            __instance = native;
        }

        private CSecurityFtdcSpecificExchangeField(void* native, bool skipVTables = false) : this()
        {
            __instance = *(global::LTSApi.CSecurityFtdcSpecificExchangeField.__Internal*) native;
        }

        public CSecurityFtdcSpecificExchangeField(global::LTSApi.CSecurityFtdcSpecificExchangeField _0)
            : this()
        {
            var ____arg0 = _0.__Instance;
            var __arg0 = new global::System.IntPtr(&____arg0);
            fixed (__Internal* __instancePtr = &__instance)
            {
                __Internal.cctor_1(new global::System.IntPtr(__instancePtr), __arg0);
            }
        }

        public sbyte[] ExchangeID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.ExchangeID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[9];
                        for (int i = 0; i < 9; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.ExchangeID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 9; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }
    }

    public unsafe partial struct CSecurityFtdcMarketDataBaseField
    {
        public partial struct __Internal
        {
            public fixed sbyte TradingDay[9];

            public double PreSettlementPrice;

            public double PreClosePrice;

            public double PreOpenInterest;

            public double PreDelta;

            public double PreIOPV;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("securitymduserapi", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0CSecurityFtdcMarketDataBaseField@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);
        }

        private CSecurityFtdcMarketDataBaseField.__Internal __instance;
        internal CSecurityFtdcMarketDataBaseField.__Internal __Instance { get { return __instance; } }

        internal static global::LTSApi.CSecurityFtdcMarketDataBaseField __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new CSecurityFtdcMarketDataBaseField(native.ToPointer(), skipVTables);
        }

        internal static global::LTSApi.CSecurityFtdcMarketDataBaseField __CreateInstance(global::LTSApi.CSecurityFtdcMarketDataBaseField.__Internal native, bool skipVTables = false)
        {
            return new CSecurityFtdcMarketDataBaseField(native, skipVTables);
        }

        private CSecurityFtdcMarketDataBaseField(global::LTSApi.CSecurityFtdcMarketDataBaseField.__Internal native, bool skipVTables = false)
            : this()
        {
            __instance = native;
        }

        private CSecurityFtdcMarketDataBaseField(void* native, bool skipVTables = false) : this()
        {
            __instance = *(global::LTSApi.CSecurityFtdcMarketDataBaseField.__Internal*) native;
        }

        public CSecurityFtdcMarketDataBaseField(global::LTSApi.CSecurityFtdcMarketDataBaseField _0)
            : this()
        {
            var ____arg0 = _0.__Instance;
            var __arg0 = new global::System.IntPtr(&____arg0);
            fixed (__Internal* __instancePtr = &__instance)
            {
                __Internal.cctor_1(new global::System.IntPtr(__instancePtr), __arg0);
            }
        }

        public sbyte[] TradingDay
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.TradingDay)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[9];
                        for (int i = 0; i < 9; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.TradingDay)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 9; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public double PreSettlementPrice
        {
            get
            {
                return __instance.PreSettlementPrice;
            }

            set
            {
                __instance.PreSettlementPrice = value;
            }
        }

        public double PreClosePrice
        {
            get
            {
                return __instance.PreClosePrice;
            }

            set
            {
                __instance.PreClosePrice = value;
            }
        }

        public double PreOpenInterest
        {
            get
            {
                return __instance.PreOpenInterest;
            }

            set
            {
                __instance.PreOpenInterest = value;
            }
        }

        public double PreDelta
        {
            get
            {
                return __instance.PreDelta;
            }

            set
            {
                __instance.PreDelta = value;
            }
        }

        public double PreIOPV
        {
            get
            {
                return __instance.PreIOPV;
            }

            set
            {
                __instance.PreIOPV = value;
            }
        }
    }

    public unsafe partial struct CSecurityFtdcMarketDataStaticField
    {
        public partial struct __Internal
        {
            public double OpenPrice;

            public double HighestPrice;

            public double LowestPrice;

            public double ClosePrice;

            public double UpperLimitPrice;

            public double LowerLimitPrice;

            public double SettlementPrice;

            public double CurrDelta;

            public double IOPV;

            public double AuctionPrice;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("securitymduserapi", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0CSecurityFtdcMarketDataStaticField@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);
        }

        private CSecurityFtdcMarketDataStaticField.__Internal __instance;
        internal CSecurityFtdcMarketDataStaticField.__Internal __Instance { get { return __instance; } }

        internal static global::LTSApi.CSecurityFtdcMarketDataStaticField __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new CSecurityFtdcMarketDataStaticField(native.ToPointer(), skipVTables);
        }

        internal static global::LTSApi.CSecurityFtdcMarketDataStaticField __CreateInstance(global::LTSApi.CSecurityFtdcMarketDataStaticField.__Internal native, bool skipVTables = false)
        {
            return new CSecurityFtdcMarketDataStaticField(native, skipVTables);
        }

        private CSecurityFtdcMarketDataStaticField(global::LTSApi.CSecurityFtdcMarketDataStaticField.__Internal native, bool skipVTables = false)
            : this()
        {
            __instance = native;
        }

        private CSecurityFtdcMarketDataStaticField(void* native, bool skipVTables = false) : this()
        {
            __instance = *(global::LTSApi.CSecurityFtdcMarketDataStaticField.__Internal*) native;
        }

        public CSecurityFtdcMarketDataStaticField(global::LTSApi.CSecurityFtdcMarketDataStaticField _0)
            : this()
        {
            var ____arg0 = _0.__Instance;
            var __arg0 = new global::System.IntPtr(&____arg0);
            fixed (__Internal* __instancePtr = &__instance)
            {
                __Internal.cctor_1(new global::System.IntPtr(__instancePtr), __arg0);
            }
        }

        public double OpenPrice
        {
            get
            {
                return __instance.OpenPrice;
            }

            set
            {
                __instance.OpenPrice = value;
            }
        }

        public double HighestPrice
        {
            get
            {
                return __instance.HighestPrice;
            }

            set
            {
                __instance.HighestPrice = value;
            }
        }

        public double LowestPrice
        {
            get
            {
                return __instance.LowestPrice;
            }

            set
            {
                __instance.LowestPrice = value;
            }
        }

        public double ClosePrice
        {
            get
            {
                return __instance.ClosePrice;
            }

            set
            {
                __instance.ClosePrice = value;
            }
        }

        public double UpperLimitPrice
        {
            get
            {
                return __instance.UpperLimitPrice;
            }

            set
            {
                __instance.UpperLimitPrice = value;
            }
        }

        public double LowerLimitPrice
        {
            get
            {
                return __instance.LowerLimitPrice;
            }

            set
            {
                __instance.LowerLimitPrice = value;
            }
        }

        public double SettlementPrice
        {
            get
            {
                return __instance.SettlementPrice;
            }

            set
            {
                __instance.SettlementPrice = value;
            }
        }

        public double CurrDelta
        {
            get
            {
                return __instance.CurrDelta;
            }

            set
            {
                __instance.CurrDelta = value;
            }
        }

        public double IOPV
        {
            get
            {
                return __instance.IOPV;
            }

            set
            {
                __instance.IOPV = value;
            }
        }

        public double AuctionPrice
        {
            get
            {
                return __instance.AuctionPrice;
            }

            set
            {
                __instance.AuctionPrice = value;
            }
        }
    }

    public unsafe partial struct CSecurityFtdcMarketDataLastMatchField
    {
        public partial struct __Internal
        {
            public double LastPrice;

            public double Volume;

            public double Turnover;

            public double OpenInterest;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("securitymduserapi", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0CSecurityFtdcMarketDataLastMatchField@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);
        }

        private CSecurityFtdcMarketDataLastMatchField.__Internal __instance;
        internal CSecurityFtdcMarketDataLastMatchField.__Internal __Instance { get { return __instance; } }

        internal static global::LTSApi.CSecurityFtdcMarketDataLastMatchField __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new CSecurityFtdcMarketDataLastMatchField(native.ToPointer(), skipVTables);
        }

        internal static global::LTSApi.CSecurityFtdcMarketDataLastMatchField __CreateInstance(global::LTSApi.CSecurityFtdcMarketDataLastMatchField.__Internal native, bool skipVTables = false)
        {
            return new CSecurityFtdcMarketDataLastMatchField(native, skipVTables);
        }

        private CSecurityFtdcMarketDataLastMatchField(global::LTSApi.CSecurityFtdcMarketDataLastMatchField.__Internal native, bool skipVTables = false)
            : this()
        {
            __instance = native;
        }

        private CSecurityFtdcMarketDataLastMatchField(void* native, bool skipVTables = false) : this()
        {
            __instance = *(global::LTSApi.CSecurityFtdcMarketDataLastMatchField.__Internal*) native;
        }

        public CSecurityFtdcMarketDataLastMatchField(global::LTSApi.CSecurityFtdcMarketDataLastMatchField _0)
            : this()
        {
            var ____arg0 = _0.__Instance;
            var __arg0 = new global::System.IntPtr(&____arg0);
            fixed (__Internal* __instancePtr = &__instance)
            {
                __Internal.cctor_1(new global::System.IntPtr(__instancePtr), __arg0);
            }
        }

        public double LastPrice
        {
            get
            {
                return __instance.LastPrice;
            }

            set
            {
                __instance.LastPrice = value;
            }
        }

        public double Volume
        {
            get
            {
                return __instance.Volume;
            }

            set
            {
                __instance.Volume = value;
            }
        }

        public double Turnover
        {
            get
            {
                return __instance.Turnover;
            }

            set
            {
                __instance.Turnover = value;
            }
        }

        public double OpenInterest
        {
            get
            {
                return __instance.OpenInterest;
            }

            set
            {
                __instance.OpenInterest = value;
            }
        }
    }

    public unsafe partial struct CSecurityFtdcMarketDataBestPriceField
    {
        public partial struct __Internal
        {
            public double BidPrice1;

            public double BidVolume1;

            public double AskPrice1;

            public double AskVolume1;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("securitymduserapi", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0CSecurityFtdcMarketDataBestPriceField@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);
        }

        private CSecurityFtdcMarketDataBestPriceField.__Internal __instance;
        internal CSecurityFtdcMarketDataBestPriceField.__Internal __Instance { get { return __instance; } }

        internal static global::LTSApi.CSecurityFtdcMarketDataBestPriceField __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new CSecurityFtdcMarketDataBestPriceField(native.ToPointer(), skipVTables);
        }

        internal static global::LTSApi.CSecurityFtdcMarketDataBestPriceField __CreateInstance(global::LTSApi.CSecurityFtdcMarketDataBestPriceField.__Internal native, bool skipVTables = false)
        {
            return new CSecurityFtdcMarketDataBestPriceField(native, skipVTables);
        }

        private CSecurityFtdcMarketDataBestPriceField(global::LTSApi.CSecurityFtdcMarketDataBestPriceField.__Internal native, bool skipVTables = false)
            : this()
        {
            __instance = native;
        }

        private CSecurityFtdcMarketDataBestPriceField(void* native, bool skipVTables = false) : this()
        {
            __instance = *(global::LTSApi.CSecurityFtdcMarketDataBestPriceField.__Internal*) native;
        }

        public CSecurityFtdcMarketDataBestPriceField(global::LTSApi.CSecurityFtdcMarketDataBestPriceField _0)
            : this()
        {
            var ____arg0 = _0.__Instance;
            var __arg0 = new global::System.IntPtr(&____arg0);
            fixed (__Internal* __instancePtr = &__instance)
            {
                __Internal.cctor_1(new global::System.IntPtr(__instancePtr), __arg0);
            }
        }

        public double BidPrice1
        {
            get
            {
                return __instance.BidPrice1;
            }

            set
            {
                __instance.BidPrice1 = value;
            }
        }

        public double BidVolume1
        {
            get
            {
                return __instance.BidVolume1;
            }

            set
            {
                __instance.BidVolume1 = value;
            }
        }

        public double AskPrice1
        {
            get
            {
                return __instance.AskPrice1;
            }

            set
            {
                __instance.AskPrice1 = value;
            }
        }

        public double AskVolume1
        {
            get
            {
                return __instance.AskVolume1;
            }

            set
            {
                __instance.AskVolume1 = value;
            }
        }
    }

    public unsafe partial struct CSecurityFtdcMarketDataBid23Field
    {
        public partial struct __Internal
        {
            public double BidPrice2;

            public double BidVolume2;

            public double BidPrice3;

            public double BidVolume3;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("securitymduserapi", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0CSecurityFtdcMarketDataBid23Field@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);
        }

        private CSecurityFtdcMarketDataBid23Field.__Internal __instance;
        internal CSecurityFtdcMarketDataBid23Field.__Internal __Instance { get { return __instance; } }

        internal static global::LTSApi.CSecurityFtdcMarketDataBid23Field __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new CSecurityFtdcMarketDataBid23Field(native.ToPointer(), skipVTables);
        }

        internal static global::LTSApi.CSecurityFtdcMarketDataBid23Field __CreateInstance(global::LTSApi.CSecurityFtdcMarketDataBid23Field.__Internal native, bool skipVTables = false)
        {
            return new CSecurityFtdcMarketDataBid23Field(native, skipVTables);
        }

        private CSecurityFtdcMarketDataBid23Field(global::LTSApi.CSecurityFtdcMarketDataBid23Field.__Internal native, bool skipVTables = false)
            : this()
        {
            __instance = native;
        }

        private CSecurityFtdcMarketDataBid23Field(void* native, bool skipVTables = false) : this()
        {
            __instance = *(global::LTSApi.CSecurityFtdcMarketDataBid23Field.__Internal*) native;
        }

        public CSecurityFtdcMarketDataBid23Field(global::LTSApi.CSecurityFtdcMarketDataBid23Field _0)
            : this()
        {
            var ____arg0 = _0.__Instance;
            var __arg0 = new global::System.IntPtr(&____arg0);
            fixed (__Internal* __instancePtr = &__instance)
            {
                __Internal.cctor_1(new global::System.IntPtr(__instancePtr), __arg0);
            }
        }

        public double BidPrice2
        {
            get
            {
                return __instance.BidPrice2;
            }

            set
            {
                __instance.BidPrice2 = value;
            }
        }

        public double BidVolume2
        {
            get
            {
                return __instance.BidVolume2;
            }

            set
            {
                __instance.BidVolume2 = value;
            }
        }

        public double BidPrice3
        {
            get
            {
                return __instance.BidPrice3;
            }

            set
            {
                __instance.BidPrice3 = value;
            }
        }

        public double BidVolume3
        {
            get
            {
                return __instance.BidVolume3;
            }

            set
            {
                __instance.BidVolume3 = value;
            }
        }
    }

    public unsafe partial struct CSecurityFtdcMarketDataAsk23Field
    {
        public partial struct __Internal
        {
            public double AskPrice2;

            public double AskVolume2;

            public double AskPrice3;

            public double AskVolume3;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("securitymduserapi", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0CSecurityFtdcMarketDataAsk23Field@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);
        }

        private CSecurityFtdcMarketDataAsk23Field.__Internal __instance;
        internal CSecurityFtdcMarketDataAsk23Field.__Internal __Instance { get { return __instance; } }

        internal static global::LTSApi.CSecurityFtdcMarketDataAsk23Field __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new CSecurityFtdcMarketDataAsk23Field(native.ToPointer(), skipVTables);
        }

        internal static global::LTSApi.CSecurityFtdcMarketDataAsk23Field __CreateInstance(global::LTSApi.CSecurityFtdcMarketDataAsk23Field.__Internal native, bool skipVTables = false)
        {
            return new CSecurityFtdcMarketDataAsk23Field(native, skipVTables);
        }

        private CSecurityFtdcMarketDataAsk23Field(global::LTSApi.CSecurityFtdcMarketDataAsk23Field.__Internal native, bool skipVTables = false)
            : this()
        {
            __instance = native;
        }

        private CSecurityFtdcMarketDataAsk23Field(void* native, bool skipVTables = false) : this()
        {
            __instance = *(global::LTSApi.CSecurityFtdcMarketDataAsk23Field.__Internal*) native;
        }

        public CSecurityFtdcMarketDataAsk23Field(global::LTSApi.CSecurityFtdcMarketDataAsk23Field _0)
            : this()
        {
            var ____arg0 = _0.__Instance;
            var __arg0 = new global::System.IntPtr(&____arg0);
            fixed (__Internal* __instancePtr = &__instance)
            {
                __Internal.cctor_1(new global::System.IntPtr(__instancePtr), __arg0);
            }
        }

        public double AskPrice2
        {
            get
            {
                return __instance.AskPrice2;
            }

            set
            {
                __instance.AskPrice2 = value;
            }
        }

        public double AskVolume2
        {
            get
            {
                return __instance.AskVolume2;
            }

            set
            {
                __instance.AskVolume2 = value;
            }
        }

        public double AskPrice3
        {
            get
            {
                return __instance.AskPrice3;
            }

            set
            {
                __instance.AskPrice3 = value;
            }
        }

        public double AskVolume3
        {
            get
            {
                return __instance.AskVolume3;
            }

            set
            {
                __instance.AskVolume3 = value;
            }
        }
    }

    public unsafe partial struct CSecurityFtdcMarketDataBid45Field
    {
        public partial struct __Internal
        {
            public double BidPrice4;

            public double BidVolume4;

            public double BidPrice5;

            public double BidVolume5;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("securitymduserapi", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0CSecurityFtdcMarketDataBid45Field@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);
        }

        private CSecurityFtdcMarketDataBid45Field.__Internal __instance;
        internal CSecurityFtdcMarketDataBid45Field.__Internal __Instance { get { return __instance; } }

        internal static global::LTSApi.CSecurityFtdcMarketDataBid45Field __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new CSecurityFtdcMarketDataBid45Field(native.ToPointer(), skipVTables);
        }

        internal static global::LTSApi.CSecurityFtdcMarketDataBid45Field __CreateInstance(global::LTSApi.CSecurityFtdcMarketDataBid45Field.__Internal native, bool skipVTables = false)
        {
            return new CSecurityFtdcMarketDataBid45Field(native, skipVTables);
        }

        private CSecurityFtdcMarketDataBid45Field(global::LTSApi.CSecurityFtdcMarketDataBid45Field.__Internal native, bool skipVTables = false)
            : this()
        {
            __instance = native;
        }

        private CSecurityFtdcMarketDataBid45Field(void* native, bool skipVTables = false) : this()
        {
            __instance = *(global::LTSApi.CSecurityFtdcMarketDataBid45Field.__Internal*) native;
        }

        public CSecurityFtdcMarketDataBid45Field(global::LTSApi.CSecurityFtdcMarketDataBid45Field _0)
            : this()
        {
            var ____arg0 = _0.__Instance;
            var __arg0 = new global::System.IntPtr(&____arg0);
            fixed (__Internal* __instancePtr = &__instance)
            {
                __Internal.cctor_1(new global::System.IntPtr(__instancePtr), __arg0);
            }
        }

        public double BidPrice4
        {
            get
            {
                return __instance.BidPrice4;
            }

            set
            {
                __instance.BidPrice4 = value;
            }
        }

        public double BidVolume4
        {
            get
            {
                return __instance.BidVolume4;
            }

            set
            {
                __instance.BidVolume4 = value;
            }
        }

        public double BidPrice5
        {
            get
            {
                return __instance.BidPrice5;
            }

            set
            {
                __instance.BidPrice5 = value;
            }
        }

        public double BidVolume5
        {
            get
            {
                return __instance.BidVolume5;
            }

            set
            {
                __instance.BidVolume5 = value;
            }
        }
    }

    public unsafe partial struct CSecurityFtdcMarketDataAsk45Field
    {
        public partial struct __Internal
        {
            public double AskPrice4;

            public double AskVolume4;

            public double AskPrice5;

            public double AskVolume5;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("securitymduserapi", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0CSecurityFtdcMarketDataAsk45Field@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);
        }

        private CSecurityFtdcMarketDataAsk45Field.__Internal __instance;
        internal CSecurityFtdcMarketDataAsk45Field.__Internal __Instance { get { return __instance; } }

        internal static global::LTSApi.CSecurityFtdcMarketDataAsk45Field __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new CSecurityFtdcMarketDataAsk45Field(native.ToPointer(), skipVTables);
        }

        internal static global::LTSApi.CSecurityFtdcMarketDataAsk45Field __CreateInstance(global::LTSApi.CSecurityFtdcMarketDataAsk45Field.__Internal native, bool skipVTables = false)
        {
            return new CSecurityFtdcMarketDataAsk45Field(native, skipVTables);
        }

        private CSecurityFtdcMarketDataAsk45Field(global::LTSApi.CSecurityFtdcMarketDataAsk45Field.__Internal native, bool skipVTables = false)
            : this()
        {
            __instance = native;
        }

        private CSecurityFtdcMarketDataAsk45Field(void* native, bool skipVTables = false) : this()
        {
            __instance = *(global::LTSApi.CSecurityFtdcMarketDataAsk45Field.__Internal*) native;
        }

        public CSecurityFtdcMarketDataAsk45Field(global::LTSApi.CSecurityFtdcMarketDataAsk45Field _0)
            : this()
        {
            var ____arg0 = _0.__Instance;
            var __arg0 = new global::System.IntPtr(&____arg0);
            fixed (__Internal* __instancePtr = &__instance)
            {
                __Internal.cctor_1(new global::System.IntPtr(__instancePtr), __arg0);
            }
        }

        public double AskPrice4
        {
            get
            {
                return __instance.AskPrice4;
            }

            set
            {
                __instance.AskPrice4 = value;
            }
        }

        public double AskVolume4
        {
            get
            {
                return __instance.AskVolume4;
            }

            set
            {
                __instance.AskVolume4 = value;
            }
        }

        public double AskPrice5
        {
            get
            {
                return __instance.AskPrice5;
            }

            set
            {
                __instance.AskPrice5 = value;
            }
        }

        public double AskVolume5
        {
            get
            {
                return __instance.AskVolume5;
            }

            set
            {
                __instance.AskVolume5 = value;
            }
        }
    }

    public unsafe partial struct CSecurityFtdcMarketDataUpdateTimeField
    {
        public partial struct __Internal
        {
            public fixed sbyte InstrumentID[31];

            public fixed sbyte UpdateTime[9];

            public int UpdateMillisec;

            public fixed sbyte ActionDay[9];

            public sbyte TradingPhase;

            public sbyte OpenRestriction;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("securitymduserapi", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0CSecurityFtdcMarketDataUpdateTimeField@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);
        }

        private CSecurityFtdcMarketDataUpdateTimeField.__Internal __instance;
        internal CSecurityFtdcMarketDataUpdateTimeField.__Internal __Instance { get { return __instance; } }

        internal static global::LTSApi.CSecurityFtdcMarketDataUpdateTimeField __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new CSecurityFtdcMarketDataUpdateTimeField(native.ToPointer(), skipVTables);
        }

        internal static global::LTSApi.CSecurityFtdcMarketDataUpdateTimeField __CreateInstance(global::LTSApi.CSecurityFtdcMarketDataUpdateTimeField.__Internal native, bool skipVTables = false)
        {
            return new CSecurityFtdcMarketDataUpdateTimeField(native, skipVTables);
        }

        private CSecurityFtdcMarketDataUpdateTimeField(global::LTSApi.CSecurityFtdcMarketDataUpdateTimeField.__Internal native, bool skipVTables = false)
            : this()
        {
            __instance = native;
        }

        private CSecurityFtdcMarketDataUpdateTimeField(void* native, bool skipVTables = false) : this()
        {
            __instance = *(global::LTSApi.CSecurityFtdcMarketDataUpdateTimeField.__Internal*) native;
        }

        public CSecurityFtdcMarketDataUpdateTimeField(global::LTSApi.CSecurityFtdcMarketDataUpdateTimeField _0)
            : this()
        {
            var ____arg0 = _0.__Instance;
            var __arg0 = new global::System.IntPtr(&____arg0);
            fixed (__Internal* __instancePtr = &__instance)
            {
                __Internal.cctor_1(new global::System.IntPtr(__instancePtr), __arg0);
            }
        }

        public sbyte[] InstrumentID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.InstrumentID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[31];
                        for (int i = 0; i < 31; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.InstrumentID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 31; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] UpdateTime
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.UpdateTime)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[9];
                        for (int i = 0; i < 9; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.UpdateTime)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 9; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public int UpdateMillisec
        {
            get
            {
                return __instance.UpdateMillisec;
            }

            set
            {
                __instance.UpdateMillisec = value;
            }
        }

        public sbyte[] ActionDay
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.ActionDay)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[9];
                        for (int i = 0; i < 9; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.ActionDay)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 9; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte TradingPhase
        {
            get
            {
                return __instance.TradingPhase;
            }

            set
            {
                __instance.TradingPhase = value;
            }
        }

        public sbyte OpenRestriction
        {
            get
            {
                return __instance.OpenRestriction;
            }

            set
            {
                __instance.OpenRestriction = value;
            }
        }
    }

    public unsafe partial struct CSecurityFtdcMarketDataAveragePriceField
    {
        public partial struct __Internal
        {
            public double AveragePrice;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("securitymduserapi", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0CSecurityFtdcMarketDataAveragePriceField@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);
        }

        private CSecurityFtdcMarketDataAveragePriceField.__Internal __instance;
        internal CSecurityFtdcMarketDataAveragePriceField.__Internal __Instance { get { return __instance; } }

        internal static global::LTSApi.CSecurityFtdcMarketDataAveragePriceField __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new CSecurityFtdcMarketDataAveragePriceField(native.ToPointer(), skipVTables);
        }

        internal static global::LTSApi.CSecurityFtdcMarketDataAveragePriceField __CreateInstance(global::LTSApi.CSecurityFtdcMarketDataAveragePriceField.__Internal native, bool skipVTables = false)
        {
            return new CSecurityFtdcMarketDataAveragePriceField(native, skipVTables);
        }

        private CSecurityFtdcMarketDataAveragePriceField(global::LTSApi.CSecurityFtdcMarketDataAveragePriceField.__Internal native, bool skipVTables = false)
            : this()
        {
            __instance = native;
        }

        private CSecurityFtdcMarketDataAveragePriceField(void* native, bool skipVTables = false) : this()
        {
            __instance = *(global::LTSApi.CSecurityFtdcMarketDataAveragePriceField.__Internal*) native;
        }

        public CSecurityFtdcMarketDataAveragePriceField(global::LTSApi.CSecurityFtdcMarketDataAveragePriceField _0)
            : this()
        {
            var ____arg0 = _0.__Instance;
            var __arg0 = new global::System.IntPtr(&____arg0);
            fixed (__Internal* __instancePtr = &__instance)
            {
                __Internal.cctor_1(new global::System.IntPtr(__instancePtr), __arg0);
            }
        }

        public double AveragePrice
        {
            get
            {
                return __instance.AveragePrice;
            }

            set
            {
                __instance.AveragePrice = value;
            }
        }
    }

    public unsafe partial struct CSecurityFtdcMarketDataExchangeField
    {
        public partial struct __Internal
        {
            public fixed sbyte ExchangeID[9];

            [SuppressUnmanagedCodeSecurity]
            [DllImport("securitymduserapi", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0CSecurityFtdcMarketDataExchangeField@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);
        }

        private CSecurityFtdcMarketDataExchangeField.__Internal __instance;
        internal CSecurityFtdcMarketDataExchangeField.__Internal __Instance { get { return __instance; } }

        internal static global::LTSApi.CSecurityFtdcMarketDataExchangeField __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new CSecurityFtdcMarketDataExchangeField(native.ToPointer(), skipVTables);
        }

        internal static global::LTSApi.CSecurityFtdcMarketDataExchangeField __CreateInstance(global::LTSApi.CSecurityFtdcMarketDataExchangeField.__Internal native, bool skipVTables = false)
        {
            return new CSecurityFtdcMarketDataExchangeField(native, skipVTables);
        }

        private CSecurityFtdcMarketDataExchangeField(global::LTSApi.CSecurityFtdcMarketDataExchangeField.__Internal native, bool skipVTables = false)
            : this()
        {
            __instance = native;
        }

        private CSecurityFtdcMarketDataExchangeField(void* native, bool skipVTables = false) : this()
        {
            __instance = *(global::LTSApi.CSecurityFtdcMarketDataExchangeField.__Internal*) native;
        }

        public CSecurityFtdcMarketDataExchangeField(global::LTSApi.CSecurityFtdcMarketDataExchangeField _0)
            : this()
        {
            var ____arg0 = _0.__Instance;
            var __arg0 = new global::System.IntPtr(&____arg0);
            fixed (__Internal* __instancePtr = &__instance)
            {
                __Internal.cctor_1(new global::System.IntPtr(__instancePtr), __arg0);
            }
        }

        public sbyte[] ExchangeID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.ExchangeID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[9];
                        for (int i = 0; i < 9; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.ExchangeID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 9; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }
    }

    public unsafe partial struct CSecurityFtdcDisseminationField
    {
        public partial struct __Internal
        {
            public short SequenceSeries;

            public int SequenceNo;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("securitymduserapi", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0CSecurityFtdcDisseminationField@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);
        }

        private CSecurityFtdcDisseminationField.__Internal __instance;
        internal CSecurityFtdcDisseminationField.__Internal __Instance { get { return __instance; } }

        internal static global::LTSApi.CSecurityFtdcDisseminationField __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new CSecurityFtdcDisseminationField(native.ToPointer(), skipVTables);
        }

        internal static global::LTSApi.CSecurityFtdcDisseminationField __CreateInstance(global::LTSApi.CSecurityFtdcDisseminationField.__Internal native, bool skipVTables = false)
        {
            return new CSecurityFtdcDisseminationField(native, skipVTables);
        }

        private CSecurityFtdcDisseminationField(global::LTSApi.CSecurityFtdcDisseminationField.__Internal native, bool skipVTables = false)
            : this()
        {
            __instance = native;
        }

        private CSecurityFtdcDisseminationField(void* native, bool skipVTables = false) : this()
        {
            __instance = *(global::LTSApi.CSecurityFtdcDisseminationField.__Internal*) native;
        }

        public CSecurityFtdcDisseminationField(global::LTSApi.CSecurityFtdcDisseminationField _0)
            : this()
        {
            var ____arg0 = _0.__Instance;
            var __arg0 = new global::System.IntPtr(&____arg0);
            fixed (__Internal* __instancePtr = &__instance)
            {
                __Internal.cctor_1(new global::System.IntPtr(__instancePtr), __arg0);
            }
        }

        public short SequenceSeries
        {
            get
            {
                return __instance.SequenceSeries;
            }

            set
            {
                __instance.SequenceSeries = value;
            }
        }

        public int SequenceNo
        {
            get
            {
                return __instance.SequenceNo;
            }

            set
            {
                __instance.SequenceNo = value;
            }
        }
    }

    public unsafe partial struct CSecurityFtdcInputFundTransferField
    {
        public partial struct __Internal
        {
            public fixed sbyte BrokerID[11];

            public fixed sbyte InvestorID[15];

            public fixed sbyte AccountID[15];

            public fixed sbyte Password[41];

            public fixed sbyte UserID[16];

            public double TradeAmount;

            public fixed sbyte Digest[36];

            public sbyte AccountType;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("securitymduserapi", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0CSecurityFtdcInputFundTransferField@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);
        }

        private CSecurityFtdcInputFundTransferField.__Internal __instance;
        internal CSecurityFtdcInputFundTransferField.__Internal __Instance { get { return __instance; } }

        internal static global::LTSApi.CSecurityFtdcInputFundTransferField __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new CSecurityFtdcInputFundTransferField(native.ToPointer(), skipVTables);
        }

        internal static global::LTSApi.CSecurityFtdcInputFundTransferField __CreateInstance(global::LTSApi.CSecurityFtdcInputFundTransferField.__Internal native, bool skipVTables = false)
        {
            return new CSecurityFtdcInputFundTransferField(native, skipVTables);
        }

        private CSecurityFtdcInputFundTransferField(global::LTSApi.CSecurityFtdcInputFundTransferField.__Internal native, bool skipVTables = false)
            : this()
        {
            __instance = native;
        }

        private CSecurityFtdcInputFundTransferField(void* native, bool skipVTables = false) : this()
        {
            __instance = *(global::LTSApi.CSecurityFtdcInputFundTransferField.__Internal*) native;
        }

        public CSecurityFtdcInputFundTransferField(global::LTSApi.CSecurityFtdcInputFundTransferField _0)
            : this()
        {
            var ____arg0 = _0.__Instance;
            var __arg0 = new global::System.IntPtr(&____arg0);
            fixed (__Internal* __instancePtr = &__instance)
            {
                __Internal.cctor_1(new global::System.IntPtr(__instancePtr), __arg0);
            }
        }

        public sbyte[] BrokerID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.BrokerID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[11];
                        for (int i = 0; i < 11; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.BrokerID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 11; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] InvestorID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.InvestorID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[15];
                        for (int i = 0; i < 15; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.InvestorID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 15; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] AccountID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.AccountID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[15];
                        for (int i = 0; i < 15; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.AccountID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 15; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] Password
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.Password)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[41];
                        for (int i = 0; i < 41; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.Password)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 41; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] UserID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.UserID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[16];
                        for (int i = 0; i < 16; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.UserID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 16; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public double TradeAmount
        {
            get
            {
                return __instance.TradeAmount;
            }

            set
            {
                __instance.TradeAmount = value;
            }
        }

        public sbyte[] Digest
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.Digest)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[36];
                        for (int i = 0; i < 36; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.Digest)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 36; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte AccountType
        {
            get
            {
                return __instance.AccountType;
            }

            set
            {
                __instance.AccountType = value;
            }
        }
    }

    public unsafe partial struct CSecurityFtdcFundTransferField
    {
        public partial struct __Internal
        {
            public fixed sbyte BrokerID[11];

            public fixed sbyte InvestorID[15];

            public fixed sbyte AccountID[15];

            public fixed sbyte Password[41];

            public fixed sbyte UserID[16];

            public double TradeAmount;

            public fixed sbyte Digest[36];

            public int SessionID;

            public int LiberSerial;

            public int PlateSerial;

            public fixed sbyte TransferSerial[13];

            public fixed sbyte TradingDay[9];

            public fixed sbyte TradeTime[9];

            public sbyte FundDirection;

            public int ErrorID;

            public fixed sbyte ErrorMsg[81];

            [SuppressUnmanagedCodeSecurity]
            [DllImport("securitymduserapi", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0CSecurityFtdcFundTransferField@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);
        }

        private CSecurityFtdcFundTransferField.__Internal __instance;
        internal CSecurityFtdcFundTransferField.__Internal __Instance { get { return __instance; } }

        internal static global::LTSApi.CSecurityFtdcFundTransferField __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new CSecurityFtdcFundTransferField(native.ToPointer(), skipVTables);
        }

        internal static global::LTSApi.CSecurityFtdcFundTransferField __CreateInstance(global::LTSApi.CSecurityFtdcFundTransferField.__Internal native, bool skipVTables = false)
        {
            return new CSecurityFtdcFundTransferField(native, skipVTables);
        }

        private CSecurityFtdcFundTransferField(global::LTSApi.CSecurityFtdcFundTransferField.__Internal native, bool skipVTables = false)
            : this()
        {
            __instance = native;
        }

        private CSecurityFtdcFundTransferField(void* native, bool skipVTables = false) : this()
        {
            __instance = *(global::LTSApi.CSecurityFtdcFundTransferField.__Internal*) native;
        }

        public CSecurityFtdcFundTransferField(global::LTSApi.CSecurityFtdcFundTransferField _0)
            : this()
        {
            var ____arg0 = _0.__Instance;
            var __arg0 = new global::System.IntPtr(&____arg0);
            fixed (__Internal* __instancePtr = &__instance)
            {
                __Internal.cctor_1(new global::System.IntPtr(__instancePtr), __arg0);
            }
        }

        public sbyte[] BrokerID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.BrokerID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[11];
                        for (int i = 0; i < 11; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.BrokerID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 11; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] InvestorID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.InvestorID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[15];
                        for (int i = 0; i < 15; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.InvestorID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 15; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] AccountID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.AccountID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[15];
                        for (int i = 0; i < 15; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.AccountID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 15; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] Password
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.Password)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[41];
                        for (int i = 0; i < 41; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.Password)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 41; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] UserID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.UserID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[16];
                        for (int i = 0; i < 16; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.UserID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 16; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public double TradeAmount
        {
            get
            {
                return __instance.TradeAmount;
            }

            set
            {
                __instance.TradeAmount = value;
            }
        }

        public sbyte[] Digest
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.Digest)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[36];
                        for (int i = 0; i < 36; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.Digest)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 36; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public int SessionID
        {
            get
            {
                return __instance.SessionID;
            }

            set
            {
                __instance.SessionID = value;
            }
        }

        public int LiberSerial
        {
            get
            {
                return __instance.LiberSerial;
            }

            set
            {
                __instance.LiberSerial = value;
            }
        }

        public int PlateSerial
        {
            get
            {
                return __instance.PlateSerial;
            }

            set
            {
                __instance.PlateSerial = value;
            }
        }

        public sbyte[] TransferSerial
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.TransferSerial)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[13];
                        for (int i = 0; i < 13; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.TransferSerial)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 13; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] TradingDay
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.TradingDay)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[9];
                        for (int i = 0; i < 9; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.TradingDay)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 9; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] TradeTime
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.TradeTime)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[9];
                        for (int i = 0; i < 9; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.TradeTime)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 9; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte FundDirection
        {
            get
            {
                return __instance.FundDirection;
            }

            set
            {
                __instance.FundDirection = value;
            }
        }

        public int ErrorID
        {
            get
            {
                return __instance.ErrorID;
            }

            set
            {
                __instance.ErrorID = value;
            }
        }

        public sbyte[] ErrorMsg
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.ErrorMsg)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[81];
                        for (int i = 0; i < 81; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.ErrorMsg)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 81; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }
    }

    public unsafe partial struct CSecurityFtdcQryFundTransferSerialField
    {
        public partial struct __Internal
        {
            public fixed sbyte BrokerID[11];

            public fixed sbyte AccountID[15];

            public sbyte AccountType;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("securitymduserapi", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0CSecurityFtdcQryFundTransferSerialField@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);
        }

        private CSecurityFtdcQryFundTransferSerialField.__Internal __instance;
        internal CSecurityFtdcQryFundTransferSerialField.__Internal __Instance { get { return __instance; } }

        internal static global::LTSApi.CSecurityFtdcQryFundTransferSerialField __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new CSecurityFtdcQryFundTransferSerialField(native.ToPointer(), skipVTables);
        }

        internal static global::LTSApi.CSecurityFtdcQryFundTransferSerialField __CreateInstance(global::LTSApi.CSecurityFtdcQryFundTransferSerialField.__Internal native, bool skipVTables = false)
        {
            return new CSecurityFtdcQryFundTransferSerialField(native, skipVTables);
        }

        private CSecurityFtdcQryFundTransferSerialField(global::LTSApi.CSecurityFtdcQryFundTransferSerialField.__Internal native, bool skipVTables = false)
            : this()
        {
            __instance = native;
        }

        private CSecurityFtdcQryFundTransferSerialField(void* native, bool skipVTables = false) : this()
        {
            __instance = *(global::LTSApi.CSecurityFtdcQryFundTransferSerialField.__Internal*) native;
        }

        public CSecurityFtdcQryFundTransferSerialField(global::LTSApi.CSecurityFtdcQryFundTransferSerialField _0)
            : this()
        {
            var ____arg0 = _0.__Instance;
            var __arg0 = new global::System.IntPtr(&____arg0);
            fixed (__Internal* __instancePtr = &__instance)
            {
                __Internal.cctor_1(new global::System.IntPtr(__instancePtr), __arg0);
            }
        }

        public sbyte[] BrokerID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.BrokerID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[11];
                        for (int i = 0; i < 11; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.BrokerID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 11; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] AccountID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.AccountID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[15];
                        for (int i = 0; i < 15; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.AccountID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 15; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte AccountType
        {
            get
            {
                return __instance.AccountType;
            }

            set
            {
                __instance.AccountType = value;
            }
        }
    }

    public unsafe partial struct CSecurityFtdcFundInterTransferField
    {
        public partial struct __Internal
        {
            public fixed sbyte BrokerID[11];

            public fixed sbyte InvestorID[15];

            public fixed sbyte UserID[16];

            public fixed sbyte AccountID[15];

            public fixed sbyte Password[41];

            public double TradeAmount;

            public sbyte TransferType;

            public int SerialID;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("securitymduserapi", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0CSecurityFtdcFundInterTransferField@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);
        }

        private CSecurityFtdcFundInterTransferField.__Internal __instance;
        internal CSecurityFtdcFundInterTransferField.__Internal __Instance { get { return __instance; } }

        internal static global::LTSApi.CSecurityFtdcFundInterTransferField __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new CSecurityFtdcFundInterTransferField(native.ToPointer(), skipVTables);
        }

        internal static global::LTSApi.CSecurityFtdcFundInterTransferField __CreateInstance(global::LTSApi.CSecurityFtdcFundInterTransferField.__Internal native, bool skipVTables = false)
        {
            return new CSecurityFtdcFundInterTransferField(native, skipVTables);
        }

        private CSecurityFtdcFundInterTransferField(global::LTSApi.CSecurityFtdcFundInterTransferField.__Internal native, bool skipVTables = false)
            : this()
        {
            __instance = native;
        }

        private CSecurityFtdcFundInterTransferField(void* native, bool skipVTables = false) : this()
        {
            __instance = *(global::LTSApi.CSecurityFtdcFundInterTransferField.__Internal*) native;
        }

        public CSecurityFtdcFundInterTransferField(global::LTSApi.CSecurityFtdcFundInterTransferField _0)
            : this()
        {
            var ____arg0 = _0.__Instance;
            var __arg0 = new global::System.IntPtr(&____arg0);
            fixed (__Internal* __instancePtr = &__instance)
            {
                __Internal.cctor_1(new global::System.IntPtr(__instancePtr), __arg0);
            }
        }

        public sbyte[] BrokerID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.BrokerID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[11];
                        for (int i = 0; i < 11; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.BrokerID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 11; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] InvestorID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.InvestorID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[15];
                        for (int i = 0; i < 15; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.InvestorID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 15; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] UserID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.UserID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[16];
                        for (int i = 0; i < 16; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.UserID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 16; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] AccountID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.AccountID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[15];
                        for (int i = 0; i < 15; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.AccountID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 15; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] Password
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.Password)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[41];
                        for (int i = 0; i < 41; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.Password)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 41; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public double TradeAmount
        {
            get
            {
                return __instance.TradeAmount;
            }

            set
            {
                __instance.TradeAmount = value;
            }
        }

        public sbyte TransferType
        {
            get
            {
                return __instance.TransferType;
            }

            set
            {
                __instance.TransferType = value;
            }
        }

        public int SerialID
        {
            get
            {
                return __instance.SerialID;
            }

            set
            {
                __instance.SerialID = value;
            }
        }
    }

    public unsafe partial struct CSecurityFtdcFundInterTransferSerialField
    {
        public partial struct __Internal
        {
            public fixed sbyte BrokerID[11];

            public fixed sbyte InvestorID[15];

            public fixed sbyte UserID[16];

            public fixed sbyte AccountID[15];

            public fixed sbyte Password[41];

            public double TradeAmount;

            public sbyte TransferType;

            public int SerialID;

            public fixed sbyte TransferTime[9];

            public int ErrorID;

            public fixed sbyte ErrorMsg[81];

            [SuppressUnmanagedCodeSecurity]
            [DllImport("securitymduserapi", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0CSecurityFtdcFundInterTransferSerialField@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);
        }

        private CSecurityFtdcFundInterTransferSerialField.__Internal __instance;
        internal CSecurityFtdcFundInterTransferSerialField.__Internal __Instance { get { return __instance; } }

        internal static global::LTSApi.CSecurityFtdcFundInterTransferSerialField __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new CSecurityFtdcFundInterTransferSerialField(native.ToPointer(), skipVTables);
        }

        internal static global::LTSApi.CSecurityFtdcFundInterTransferSerialField __CreateInstance(global::LTSApi.CSecurityFtdcFundInterTransferSerialField.__Internal native, bool skipVTables = false)
        {
            return new CSecurityFtdcFundInterTransferSerialField(native, skipVTables);
        }

        private CSecurityFtdcFundInterTransferSerialField(global::LTSApi.CSecurityFtdcFundInterTransferSerialField.__Internal native, bool skipVTables = false)
            : this()
        {
            __instance = native;
        }

        private CSecurityFtdcFundInterTransferSerialField(void* native, bool skipVTables = false) : this()
        {
            __instance = *(global::LTSApi.CSecurityFtdcFundInterTransferSerialField.__Internal*) native;
        }

        public CSecurityFtdcFundInterTransferSerialField(global::LTSApi.CSecurityFtdcFundInterTransferSerialField _0)
            : this()
        {
            var ____arg0 = _0.__Instance;
            var __arg0 = new global::System.IntPtr(&____arg0);
            fixed (__Internal* __instancePtr = &__instance)
            {
                __Internal.cctor_1(new global::System.IntPtr(__instancePtr), __arg0);
            }
        }

        public sbyte[] BrokerID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.BrokerID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[11];
                        for (int i = 0; i < 11; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.BrokerID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 11; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] InvestorID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.InvestorID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[15];
                        for (int i = 0; i < 15; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.InvestorID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 15; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] UserID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.UserID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[16];
                        for (int i = 0; i < 16; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.UserID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 16; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] AccountID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.AccountID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[15];
                        for (int i = 0; i < 15; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.AccountID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 15; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] Password
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.Password)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[41];
                        for (int i = 0; i < 41; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.Password)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 41; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public double TradeAmount
        {
            get
            {
                return __instance.TradeAmount;
            }

            set
            {
                __instance.TradeAmount = value;
            }
        }

        public sbyte TransferType
        {
            get
            {
                return __instance.TransferType;
            }

            set
            {
                __instance.TransferType = value;
            }
        }

        public int SerialID
        {
            get
            {
                return __instance.SerialID;
            }

            set
            {
                __instance.SerialID = value;
            }
        }

        public sbyte[] TransferTime
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.TransferTime)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[9];
                        for (int i = 0; i < 9; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.TransferTime)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 9; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public int ErrorID
        {
            get
            {
                return __instance.ErrorID;
            }

            set
            {
                __instance.ErrorID = value;
            }
        }

        public sbyte[] ErrorMsg
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.ErrorMsg)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[81];
                        for (int i = 0; i < 81; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.ErrorMsg)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 81; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }
    }

    public unsafe partial struct CSecurityFtdcQryFundInterTransferSerialField
    {
        public partial struct __Internal
        {
            public fixed sbyte BrokerID[11];

            public fixed sbyte InvestorID[15];

            [SuppressUnmanagedCodeSecurity]
            [DllImport("securitymduserapi", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0CSecurityFtdcQryFundInterTransferSerialField@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);
        }

        private CSecurityFtdcQryFundInterTransferSerialField.__Internal __instance;
        internal CSecurityFtdcQryFundInterTransferSerialField.__Internal __Instance { get { return __instance; } }

        internal static global::LTSApi.CSecurityFtdcQryFundInterTransferSerialField __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new CSecurityFtdcQryFundInterTransferSerialField(native.ToPointer(), skipVTables);
        }

        internal static global::LTSApi.CSecurityFtdcQryFundInterTransferSerialField __CreateInstance(global::LTSApi.CSecurityFtdcQryFundInterTransferSerialField.__Internal native, bool skipVTables = false)
        {
            return new CSecurityFtdcQryFundInterTransferSerialField(native, skipVTables);
        }

        private CSecurityFtdcQryFundInterTransferSerialField(global::LTSApi.CSecurityFtdcQryFundInterTransferSerialField.__Internal native, bool skipVTables = false)
            : this()
        {
            __instance = native;
        }

        private CSecurityFtdcQryFundInterTransferSerialField(void* native, bool skipVTables = false) : this()
        {
            __instance = *(global::LTSApi.CSecurityFtdcQryFundInterTransferSerialField.__Internal*) native;
        }

        public CSecurityFtdcQryFundInterTransferSerialField(global::LTSApi.CSecurityFtdcQryFundInterTransferSerialField _0)
            : this()
        {
            var ____arg0 = _0.__Instance;
            var __arg0 = new global::System.IntPtr(&____arg0);
            fixed (__Internal* __instancePtr = &__instance)
            {
                __Internal.cctor_1(new global::System.IntPtr(__instancePtr), __arg0);
            }
        }

        public sbyte[] BrokerID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.BrokerID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[11];
                        for (int i = 0; i < 11; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.BrokerID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 11; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] InvestorID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.InvestorID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[15];
                        for (int i = 0; i < 15; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.InvestorID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 15; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }
    }

    public unsafe partial struct CSecurityFtdcFetchDBInfoField
    {
        public partial struct __Internal
        {
            public fixed sbyte UserID[16];

            public fixed sbyte Password[41];

            public fixed sbyte DBIndex[81];

            public fixed sbyte IPAddress[16];

            public int IPPort;

            public fixed sbyte DBName[81];

            public fixed sbyte DBUserID[16];

            public fixed sbyte DBPassword[41];

            [SuppressUnmanagedCodeSecurity]
            [DllImport("securitymduserapi", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0CSecurityFtdcFetchDBInfoField@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);
        }

        private CSecurityFtdcFetchDBInfoField.__Internal __instance;
        internal CSecurityFtdcFetchDBInfoField.__Internal __Instance { get { return __instance; } }

        internal static global::LTSApi.CSecurityFtdcFetchDBInfoField __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new CSecurityFtdcFetchDBInfoField(native.ToPointer(), skipVTables);
        }

        internal static global::LTSApi.CSecurityFtdcFetchDBInfoField __CreateInstance(global::LTSApi.CSecurityFtdcFetchDBInfoField.__Internal native, bool skipVTables = false)
        {
            return new CSecurityFtdcFetchDBInfoField(native, skipVTables);
        }

        private CSecurityFtdcFetchDBInfoField(global::LTSApi.CSecurityFtdcFetchDBInfoField.__Internal native, bool skipVTables = false)
            : this()
        {
            __instance = native;
        }

        private CSecurityFtdcFetchDBInfoField(void* native, bool skipVTables = false) : this()
        {
            __instance = *(global::LTSApi.CSecurityFtdcFetchDBInfoField.__Internal*) native;
        }

        public CSecurityFtdcFetchDBInfoField(global::LTSApi.CSecurityFtdcFetchDBInfoField _0)
            : this()
        {
            var ____arg0 = _0.__Instance;
            var __arg0 = new global::System.IntPtr(&____arg0);
            fixed (__Internal* __instancePtr = &__instance)
            {
                __Internal.cctor_1(new global::System.IntPtr(__instancePtr), __arg0);
            }
        }

        public sbyte[] UserID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.UserID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[16];
                        for (int i = 0; i < 16; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.UserID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 16; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] Password
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.Password)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[41];
                        for (int i = 0; i < 41; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.Password)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 41; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] DBIndex
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.DBIndex)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[81];
                        for (int i = 0; i < 81; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.DBIndex)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 81; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] IPAddress
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.IPAddress)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[16];
                        for (int i = 0; i < 16; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.IPAddress)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 16; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public int IPPort
        {
            get
            {
                return __instance.IPPort;
            }

            set
            {
                __instance.IPPort = value;
            }
        }

        public sbyte[] DBName
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.DBName)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[81];
                        for (int i = 0; i < 81; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.DBName)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 81; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] DBUserID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.DBUserID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[16];
                        for (int i = 0; i < 16; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.DBUserID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 16; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] DBPassword
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.DBPassword)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[41];
                        for (int i = 0; i < 41; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.DBPassword)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 41; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }
    }

    public unsafe partial struct CSecurityFtdcMDUserInfoField
    {
        public partial struct __Internal
        {
            public fixed sbyte BrokerID[11];

            public fixed sbyte UserID[16];

            public fixed sbyte UserName[81];

            public fixed sbyte Password[41];

            public int MDSysID;

            public int MaxStockCount;

            public int MaxOptionsCount;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("securitymduserapi", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0CSecurityFtdcMDUserInfoField@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);
        }

        private CSecurityFtdcMDUserInfoField.__Internal __instance;
        internal CSecurityFtdcMDUserInfoField.__Internal __Instance { get { return __instance; } }

        internal static global::LTSApi.CSecurityFtdcMDUserInfoField __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new CSecurityFtdcMDUserInfoField(native.ToPointer(), skipVTables);
        }

        internal static global::LTSApi.CSecurityFtdcMDUserInfoField __CreateInstance(global::LTSApi.CSecurityFtdcMDUserInfoField.__Internal native, bool skipVTables = false)
        {
            return new CSecurityFtdcMDUserInfoField(native, skipVTables);
        }

        private CSecurityFtdcMDUserInfoField(global::LTSApi.CSecurityFtdcMDUserInfoField.__Internal native, bool skipVTables = false)
            : this()
        {
            __instance = native;
        }

        private CSecurityFtdcMDUserInfoField(void* native, bool skipVTables = false) : this()
        {
            __instance = *(global::LTSApi.CSecurityFtdcMDUserInfoField.__Internal*) native;
        }

        public CSecurityFtdcMDUserInfoField(global::LTSApi.CSecurityFtdcMDUserInfoField _0)
            : this()
        {
            var ____arg0 = _0.__Instance;
            var __arg0 = new global::System.IntPtr(&____arg0);
            fixed (__Internal* __instancePtr = &__instance)
            {
                __Internal.cctor_1(new global::System.IntPtr(__instancePtr), __arg0);
            }
        }

        public sbyte[] BrokerID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.BrokerID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[11];
                        for (int i = 0; i < 11; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.BrokerID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 11; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] UserID
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.UserID)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[16];
                        for (int i = 0; i < 16; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.UserID)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 16; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] UserName
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.UserName)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[81];
                        for (int i = 0; i < 81; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.UserName)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 81; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public sbyte[] Password
        {
            get
            {
                fixed (sbyte* __arrPtr = __instance.Password)
                {
                    sbyte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new sbyte[41];
                        for (int i = 0; i < 41; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (sbyte* __arrPtr = __instance.Password)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 41; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public int MDSysID
        {
            get
            {
                return __instance.MDSysID;
            }

            set
            {
                __instance.MDSysID = value;
            }
        }

        public int MaxStockCount
        {
            get
            {
                return __instance.MaxStockCount;
            }

            set
            {
                __instance.MaxStockCount = value;
            }
        }

        public int MaxOptionsCount
        {
            get
            {
                return __instance.MaxOptionsCount;
            }

            set
            {
                __instance.MaxOptionsCount = value;
            }
        }
    }

    public enum SECURITY_TE_RESUME_TYPE
    {
        SECURITY_TERT_RESTART = 0,
        SECURITY_TERT_RESUME = 1,
        SECURITY_TERT_QUICK = 2
    }

    public enum TSecurityFtdcAdjustStatusType
    {
        SECURITY_FTDC_AS_Record = 49,
        SECURITY_FTDC_AS_Check = 50
    }

    public enum TSecurityFtdcOfferTypeType
    {
        SECURITY_FTDC_OT_Normal = 48,
        SECURITY_FTDC_OT_Options = 49
    }

    public enum TSecurityFtdcOpenRestrictionType
    {
        SECURITY_FTDC_OR_None = 48,
        SECURITY_FTDC_OR_NoCoverOpen = 49,
        SECURITY_FTDC_OR_NoSellOpen = 50,
        SECURITY_FTDC_OR_NoSellAndCoverOpen = 51,
        SECURITY_FTDC_OR_NoBuyOpen = 52,
        SECURITY_FTDC_OR_NoBuyAndCoverOpen = 53,
        SECURITY_FTDC_OR_NoBuyAndSellOpen = 54,
        SECURITY_FTDC_OR_NoBuySellAndCoverOpen = 55
    }

    public enum TSecurityFtdcTradingPhaseType
    {
        SECURITY_FTDC_TP_NonTrade = 48,
        SECURITY_FTDC_TP_Bidding = 49,
        SECURITY_FTDC_TP_Continuous = 50,
        SECURITY_FTDC_TP_Suspension = 51,
        SECURITY_FTDC_TP_Fuse = 52,
        SECURITY_FTDC_TP_RecovFuse = 53,
        SECURITY_FTDC_TP_UnrecovFuse = 54,
        SECURITY_FTDC_TP_BiddingOver = 55,
        SECURITY_FTDC_TP_TempSuspension = 56
    }

    public enum TSecurityFtdcFundClassType
    {
        SECURITY_FTDC_FC_Subscription = 48,
        SECURITY_FTDC_FC_Normal = 49,
        SECURITY_FTDC_FC_Monetary = 50
    }

    public enum TSecurityFtdcExpireTypeType
    {
        SECURITY_FTDC_ET_Repurchase = 48,
        SECURITY_FTDC_ET_ReverseRepurch = 49,
        SECURITY_FTDC_ET_Bond = 50
    }

    public enum TSecurityFtdcDelivTypeType
    {
        SECURITY_FTDC_DT_ExecCallOptions = 48,
        SECURITY_FTDC_DT_ExecPutOptions = 49,
        SECURITY_FTDC_DT_UnavailStock = 50,
        SECURITY_FTDC_DT_UnavailRedMoney = 51
    }

    public enum TSecurityFtdcCloseDirectionType
    {
        SECURITY_FTDC_CD_CloseBuy = 33,
        SECURITY_FTDC_CD_CloseSell = 64,
        SECURITY_FTDC_CD_CloseCover = 35
    }

    public enum TSecurityFtdcInvestorLevelType
    {
        SECURITY_FTDC_IL_Level1 = 48,
        SECURITY_FTDC_IL_Level2 = 49,
        SECURITY_FTDC_IL_Level3 = 50
    }

    public enum TSecurityFtdcInstrumentTypeType
    {
        SECURITY_FTDC_IT_Normal = 48,
        SECURITY_FTDC_IT_CallOptions = 49,
        SECURITY_FTDC_IT_PutOptions = 50,
        SECURITY_FTDC_IT_NormalSTEP = 51
    }

    public enum TSecurityFtdcFundInterTransferTypeType
    {
        SECURITY_FTDC_FITT_TransferIn = 48,
        SECURITY_FTDC_FITT_TransferOut = 49
    }

    public enum TSecurityFtdcSplitMergeStatusType
    {
        SECURITY_FTDC_SMS_Allow = 48,
        SECURITY_FTDC_SMS_OnlySplit = 49,
        SECURITY_FTDC_SMS_OnlyMerge = 50,
        SECURITY_FTDC_SMS_Forbidden = 51
    }

    public enum TSecurityFtdcSettleSystemTypeType
    {
        SECURITY_FTDC_SST_Aboss = 49,
        SECURITY_FTDC_SST_HS = 50
    }

    public enum TSecurityFtdcTradeSpanType
    {
        SECURITY_FTDC_TS_Common = 49,
        SECURITY_FTDC_TS_Transfer = 50
    }

    public enum TSecurityFtdcRepayStockAlgoType
    {
        SECURITY_FTDC_RSA_Original = 48,
        SECURITY_FTDC_RSA_Ratio = 49,
        SECURITY_FTDC_RSA_Min = 50
    }

    public enum TSecurityFtdcAvailabilityFlagType
    {
        SECURITY_FTDC_AVAF_Invalid = 48,
        SECURITY_FTDC_AVAF_Valid = 49,
        SECURITY_FTDC_AVAF_Repeal = 50
    }

    public enum TSecurityFtdcTransferStatusType
    {
        SECURITY_FTDC_TRFS_Normal = 48,
        SECURITY_FTDC_TRFS_Repealed = 49
    }

    public enum TSecurityFtdcPwdFlagType
    {
        SECURITY_FTDC_BPWDF_NoCheck = 48,
        SECURITY_FTDC_BPWDF_BlankCheck = 49,
        SECURITY_FTDC_BPWDF_EncryptCheck = 50
    }

    public enum TSecurityFtdcBankAccTypeType
    {
        SECURITY_FTDC_BAT_BankBook = 49,
        SECURITY_FTDC_BAT_SavingCard = 50,
        SECURITY_FTDC_BAT_CreditCard = 51
    }

    public enum TSecurityFtdcFeePayFlagType
    {
        SECURITY_FTDC_FPF_BEN = 48,
        SECURITY_FTDC_FPF_OUR = 49,
        SECURITY_FTDC_FPF_SHA = 50
    }

    public enum TSecurityFtdcYesNoIndicatorType
    {
        SECURITY_FTDC_YNI_Yes = 48,
        SECURITY_FTDC_YNI_No = 49
    }

    public enum TSecurityFtdcCustTypeType
    {
        SECURITY_FTDC_CUSTT_Person = 48,
        SECURITY_FTDC_CUSTT_Institution = 49
    }

    public enum TSecurityFtdcLastFragmentType
    {
        SECURITY_FTDC_LF_Yes = 48,
        SECURITY_FTDC_LF_No = 49
    }

    public enum TSecurityFtdcFundStatusType
    {
        SECURITY_FTDC_FS_Record = 49,
        SECURITY_FTDC_FS_Check = 50,
        SECURITY_FTDC_FS_Charge = 51
    }

    public enum TSecurityFtdcBankFlagType
    {
        SECURITY_FTDC_BF_ICBC = 49,
        SECURITY_FTDC_BF_ABC = 50,
        SECURITY_FTDC_BF_BC = 51,
        SECURITY_FTDC_BF_CBC = 52,
        SECURITY_FTDC_BF_BOC = 53,
        SECURITY_FTDC_BF_Other = 90
    }

    public enum TSecurityFtdcFundDirectionType
    {
        SECURITY_FTDC_FD_In = 49,
        SECURITY_FTDC_FD_Out = 50
    }

    public enum TSecurityFtdcFundTypeType
    {
        SECURITY_FTDC_FT_Deposite = 49,
        SECURITY_FTDC_FT_ItemFund = 50,
        SECURITY_FTDC_FT_Company = 51
    }

    public enum TSecurityFtdcFundIOTypeType
    {
        SECURITY_FTDC_FIOT_FundIO = 49,
        SECURITY_FTDC_FIOT_Transfer = 50
    }

    public enum TSecurityFtdcHandleTradingAccountAlgoIDType
    {
        SECURITY_FTDC_HTAA_Base = 49
    }

    public enum TSecurityFtdcStockTradeTypeType
    {
        SECURITY_FTDC_STT_Stock = 48,
        SECURITY_FTDC_STT_BuyNetService = 49,
        SECURITY_FTDC_STT_CancelRepurchase = 50,
        SECURITY_FTDC_STT_CancelRegister = 51,
        SECURITY_FTDC_STT_Register = 52,
        SECURITY_FTDC_STT_PurchaseIssue = 53,
        SECURITY_FTDC_STT_Allotment = 54,
        SECURITY_FTDC_STT_SellTender = 55,
        SECURITY_FTDC_STT_BuyTender = 56,
        SECURITY_FTDC_STT_NetVote = 57,
        SECURITY_FTDC_STT_SellConvertibleBonds = 97,
        SECURITY_FTDC_STT_OptionExecute = 98,
        SECURITY_FTDC_STT_PurchaseOF = 99,
        SECURITY_FTDC_STT_RedeemOF = 100,
        SECURITY_FTDC_STT_SubscribeOF = 101,
        SECURITY_FTDC_STT_OFCustodianTranfer = 102,
        SECURITY_FTDC_STT_OFDividendConfig = 103,
        SECURITY_FTDC_STT_OFTransfer = 104,
        SECURITY_FTDC_STT_BondsIn = 105,
        SECURITY_FTDC_STT_BondsOut = 106,
        SECURITY_FTDC_STT_PurchaseETF = 107,
        SECURITY_FTDC_STT_RedeemETF = 108,
        SECURITY_FTDC_STT_ConvertibleRegister = 109
    }

    public enum TSecurityFtdcInstrumentRangeType
    {
        SECURITY_FTDC_INR_All = 49,
        SECURITY_FTDC_INR_Product = 50,
        SECURITY_FTDC_INR_Model = 51,
        SECURITY_FTDC_INR_Stock = 52,
        SECURITY_FTDC_INR_Market = 53
    }

    public enum TSecurityFtdcTradeSourceType
    {
        SECURITY_FTDC_TSRC_NORMAL = 48,
        SECURITY_FTDC_TSRC_QUERY = 49
    }

    public enum TSecurityFtdcOTPTypeType
    {
        SECURITY_FTDC_OTP_NONE = 48,
        SECURITY_FTDC_OTP_TOTP = 49
    }

    public enum TSecurityFtdcUserEventTypeType
    {
        SECURITY_FTDC_UET_Login = 49,
        SECURITY_FTDC_UET_Logout = 50,
        SECURITY_FTDC_UET_Trading = 51,
        SECURITY_FTDC_UET_TradingError = 52,
        SECURITY_FTDC_UET_UpdatePassword = 53,
        SECURITY_FTDC_UET_Authenticate = 54,
        SECURITY_FTDC_UET_Other = 57
    }

    public enum TSecurityFtdcPriceSourceType
    {
        SECURITY_FTDC_PSRC_LastPrice = 48,
        SECURITY_FTDC_PSRC_Buy = 49,
        SECURITY_FTDC_PSRC_Sell = 50
    }

    public enum TSecurityFtdcOrderSourceType
    {
        SECURITY_FTDC_OSRC_Participant = 48,
        SECURITY_FTDC_OSRC_Administrator = 49
    }

    public enum TSecurityFtdcTradingRightType
    {
        SECURITY_FTDC_TR_Allow = 48,
        SECURITY_FTDC_TR_Forbidden = 50
    }

    public enum TSecurityFtdcActionFlagType
    {
        SECURITY_FTDC_AF_Delete = 48,
        SECURITY_FTDC_AF_Modify = 51
    }

    public enum TSecurityFtdcContingentConditionType
    {
        SECURITY_FTDC_CC_Immediately = 49,
        SECURITY_FTDC_CC_Touch = 50,
        SECURITY_FTDC_CC_TouchProfit = 51,
        SECURITY_FTDC_CC_ParkedOrder = 52,
        SECURITY_FTDC_CC_LastPriceGreaterThanStopPrice = 53,
        SECURITY_FTDC_CC_LastPriceGreaterEqualStopPrice = 54,
        SECURITY_FTDC_CC_LastPriceLesserThanStopPrice = 55,
        SECURITY_FTDC_CC_LastPriceLesserEqualStopPrice = 56,
        SECURITY_FTDC_CC_AskPriceGreaterThanStopPrice = 57,
        SECURITY_FTDC_CC_AskPriceGreaterEqualStopPrice = 65,
        SECURITY_FTDC_CC_AskPriceLesserThanStopPrice = 66,
        SECURITY_FTDC_CC_AskPriceLesserEqualStopPrice = 67,
        SECURITY_FTDC_CC_BidPriceGreaterThanStopPrice = 68,
        SECURITY_FTDC_CC_BidPriceGreaterEqualStopPrice = 69,
        SECURITY_FTDC_CC_BidPriceLesserThanStopPrice = 70,
        SECURITY_FTDC_CC_BidPriceLesserEqualStopPrice = 72
    }

    public enum TSecurityFtdcVolumeConditionType
    {
        SECURITY_FTDC_VC_AV = 49,
        SECURITY_FTDC_VC_MV = 50,
        SECURITY_FTDC_VC_CV = 51
    }

    public enum TSecurityFtdcTimeConditionType
    {
        SECURITY_FTDC_TC_IOC = 49,
        SECURITY_FTDC_TC_GFS = 50,
        SECURITY_FTDC_TC_GFD = 51,
        SECURITY_FTDC_TC_GTD = 52,
        SECURITY_FTDC_TC_GTC = 53,
        SECURITY_FTDC_TC_GFA = 54
    }

    public enum TSecurityFtdcOrderTypeType
    {
        SECURITY_FTDC_ORDT_Normal = 48,
        SECURITY_FTDC_ORDT_DeriveFromQuote = 49,
        SECURITY_FTDC_ORDT_DeriveFromCombination = 50,
        SECURITY_FTDC_ORDT_Combination = 51,
        SECURITY_FTDC_ORDT_ConditionalOrder = 52,
        SECURITY_FTDC_ORDT_Swap = 53
    }

    public enum TSecurityFtdcForceCloseReasonType
    {
        SECURITY_FTDC_FCC_NotForceClose = 48,
        SECURITY_FTDC_FCC_LackDeposit = 49,
        SECURITY_FTDC_FCC_ClientOverPositionLimit = 50,
        SECURITY_FTDC_FCC_MemberOverPositionLimit = 51,
        SECURITY_FTDC_FCC_NotMultiple = 52,
        SECURITY_FTDC_FCC_Violation = 53,
        SECURITY_FTDC_FCC_Other = 54,
        SECURITY_FTDC_FCC_PersonDeliv = 55
    }

    public enum TSecurityFtdcOffsetFlagType
    {
        SECURITY_FTDC_OF_Open = 48,
        SECURITY_FTDC_OF_Close = 49,
        SECURITY_FTDC_OF_ForceClose = 50,
        SECURITY_FTDC_OF_CloseToday = 51,
        SECURITY_FTDC_OF_CloseYesterday = 52,
        SECURITY_FTDC_OF_ForceOff = 53,
        SECURITY_FTDC_OF_LocalForceClose = 54
    }

    public enum TSecurityFtdcOrderPriceTypeType
    {
        SECURITY_FTDC_OPT_AnyPrice = 49,
        SECURITY_FTDC_OPT_LimitPrice = 50,
        SECURITY_FTDC_OPT_BestPrice = 51,
        SECURITY_FTDC_OPT_BestLimitPrice = 52,
        SECURITY_FTDC_OPT_AllPrice = 53,
        SECURITY_FTDC_OPT_ForwardBestPrice = 54,
        SECURITY_FTDC_OPT_ReverseBestPrice = 55,
        SECURITY_FTDC_OPT_Any2LimitPrice = 56,
        SECURITY_FTDC_OPT_AllLimitPrice = 57,
        SECURITY_FTDC_OPT_ActiveANetPassSvrCode = 71,
        SECURITY_FTDC_OPT_InactiveANetPassSvrCode = 72,
        SECURITY_FTDC_OPT_ActiveBNetPassSvrCode = 73,
        SECURITY_FTDC_OPT_InactiveBNetPassSvrCode = 74,
        SECURITY_FTDC_OPT_Repurchase = 75,
        SECURITY_FTDC_OPT_DesignatedCancel = 76,
        SECURITY_FTDC_OPT_Designated = 77,
        SECURITY_FTDC_OPT_SubscribingShares = 78,
        SECURITY_FTDC_OPT_Split = 79,
        SECURITY_FTDC_OPT_TenderOffer = 80,
        SECURITY_FTDC_OPT_TenderOfferCancel = 81,
        SECURITY_FTDC_OPT_Ballot = 82,
        SECURITY_FTDC_OPT_ConvertibleBondsConvet = 83,
        SECURITY_FTDC_OPT_ConvertibleBondsRepurchase = 84,
        SECURITY_FTDC_OPT_Exercise = 85,
        SECURITY_FTDC_OPT_PurchasingFunds = 86,
        SECURITY_FTDC_OPT_RedemingFunds = 87,
        SECURITY_FTDC_OPT_SubscribingFunds = 88,
        SECURITY_FTDC_OPT_LOFIssue = 89,
        SECURITY_FTDC_OPT_LOFSetBonusType = 90,
        SECURITY_FTDC_OPT_LOFConvert = 97,
        SECURITY_FTDC_OPT_DebentureStockIn = 98,
        SECURITY_FTDC_OPT_DebentureStockOut = 99,
        SECURITY_FTDC_OPT_PurchasesETF = 100,
        SECURITY_FTDC_OPT_RedeemETF = 101
    }

    public enum TSecurityFtdcPosiDirectionType
    {
        SECURITY_FTDC_PD_Net = 49,
        SECURITY_FTDC_PD_Long = 50,
        SECURITY_FTDC_PD_Short = 51,
        SECURITY_FTDC_PD_Covered = 52
    }

    public enum TSecurityFtdcTradingRoleType
    {
        SECURITY_FTDC_ER_Broker = 49,
        SECURITY_FTDC_ER_Host = 50,
        SECURITY_FTDC_ER_Maker = 51
    }

    public enum TSecurityFtdcPositionDateType
    {
        SECURITY_FTDC_PSD_Today = 49,
        SECURITY_FTDC_PSD_History = 50
    }

    public enum TSecurityFtdcOrderSubmitStatusType
    {
        SECURITY_FTDC_OSS_InsertSubmitted = 48,
        SECURITY_FTDC_OSS_CancelSubmitted = 49,
        SECURITY_FTDC_OSS_ModifySubmitted = 50,
        SECURITY_FTDC_OSS_Accepted = 51,
        SECURITY_FTDC_OSS_InsertRejected = 52,
        SECURITY_FTDC_OSS_CancelRejected = 53,
        SECURITY_FTDC_OSS_ModifyRejected = 54
    }

    public enum TSecurityFtdcOrderStatusType
    {
        SECURITY_FTDC_OST_AllTraded = 48,
        SECURITY_FTDC_OST_PartTradedQueueing = 49,
        SECURITY_FTDC_OST_PartTradedNotQueueing = 50,
        SECURITY_FTDC_OST_NoTradeQueueing = 51,
        SECURITY_FTDC_OST_NoTradeNotQueueing = 52,
        SECURITY_FTDC_OST_Canceled = 53,
        SECURITY_FTDC_OST_Unknown = 97,
        SECURITY_FTDC_OST_NotTouched = 98,
        SECURITY_FTDC_OST_Touched = 99
    }

    public enum TSecurityFtdcOrderActionStatusType
    {
        SECURITY_FTDC_OAS_Submitted = 97,
        SECURITY_FTDC_OAS_Accepted = 98,
        SECURITY_FTDC_OAS_Rejected = 99
    }

    public enum TSecurityFtdcTraderConnectStatusType
    {
        SECURITY_FTDC_TCS_NotConnected = 49,
        SECURITY_FTDC_TCS_Connected = 50,
        SECURITY_FTDC_TCS_QryInstrumentSent = 51,
        SECURITY_FTDC_TCS_SubPrivateFlow = 52
    }

    public enum TSecurityFtdcDataSyncStatusType
    {
        SECURITY_FTDC_DS_Asynchronous = 49,
        SECURITY_FTDC_DS_Synchronizing = 50,
        SECURITY_FTDC_DS_Synchronized = 51
    }

    public enum TSecurityFtdcInvestorRangeType
    {
        SECURITY_FTDC_IR_All = 49,
        SECURITY_FTDC_IR_Group = 50,
        SECURITY_FTDC_IR_Single = 51
    }

    public enum TSecurityFtdcTradeParamIDType
    {
        SECURITY_FTDC_TPID_EncryptionStandard = 69,
        SECURITY_FTDC_TPID_SingleUserSessionMaxNum = 83,
        SECURITY_FTDC_TPID_LoginFailMaxNum = 76,
        SECURITY_FTDC_TPID_IsAuthForce = 65,
        SECURITY_FTDC_TPID_GenUserEvent = 71,
        SECURITY_FTDC_TPID_StartOrderLocalID = 79,
        SECURITY_FTDC_TPID_RepayStockAlgo = 82,
        SECURITY_FTDC_TPID_DeriveWithdrawRatio = 68,
        SECURITY_FTDC_TPID_ExecuteStartTime = 84,
        SECURITY_FTDC_TPID_OnlyRepayHisStock = 72,
        SECURITY_FTDC_TPID_OpenRestrictType = 88,
        SECURITY_FTDC_TPID_IPOFrozeCash = 73
    }

    public enum TSecurityFtdcOpenRestrictTypeType
    {
        SECURITY_FTDC_ORT_BuyOpen = 48,
        SECURITY_FTDC_ORT_AllOpen = 49
    }

    public enum TSecurityFtdcHandlePositionAlgoIDType
    {
        SECURITY_FTDC_HPA_Base = 49,
        SECURITY_FTDC_HPA_NoneTrade = 52,
        SECURITY_FTDC_HPA_Stock = 53
    }

    public enum TSecurityFtdcAllWithoutTradeType
    {
        SECURITY_FTDC_AWT_Enable = 48,
        SECURITY_FTDC_AWT_Disable = 50,
        SECURITY_FTDC_AWT_NoHoldEnable = 51
    }

    public enum TSecurityFtdcIncludeCloseProfitType
    {
        SECURITY_FTDC_ICP_Include = 48,
        SECURITY_FTDC_ICP_NotInclude = 50
    }

    public enum TSecurityFtdcAlgorithmType
    {
        SECURITY_FTDC_AG_All = 49,
        SECURITY_FTDC_AG_OnlyLost = 50,
        SECURITY_FTDC_AG_OnlyGain = 51,
        SECURITY_FTDC_AG_None = 52
    }

    public enum TSecurityFtdcMarginPriceTypeType
    {
        SECURITY_FTDC_MPT_PreSettlementPrice = 49,
        SECURITY_FTDC_MPT_SettlementPrice = 50,
        SECURITY_FTDC_MPT_AveragePrice = 51,
        SECURITY_FTDC_MPT_OpenPrice = 52
    }

    public enum TSecurityFtdcCapitalStockTypeType
    {
        SECURITY_FTDC_CPTSTOCK_TOTALSTOCK = 49,
        SECURITY_FTDC_CPTSTOCK_CIRCULATION = 50
    }

    public enum TSecurityFtdcETFCurrenceReplaceStatusType
    {
        SECURITY_FTDC_ETFCRS_Forbidden = 48,
        SECURITY_FTDC_ETFCRS_Allow = 49,
        SECURITY_FTDC_ETFCRS_Force = 50,
        SECURITY_FTDC_ETFCRS_CrossMarketComp = 51,
        SECURITY_FTDC_ETFCRS_CrossMarketFroce = 52
    }

    public enum TSecurityFtdcCreationredemptionStatusType
    {
        SECURITY_FTDC_CDS_Forbidden = 48,
        SECURITY_FTDC_CDS_Allow = 49,
        SECURITY_FTDC_CDS_OnlyPurchase = 50,
        SECURITY_FTDC_CDS_OnlyRedeem = 51
    }

    public enum TSecurityFtdcTradeTypeType
    {
        SECURITY_FTDC_TRDT_Common = 48,
        SECURITY_FTDC_TRDT_OptionsExecution = 49,
        SECURITY_FTDC_TRDT_OTC = 50,
        SECURITY_FTDC_TRDT_EFPDerived = 51,
        SECURITY_FTDC_TRDT_CombinationDerived = 52,
        SECURITY_FTDC_TRDT_EFTPurchase = 53,
        SECURITY_FTDC_TRDT_EFTRedem = 54
    }

    public enum TSecurityFtdcDirectionType
    {
        SECURITY_FTDC_D_Buy = 48,
        SECURITY_FTDC_D_Sell = 49,
        SECURITY_FTDC_D_ETFPur = 50,
        SECURITY_FTDC_D_ETFRed = 51,
        SECURITY_FTDC_D_CashIn = 52,
        SECURITY_FTDC_D_PledgeBondIn = 53,
        SECURITY_FTDC_D_PledgeBondOut = 54,
        SECURITY_FTDC_D_Rationed = 55,
        SECURITY_FTDC_D_DepositoryTransfer = 56,
        SECURITY_FTDC_D_CreditRationed = 57,
        SECURITY_FTDC_D_BuyCollateral = 65,
        SECURITY_FTDC_D_SellCollateral = 66,
        SECURITY_FTDC_D_CollateralTransferIn = 67,
        SECURITY_FTDC_D_CollateralTransferOut = 68,
        SECURITY_FTDC_D_MarginTrade = 69,
        SECURITY_FTDC_D_ShortSell = 70,
        SECURITY_FTDC_D_RepayMargin = 71,
        SECURITY_FTDC_D_RepayStock = 72,
        SECURITY_FTDC_D_DirectRepayMargin = 73,
        SECURITY_FTDC_D_DirectRepayStock = 74,
        SECURITY_FTDC_D_ExcessStockTransfer = 75,
        SECURITY_FTDC_D_OFPur = 76,
        SECURITY_FTDC_D_OFRed = 77,
        SECURITY_FTDC_D_SFSplit = 78,
        SECURITY_FTDC_D_SFMerge = 79,
        SECURITY_FTDC_D_Covered = 80,
        SECURITY_FTDC_D_Freeze = 81,
        SECURITY_FTDC_D_Execute = 82,
        SECURITY_FTDC_D_CBRed = 83,
        SECURITY_FTDC_D_CBConv = 84,
        SECURITY_FTDC_D_OFSub = 85
    }

    public enum TSecurityFtdcHedgeFlagType
    {
        SECURITY_FTDC_HF_Speculation = 49,
        SECURITY_FTDC_HF_Hedge = 51
    }

    public enum TSecurityFtdcUserRightTypeType
    {
        SECURITY_FTDC_URT_Logon = 49,
        SECURITY_FTDC_URT_Transfer = 50,
        SECURITY_FTDC_URT_EMail = 51,
        SECURITY_FTDC_URT_Fax = 52,
        SECURITY_FTDC_URT_ConditionOrder = 53
    }

    public enum TSecurityFtdcDepartmentRangeType
    {
        SECURITY_FTDC_DR_All = 49,
        SECURITY_FTDC_DR_Group = 50,
        SECURITY_FTDC_DR_Single = 51
    }

    public enum TSecurityFtdcAccountTypeType
    {
        SECURITY_FTDC_AcT_Normal = 49,
        SECURITY_FTDC_AcT_Credit = 50,
        SECURITY_FTDC_AcT_Derive = 51,
        SECURITY_FTDC_AcT_Other = 52
    }

    public enum TSecurityFtdcBrokerFunctionCodeType
    {
        SECURITY_FTDC_BFC_ForceUserLogout = 49,
        SECURITY_FTDC_BFC_UserPasswordUpdate = 50,
        SECURITY_FTDC_BFC_SyncBrokerData = 51,
        SECURITY_FTDC_BFC_OrderInsert = 53,
        SECURITY_FTDC_BFC_OrderAction = 54,
        SECURITY_FTDC_BFC_AllQuery = 55,
        SECURITY_FTDC_BFC_UnkownOrderAction = 56,
        SECURITY_FTDC_BFC_DepositoryTransfer = 57,
        SECURITY_FTDC_BFC_ExcessStockTransfer = 65,
        SECURITY_FTDC_BFC_FundInterTransfer = 66,
        SECURITY_FTDC_BFC_log = 97,
        SECURITY_FTDC_BFC_BaseQry = 98,
        SECURITY_FTDC_BFC_TradeQry = 99,
        SECURITY_FTDC_BFC_Trade = 100,
        SECURITY_FTDC_BFC_Virement = 101,
        SECURITY_FTDC_BFC_Session = 103,
        SECURITY_FTDC_BFC_SyncOTP = 69
    }

    public enum TSecurityFtdcUserTypeType
    {
        SECURITY_FTDC_UT_Investor = 48,
        SECURITY_FTDC_UT_Operator = 49,
        SECURITY_FTDC_UT_SuperUser = 50
    }

    public enum TSecurityFtdcFunctionCodeType
    {
        SECURITY_FTDC_FC_ForceUserLogout = 50,
        SECURITY_FTDC_FC_UserPasswordUpdate = 51,
        SECURITY_FTDC_FC_BrokerPasswordUpdate = 52,
        SECURITY_FTDC_FC_InvestorPasswordUpdate = 53,
        SECURITY_FTDC_FC_OrderInsert = 54,
        SECURITY_FTDC_FC_OrderAction = 55,
        SECURITY_FTDC_FC_SyncSystemData = 56,
        SECURITY_FTDC_FC_SyncBrokerData = 57,
        SECURITY_FTDC_FC_SuperQuery = 66,
        SECURITY_FTDC_FC_ParkedOrderInsert = 67,
        SECURITY_FTDC_FC_ParkedOrderAction = 68,
        SECURITY_FTDC_FC_SyncOTP = 69,
        SECURITY_FTDC_FC_UnkownOrderAction = 70,
        SECURITY_FTDC_FC_DepositoryTransfer = 71,
        SECURITY_FTDC_FC_ExcessStockTransfer = 72
    }

    public enum TSecurityFtdcClientTypeType
    {
        SECURITY_FTDC_CLT_Normal = 49,
        SECURITY_FTDC_CLT_Credit = 50,
        SECURITY_FTDC_CLT_Derive = 51,
        SECURITY_FTDC_CLT_Other = 52
    }

    public enum TSecurityFtdcIdCardTypeType
    {
        SECURITY_FTDC_ICT_EID = 48,
        SECURITY_FTDC_ICT_IDCard = 49,
        SECURITY_FTDC_ICT_OfficerIDCard = 50,
        SECURITY_FTDC_ICT_PoliceIDCard = 51,
        SECURITY_FTDC_ICT_SoldierIDCard = 52,
        SECURITY_FTDC_ICT_HouseholdRegister = 53,
        SECURITY_FTDC_ICT_Passport = 54,
        SECURITY_FTDC_ICT_TaiwanCompatriotIDCard = 55,
        SECURITY_FTDC_ICT_HomeComingCard = 56,
        SECURITY_FTDC_ICT_LicenseNo = 57,
        SECURITY_FTDC_ICT_TaxNo = 65,
        SECURITY_FTDC_ICT_OtherCard = 120
    }

    public enum TSecurityFtdcPosTradeTypeType
    {
        SECURITY_FTDC_PTT_CanSelTodayPos = 49,
        SECURITY_FTDC_PTT_CannotSellTodayPos = 50
    }

    public enum TSecurityFtdcInstLifePhaseType
    {
        SECURITY_FTDC_IP_NotStart = 48,
        SECURITY_FTDC_IP_Started = 49,
        SECURITY_FTDC_IP_Pause = 50,
        SECURITY_FTDC_IP_Expired = 51
    }

    public enum TSecurityFtdcPositionDateTypeType
    {
        SECURITY_FTDC_PDT_UseHistory = 49,
        SECURITY_FTDC_PDT_NoUseHistory = 50
    }

    public enum TSecurityFtdcPositionTypeType
    {
        SECURITY_FTDC_PT_Net = 49,
        SECURITY_FTDC_PT_Gross = 50
    }

    public enum TSecurityFtdcProductClassType
    {
        SECURITY_FTDC_PC_Futures = 49,
        SECURITY_FTDC_PC_Options = 50,
        SECURITY_FTDC_PC_Combination = 51,
        SECURITY_FTDC_PC_Spot = 52,
        SECURITY_FTDC_PC_EFP = 53,
        SECURITY_FTDC_PC_StockA = 54,
        SECURITY_FTDC_PC_StockB = 55,
        SECURITY_FTDC_PC_ETF = 56,
        SECURITY_FTDC_PC_ETFPurRed = 57
    }

    public enum TSecurityFtdcExchangeConnectStatusType
    {
        SECURITY_FTDC_ECS_NoConnection = 49,
        SECURITY_FTDC_ECS_QryInstrumentSent = 50,
        SECURITY_FTDC_ECS_GotInformation = 57
    }

    public enum TSecurityFtdcExchangePropertyType
    {
        SECURITY_FTDC_EXP_Normal = 48,
        SECURITY_FTDC_EXP_GenOrderByTrade = 49
    }

    public unsafe partial class CSecurityFtdcQuerySpi : IDisposable
    {
        public partial struct __Internal
        {
            public global::System.IntPtr vfptr_CSecurityFtdcQuerySpi;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("securitymduserapi", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0CSecurityFtdcQuerySpi@@QAE@XZ")]
            internal static extern global::System.IntPtr ctor_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("securitymduserapi", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0CSecurityFtdcQuerySpi@@QAE@ABV0@@Z")]
            internal static extern global::System.IntPtr cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::LTSApi.CSecurityFtdcQuerySpi> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::LTSApi.CSecurityFtdcQuerySpi>();
        protected void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::LTSApi.CSecurityFtdcQuerySpi __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new CSecurityFtdcQuerySpi(native.ToPointer(), skipVTables);
        }

        internal static global::LTSApi.CSecurityFtdcQuerySpi __CreateInstance(global::LTSApi.CSecurityFtdcQuerySpi.__Internal native, bool skipVTables = false)
        {
            return new CSecurityFtdcQuerySpi(native, skipVTables);
        }

        private static void* __CopyValue(global::LTSApi.CSecurityFtdcQuerySpi.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::LTSApi.CSecurityFtdcQuerySpi.__Internal));
            global::LTSApi.CSecurityFtdcQuerySpi.__Internal.cctor_1(ret, new global::System.IntPtr(&native));
            return ret.ToPointer();
        }

        private CSecurityFtdcQuerySpi(global::LTSApi.CSecurityFtdcQuerySpi.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected CSecurityFtdcQuerySpi(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
            __OriginalVTables = new void*[] { *(void**) (__Instance + 0) };
        }

        public CSecurityFtdcQuerySpi()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::LTSApi.CSecurityFtdcQuerySpi.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            __Internal.ctor_0((__Instance + __PointerAdjustment));
            SetupVTables(GetType().FullName == "LTSApi.CSecurityFtdcQuerySpi");
        }

        public CSecurityFtdcQuerySpi(global::LTSApi.CSecurityFtdcQuerySpi _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::LTSApi.CSecurityFtdcQuerySpi.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(_0, null))
                throw new global::System.ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = _0.__Instance;
            __Internal.cctor_1((__Instance + __PointerAdjustment), __arg0);
            SetupVTables(GetType().FullName == "LTSApi.CSecurityFtdcQuerySpi");
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            global::LTSApi.CSecurityFtdcQuerySpi __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            ((global::LTSApi.CSecurityFtdcQuerySpi.__Internal*) __Instance)->vfptr_CSecurityFtdcQuerySpi = new global::System.IntPtr(__OriginalVTables[0]);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
        }

        public virtual void OnFrontConnected()
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 0 * 4);
            var ___OnFrontConnected_0Delegate = (global::LTSApi.Delegates.Action_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::LTSApi.Delegates.Action_IntPtr));
            ___OnFrontConnected_0Delegate((__Instance + __PointerAdjustment));
        }

        public virtual void OnFrontDisconnected(int nReason)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 1 * 4);
            var ___OnFrontDisconnected_0Delegate = (global::LTSApi.Delegates.Action_IntPtr_int) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::LTSApi.Delegates.Action_IntPtr_int));
            ___OnFrontDisconnected_0Delegate((__Instance + __PointerAdjustment), nReason);
        }

        public virtual void OnHeartBeatWarning(int nTimeLapse)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 2 * 4);
            var ___OnHeartBeatWarning_0Delegate = (global::LTSApi.Delegates.Action_IntPtr_int) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::LTSApi.Delegates.Action_IntPtr_int));
            ___OnHeartBeatWarning_0Delegate((__Instance + __PointerAdjustment), nTimeLapse);
        }

        public virtual void OnRspError(global::LTSApi.CSecurityFtdcRspInfoField pRspInfo, int nRequestID, bool bIsLast)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 3 * 4);
            var ___OnRspError_0Delegate = (global::LTSApi.Delegates.Action_IntPtr_IntPtr_int_bool) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::LTSApi.Delegates.Action_IntPtr_IntPtr_int_bool));
            var ____arg0 = pRspInfo.__Instance;
            var __arg0 = new global::System.IntPtr(&____arg0);
            ___OnRspError_0Delegate((__Instance + __PointerAdjustment), __arg0, nRequestID, bIsLast);
        }

        public virtual void OnRspUserLogin(global::LTSApi.CSecurityFtdcRspUserLoginField pRspUserLogin, global::LTSApi.CSecurityFtdcRspInfoField pRspInfo, int nRequestID, bool bIsLast)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 4 * 4);
            var ___OnRspUserLogin_0Delegate = (global::LTSApi.Delegates.Action_IntPtr_IntPtr_IntPtr_int_bool) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::LTSApi.Delegates.Action_IntPtr_IntPtr_IntPtr_int_bool));
            var ____arg0 = pRspUserLogin.__Instance;
            var __arg0 = new global::System.IntPtr(&____arg0);
            var ____arg1 = pRspInfo.__Instance;
            var __arg1 = new global::System.IntPtr(&____arg1);
            ___OnRspUserLogin_0Delegate((__Instance + __PointerAdjustment), __arg0, __arg1, nRequestID, bIsLast);
        }

        public virtual void OnRspUserLogout(global::LTSApi.CSecurityFtdcUserLogoutField pUserLogout, global::LTSApi.CSecurityFtdcRspInfoField pRspInfo, int nRequestID, bool bIsLast)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 5 * 4);
            var ___OnRspUserLogout_0Delegate = (global::LTSApi.Delegates.Action_IntPtr_IntPtr_IntPtr_int_bool) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::LTSApi.Delegates.Action_IntPtr_IntPtr_IntPtr_int_bool));
            var ____arg0 = pUserLogout.__Instance;
            var __arg0 = new global::System.IntPtr(&____arg0);
            var ____arg1 = pRspInfo.__Instance;
            var __arg1 = new global::System.IntPtr(&____arg1);
            ___OnRspUserLogout_0Delegate((__Instance + __PointerAdjustment), __arg0, __arg1, nRequestID, bIsLast);
        }

        public virtual void OnRspFetchAuthRandCode(global::LTSApi.CSecurityFtdcAuthRandCodeField pAuthRandCode, global::LTSApi.CSecurityFtdcRspInfoField pRspInfo, int nRequestID, bool bIsLast)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 6 * 4);
            var ___OnRspFetchAuthRandCode_0Delegate = (global::LTSApi.Delegates.Action_IntPtr_IntPtr_IntPtr_int_bool) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::LTSApi.Delegates.Action_IntPtr_IntPtr_IntPtr_int_bool));
            var ____arg0 = pAuthRandCode.__Instance;
            var __arg0 = new global::System.IntPtr(&____arg0);
            var ____arg1 = pRspInfo.__Instance;
            var __arg1 = new global::System.IntPtr(&____arg1);
            ___OnRspFetchAuthRandCode_0Delegate((__Instance + __PointerAdjustment), __arg0, __arg1, nRequestID, bIsLast);
        }

        public virtual void OnRspQryExchange(global::LTSApi.CSecurityFtdcExchangeField pExchange, global::LTSApi.CSecurityFtdcRspInfoField pRspInfo, int nRequestID, bool bIsLast)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 7 * 4);
            var ___OnRspQryExchange_0Delegate = (global::LTSApi.Delegates.Action_IntPtr_IntPtr_IntPtr_int_bool) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::LTSApi.Delegates.Action_IntPtr_IntPtr_IntPtr_int_bool));
            var ____arg0 = pExchange.__Instance;
            var __arg0 = new global::System.IntPtr(&____arg0);
            var ____arg1 = pRspInfo.__Instance;
            var __arg1 = new global::System.IntPtr(&____arg1);
            ___OnRspQryExchange_0Delegate((__Instance + __PointerAdjustment), __arg0, __arg1, nRequestID, bIsLast);
        }

        public virtual void OnRspQryInstrument(global::LTSApi.CSecurityFtdcInstrumentField pInstrument, global::LTSApi.CSecurityFtdcRspInfoField pRspInfo, int nRequestID, bool bIsLast)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 8 * 4);
            var ___OnRspQryInstrument_0Delegate = (global::LTSApi.Delegates.Action_IntPtr_IntPtr_IntPtr_int_bool) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::LTSApi.Delegates.Action_IntPtr_IntPtr_IntPtr_int_bool));
            var ____arg0 = pInstrument.__Instance;
            var __arg0 = new global::System.IntPtr(&____arg0);
            var ____arg1 = pRspInfo.__Instance;
            var __arg1 = new global::System.IntPtr(&____arg1);
            ___OnRspQryInstrument_0Delegate((__Instance + __PointerAdjustment), __arg0, __arg1, nRequestID, bIsLast);
        }

        public virtual void OnRspQryInvestor(global::LTSApi.CSecurityFtdcInvestorField pInvestor, global::LTSApi.CSecurityFtdcRspInfoField pRspInfo, int nRequestID, bool bIsLast)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 9 * 4);
            var ___OnRspQryInvestor_0Delegate = (global::LTSApi.Delegates.Action_IntPtr_IntPtr_IntPtr_int_bool) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::LTSApi.Delegates.Action_IntPtr_IntPtr_IntPtr_int_bool));
            var ____arg0 = pInvestor.__Instance;
            var __arg0 = new global::System.IntPtr(&____arg0);
            var ____arg1 = pRspInfo.__Instance;
            var __arg1 = new global::System.IntPtr(&____arg1);
            ___OnRspQryInvestor_0Delegate((__Instance + __PointerAdjustment), __arg0, __arg1, nRequestID, bIsLast);
        }

        public virtual void OnRspQryTradingCode(global::LTSApi.CSecurityFtdcTradingCodeField pTradingCode, global::LTSApi.CSecurityFtdcRspInfoField pRspInfo, int nRequestID, bool bIsLast)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 10 * 4);
            var ___OnRspQryTradingCode_0Delegate = (global::LTSApi.Delegates.Action_IntPtr_IntPtr_IntPtr_int_bool) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::LTSApi.Delegates.Action_IntPtr_IntPtr_IntPtr_int_bool));
            var ____arg0 = pTradingCode.__Instance;
            var __arg0 = new global::System.IntPtr(&____arg0);
            var ____arg1 = pRspInfo.__Instance;
            var __arg1 = new global::System.IntPtr(&____arg1);
            ___OnRspQryTradingCode_0Delegate((__Instance + __PointerAdjustment), __arg0, __arg1, nRequestID, bIsLast);
        }

        public virtual void OnRspQryTradingAccount(global::LTSApi.CSecurityFtdcTradingAccountField pTradingAccount, global::LTSApi.CSecurityFtdcRspInfoField pRspInfo, int nRequestID, bool bIsLast)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 11 * 4);
            var ___OnRspQryTradingAccount_0Delegate = (global::LTSApi.Delegates.Action_IntPtr_IntPtr_IntPtr_int_bool) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::LTSApi.Delegates.Action_IntPtr_IntPtr_IntPtr_int_bool));
            var ____arg0 = pTradingAccount.__Instance;
            var __arg0 = new global::System.IntPtr(&____arg0);
            var ____arg1 = pRspInfo.__Instance;
            var __arg1 = new global::System.IntPtr(&____arg1);
            ___OnRspQryTradingAccount_0Delegate((__Instance + __PointerAdjustment), __arg0, __arg1, nRequestID, bIsLast);
        }

        public virtual void OnRspQryBondInterest(global::LTSApi.CSecurityFtdcBondInterestField pBondInterest, global::LTSApi.CSecurityFtdcRspInfoField pRspInfo, int nRequestID, bool bIsLast)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 12 * 4);
            var ___OnRspQryBondInterest_0Delegate = (global::LTSApi.Delegates.Action_IntPtr_IntPtr_IntPtr_int_bool) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::LTSApi.Delegates.Action_IntPtr_IntPtr_IntPtr_int_bool));
            var ____arg0 = pBondInterest.__Instance;
            var __arg0 = new global::System.IntPtr(&____arg0);
            var ____arg1 = pRspInfo.__Instance;
            var __arg1 = new global::System.IntPtr(&____arg1);
            ___OnRspQryBondInterest_0Delegate((__Instance + __PointerAdjustment), __arg0, __arg1, nRequestID, bIsLast);
        }

        public virtual void OnRspQryMarketRationInfo(global::LTSApi.CSecurityFtdcMarketRationInfoField pMarketRationInfo, global::LTSApi.CSecurityFtdcRspInfoField pRspInfo, int nRequestID, bool bIsLast)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 13 * 4);
            var ___OnRspQryMarketRationInfo_0Delegate = (global::LTSApi.Delegates.Action_IntPtr_IntPtr_IntPtr_int_bool) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::LTSApi.Delegates.Action_IntPtr_IntPtr_IntPtr_int_bool));
            var ____arg0 = pMarketRationInfo.__Instance;
            var __arg0 = new global::System.IntPtr(&____arg0);
            var ____arg1 = pRspInfo.__Instance;
            var __arg1 = new global::System.IntPtr(&____arg1);
            ___OnRspQryMarketRationInfo_0Delegate((__Instance + __PointerAdjustment), __arg0, __arg1, nRequestID, bIsLast);
        }

        public virtual void OnRspQryInstrumentCommissionRate(global::LTSApi.CSecurityFtdcInstrumentCommissionRateField pInstrumentCommissionRate, global::LTSApi.CSecurityFtdcRspInfoField pRspInfo, int nRequestID, bool bIsLast)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 14 * 4);
            var ___OnRspQryInstrumentCommissionRate_0Delegate = (global::LTSApi.Delegates.Action_IntPtr_IntPtr_IntPtr_int_bool) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::LTSApi.Delegates.Action_IntPtr_IntPtr_IntPtr_int_bool));
            var ____arg0 = pInstrumentCommissionRate.__Instance;
            var __arg0 = new global::System.IntPtr(&____arg0);
            var ____arg1 = pRspInfo.__Instance;
            var __arg1 = new global::System.IntPtr(&____arg1);
            ___OnRspQryInstrumentCommissionRate_0Delegate((__Instance + __PointerAdjustment), __arg0, __arg1, nRequestID, bIsLast);
        }

        public virtual void OnRspQryETFInstrument(global::LTSApi.CSecurityFtdcETFInstrumentField pETFInstrument, global::LTSApi.CSecurityFtdcRspInfoField pRspInfo, int nRequestID, bool bIsLast)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 15 * 4);
            var ___OnRspQryETFInstrument_0Delegate = (global::LTSApi.Delegates.Action_IntPtr_IntPtr_IntPtr_int_bool) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::LTSApi.Delegates.Action_IntPtr_IntPtr_IntPtr_int_bool));
            var ____arg0 = pETFInstrument.__Instance;
            var __arg0 = new global::System.IntPtr(&____arg0);
            var ____arg1 = pRspInfo.__Instance;
            var __arg1 = new global::System.IntPtr(&____arg1);
            ___OnRspQryETFInstrument_0Delegate((__Instance + __PointerAdjustment), __arg0, __arg1, nRequestID, bIsLast);
        }

        public virtual void OnRspQryETFBasket(global::LTSApi.CSecurityFtdcETFBasketField pETFBasket, global::LTSApi.CSecurityFtdcRspInfoField pRspInfo, int nRequestID, bool bIsLast)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 16 * 4);
            var ___OnRspQryETFBasket_0Delegate = (global::LTSApi.Delegates.Action_IntPtr_IntPtr_IntPtr_int_bool) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::LTSApi.Delegates.Action_IntPtr_IntPtr_IntPtr_int_bool));
            var ____arg0 = pETFBasket.__Instance;
            var __arg0 = new global::System.IntPtr(&____arg0);
            var ____arg1 = pRspInfo.__Instance;
            var __arg1 = new global::System.IntPtr(&____arg1);
            ___OnRspQryETFBasket_0Delegate((__Instance + __PointerAdjustment), __arg0, __arg1, nRequestID, bIsLast);
        }

        public virtual void OnRspQryOFInstrument(global::LTSApi.CSecurityFtdcOFInstrumentField pOFInstrument, global::LTSApi.CSecurityFtdcRspInfoField pRspInfo, int nRequestID, bool bIsLast)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 17 * 4);
            var ___OnRspQryOFInstrument_0Delegate = (global::LTSApi.Delegates.Action_IntPtr_IntPtr_IntPtr_int_bool) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::LTSApi.Delegates.Action_IntPtr_IntPtr_IntPtr_int_bool));
            var ____arg0 = pOFInstrument.__Instance;
            var __arg0 = new global::System.IntPtr(&____arg0);
            var ____arg1 = pRspInfo.__Instance;
            var __arg1 = new global::System.IntPtr(&____arg1);
            ___OnRspQryOFInstrument_0Delegate((__Instance + __PointerAdjustment), __arg0, __arg1, nRequestID, bIsLast);
        }

        public virtual void OnRspQrySFInstrument(global::LTSApi.CSecurityFtdcSFInstrumentField pSFInstrument, global::LTSApi.CSecurityFtdcRspInfoField pRspInfo, int nRequestID, bool bIsLast)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 18 * 4);
            var ___OnRspQrySFInstrument_0Delegate = (global::LTSApi.Delegates.Action_IntPtr_IntPtr_IntPtr_int_bool) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::LTSApi.Delegates.Action_IntPtr_IntPtr_IntPtr_int_bool));
            var ____arg0 = pSFInstrument.__Instance;
            var __arg0 = new global::System.IntPtr(&____arg0);
            var ____arg1 = pRspInfo.__Instance;
            var __arg1 = new global::System.IntPtr(&____arg1);
            ___OnRspQrySFInstrument_0Delegate((__Instance + __PointerAdjustment), __arg0, __arg1, nRequestID, bIsLast);
        }

        public virtual void OnRspQryInstrumentUnitMargin(global::LTSApi.CSecurityFtdcInstrumentUnitMarginField pInstrumentUnitMargin, global::LTSApi.CSecurityFtdcRspInfoField pRspInfo, int nRequestID, bool bIsLast)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 19 * 4);
            var ___OnRspQryInstrumentUnitMargin_0Delegate = (global::LTSApi.Delegates.Action_IntPtr_IntPtr_IntPtr_int_bool) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::LTSApi.Delegates.Action_IntPtr_IntPtr_IntPtr_int_bool));
            var ____arg0 = pInstrumentUnitMargin.__Instance;
            var __arg0 = new global::System.IntPtr(&____arg0);
            var ____arg1 = pRspInfo.__Instance;
            var __arg1 = new global::System.IntPtr(&____arg1);
            ___OnRspQryInstrumentUnitMargin_0Delegate((__Instance + __PointerAdjustment), __arg0, __arg1, nRequestID, bIsLast);
        }

        public virtual void OnRspQryPreDelivInfo(global::LTSApi.CSecurityFtdcPreDelivInfoField pPreDelivInfo, global::LTSApi.CSecurityFtdcRspInfoField pRspInfo, int nRequestID, bool bIsLast)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 20 * 4);
            var ___OnRspQryPreDelivInfo_0Delegate = (global::LTSApi.Delegates.Action_IntPtr_IntPtr_IntPtr_int_bool) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::LTSApi.Delegates.Action_IntPtr_IntPtr_IntPtr_int_bool));
            var ____arg0 = pPreDelivInfo.__Instance;
            var __arg0 = new global::System.IntPtr(&____arg0);
            var ____arg1 = pRspInfo.__Instance;
            var __arg1 = new global::System.IntPtr(&____arg1);
            ___OnRspQryPreDelivInfo_0Delegate((__Instance + __PointerAdjustment), __arg0, __arg1, nRequestID, bIsLast);
        }

        public virtual void OnRspQryCreditStockAssignInfo(global::LTSApi.CSecurityFtdcCreditStockAssignInfoField pCreditStockAssignInfo, global::LTSApi.CSecurityFtdcRspInfoField pRspInfo, int nRequestID, bool bIsLast)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 21 * 4);
            var ___OnRspQryCreditStockAssignInfo_0Delegate = (global::LTSApi.Delegates.Action_IntPtr_IntPtr_IntPtr_int_bool) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::LTSApi.Delegates.Action_IntPtr_IntPtr_IntPtr_int_bool));
            var ____arg0 = pCreditStockAssignInfo.__Instance;
            var __arg0 = new global::System.IntPtr(&____arg0);
            var ____arg1 = pRspInfo.__Instance;
            var __arg1 = new global::System.IntPtr(&____arg1);
            ___OnRspQryCreditStockAssignInfo_0Delegate((__Instance + __PointerAdjustment), __arg0, __arg1, nRequestID, bIsLast);
        }

        public virtual void OnRspQryCreditCashAssignInfo(global::LTSApi.CSecurityFtdcCreditCashAssignInfoField pCreditCashAssignInfo, global::LTSApi.CSecurityFtdcRspInfoField pRspInfo, int nRequestID, bool bIsLast)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 22 * 4);
            var ___OnRspQryCreditCashAssignInfo_0Delegate = (global::LTSApi.Delegates.Action_IntPtr_IntPtr_IntPtr_int_bool) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::LTSApi.Delegates.Action_IntPtr_IntPtr_IntPtr_int_bool));
            var ____arg0 = pCreditCashAssignInfo.__Instance;
            var __arg0 = new global::System.IntPtr(&____arg0);
            var ____arg1 = pRspInfo.__Instance;
            var __arg1 = new global::System.IntPtr(&____arg1);
            ___OnRspQryCreditCashAssignInfo_0Delegate((__Instance + __PointerAdjustment), __arg0, __arg1, nRequestID, bIsLast);
        }

        public virtual void OnRspQryConversionRate(global::LTSApi.CSecurityFtdcConversionRateField pConversionRate, global::LTSApi.CSecurityFtdcRspInfoField pRspInfo, int nRequestID, bool bIsLast)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 23 * 4);
            var ___OnRspQryConversionRate_0Delegate = (global::LTSApi.Delegates.Action_IntPtr_IntPtr_IntPtr_int_bool) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::LTSApi.Delegates.Action_IntPtr_IntPtr_IntPtr_int_bool));
            var ____arg0 = pConversionRate.__Instance;
            var __arg0 = new global::System.IntPtr(&____arg0);
            var ____arg1 = pRspInfo.__Instance;
            var __arg1 = new global::System.IntPtr(&____arg1);
            ___OnRspQryConversionRate_0Delegate((__Instance + __PointerAdjustment), __arg0, __arg1, nRequestID, bIsLast);
        }

        public virtual void OnRspQryHisCreditDebtInfo(global::LTSApi.CSecurityFtdcHisCreditDebtInfoField pHisCreditDebtInfo, global::LTSApi.CSecurityFtdcRspInfoField pRspInfo, int nRequestID, bool bIsLast)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 24 * 4);
            var ___OnRspQryHisCreditDebtInfo_0Delegate = (global::LTSApi.Delegates.Action_IntPtr_IntPtr_IntPtr_int_bool) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::LTSApi.Delegates.Action_IntPtr_IntPtr_IntPtr_int_bool));
            var ____arg0 = pHisCreditDebtInfo.__Instance;
            var __arg0 = new global::System.IntPtr(&____arg0);
            var ____arg1 = pRspInfo.__Instance;
            var __arg1 = new global::System.IntPtr(&____arg1);
            ___OnRspQryHisCreditDebtInfo_0Delegate((__Instance + __PointerAdjustment), __arg0, __arg1, nRequestID, bIsLast);
        }

        public virtual void OnRspQryMarketDataStaticInfo(global::LTSApi.CSecurityFtdcMarketDataStaticInfoField pMarketDataStaticInfo, global::LTSApi.CSecurityFtdcRspInfoField pRspInfo, int nRequestID, bool bIsLast)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 25 * 4);
            var ___OnRspQryMarketDataStaticInfo_0Delegate = (global::LTSApi.Delegates.Action_IntPtr_IntPtr_IntPtr_int_bool) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::LTSApi.Delegates.Action_IntPtr_IntPtr_IntPtr_int_bool));
            var ____arg0 = pMarketDataStaticInfo.__Instance;
            var __arg0 = new global::System.IntPtr(&____arg0);
            var ____arg1 = pRspInfo.__Instance;
            var __arg1 = new global::System.IntPtr(&____arg1);
            ___OnRspQryMarketDataStaticInfo_0Delegate((__Instance + __PointerAdjustment), __arg0, __arg1, nRequestID, bIsLast);
        }

        public virtual void OnRspQryExpireRepurchInfo(global::LTSApi.CSecurityFtdcExpireRepurchInfoField pExpireRepurchInfo, global::LTSApi.CSecurityFtdcRspInfoField pRspInfo, int nRequestID, bool bIsLast)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 26 * 4);
            var ___OnRspQryExpireRepurchInfo_0Delegate = (global::LTSApi.Delegates.Action_IntPtr_IntPtr_IntPtr_int_bool) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::LTSApi.Delegates.Action_IntPtr_IntPtr_IntPtr_int_bool));
            var ____arg0 = pExpireRepurchInfo.__Instance;
            var __arg0 = new global::System.IntPtr(&____arg0);
            var ____arg1 = pRspInfo.__Instance;
            var __arg1 = new global::System.IntPtr(&____arg1);
            ___OnRspQryExpireRepurchInfo_0Delegate((__Instance + __PointerAdjustment), __arg0, __arg1, nRequestID, bIsLast);
        }

        public virtual void OnRspQryBondPledgeRate(global::LTSApi.CSecurityFtdcBondPledgeRateField pBondPledgeRate, global::LTSApi.CSecurityFtdcRspInfoField pRspInfo, int nRequestID, bool bIsLast)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 27 * 4);
            var ___OnRspQryBondPledgeRate_0Delegate = (global::LTSApi.Delegates.Action_IntPtr_IntPtr_IntPtr_int_bool) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::LTSApi.Delegates.Action_IntPtr_IntPtr_IntPtr_int_bool));
            var ____arg0 = pBondPledgeRate.__Instance;
            var __arg0 = new global::System.IntPtr(&____arg0);
            var ____arg1 = pRspInfo.__Instance;
            var __arg1 = new global::System.IntPtr(&____arg1);
            ___OnRspQryBondPledgeRate_0Delegate((__Instance + __PointerAdjustment), __arg0, __arg1, nRequestID, bIsLast);
        }

        public virtual void OnRspQryPledgeBond(global::LTSApi.CSecurityFtdcPledgeBondField pPledgeBond, global::LTSApi.CSecurityFtdcRspInfoField pRspInfo, int nRequestID, bool bIsLast)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 28 * 4);
            var ___OnRspQryPledgeBond_0Delegate = (global::LTSApi.Delegates.Action_IntPtr_IntPtr_IntPtr_int_bool) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::LTSApi.Delegates.Action_IntPtr_IntPtr_IntPtr_int_bool));
            var ____arg0 = pPledgeBond.__Instance;
            var __arg0 = new global::System.IntPtr(&____arg0);
            var ____arg1 = pRspInfo.__Instance;
            var __arg1 = new global::System.IntPtr(&____arg1);
            ___OnRspQryPledgeBond_0Delegate((__Instance + __PointerAdjustment), __arg0, __arg1, nRequestID, bIsLast);
        }

        public virtual void OnRspQryOrder(global::LTSApi.CSecurityFtdcOrderField pOrder, global::LTSApi.CSecurityFtdcRspInfoField pRspInfo, int nRequestID, bool bIsLast)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 29 * 4);
            var ___OnRspQryOrder_0Delegate = (global::LTSApi.Delegates.Action_IntPtr_IntPtr_IntPtr_int_bool) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::LTSApi.Delegates.Action_IntPtr_IntPtr_IntPtr_int_bool));
            var ____arg0 = pOrder.__Instance;
            var __arg0 = new global::System.IntPtr(&____arg0);
            var ____arg1 = pRspInfo.__Instance;
            var __arg1 = new global::System.IntPtr(&____arg1);
            ___OnRspQryOrder_0Delegate((__Instance + __PointerAdjustment), __arg0, __arg1, nRequestID, bIsLast);
        }

        public virtual void OnRspQryTrade(global::LTSApi.CSecurityFtdcTradeField pTrade, global::LTSApi.CSecurityFtdcRspInfoField pRspInfo, int nRequestID, bool bIsLast)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 30 * 4);
            var ___OnRspQryTrade_0Delegate = (global::LTSApi.Delegates.Action_IntPtr_IntPtr_IntPtr_int_bool) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::LTSApi.Delegates.Action_IntPtr_IntPtr_IntPtr_int_bool));
            var ____arg0 = pTrade.__Instance;
            var __arg0 = new global::System.IntPtr(&____arg0);
            var ____arg1 = pRspInfo.__Instance;
            var __arg1 = new global::System.IntPtr(&____arg1);
            ___OnRspQryTrade_0Delegate((__Instance + __PointerAdjustment), __arg0, __arg1, nRequestID, bIsLast);
        }

        public virtual void OnRspQryInvestorPosition(global::LTSApi.CSecurityFtdcInvestorPositionField pInvestorPosition, global::LTSApi.CSecurityFtdcRspInfoField pRspInfo, int nRequestID, bool bIsLast)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 31 * 4);
            var ___OnRspQryInvestorPosition_0Delegate = (global::LTSApi.Delegates.Action_IntPtr_IntPtr_IntPtr_int_bool) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::LTSApi.Delegates.Action_IntPtr_IntPtr_IntPtr_int_bool));
            var ____arg0 = pInvestorPosition.__Instance;
            var __arg0 = new global::System.IntPtr(&____arg0);
            var ____arg1 = pRspInfo.__Instance;
            var __arg1 = new global::System.IntPtr(&____arg1);
            ___OnRspQryInvestorPosition_0Delegate((__Instance + __PointerAdjustment), __arg0, __arg1, nRequestID, bIsLast);
        }

        public virtual void OnRspQryFundTransferSerial(global::LTSApi.CSecurityFtdcFundTransferField pFundTransfer, global::LTSApi.CSecurityFtdcRspInfoField pRspInfo, int nRequestID, bool bIsLast)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 32 * 4);
            var ___OnRspQryFundTransferSerial_0Delegate = (global::LTSApi.Delegates.Action_IntPtr_IntPtr_IntPtr_int_bool) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::LTSApi.Delegates.Action_IntPtr_IntPtr_IntPtr_int_bool));
            var ____arg0 = pFundTransfer.__Instance;
            var __arg0 = new global::System.IntPtr(&____arg0);
            var ____arg1 = pRspInfo.__Instance;
            var __arg1 = new global::System.IntPtr(&____arg1);
            ___OnRspQryFundTransferSerial_0Delegate((__Instance + __PointerAdjustment), __arg0, __arg1, nRequestID, bIsLast);
        }

        public virtual void OnRspQryFundInterTransferSerial(global::LTSApi.CSecurityFtdcFundInterTransferSerialField pFundInterTransferSerial, global::LTSApi.CSecurityFtdcRspInfoField pRspInfo, int nRequestID, bool bIsLast)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 33 * 4);
            var ___OnRspQryFundInterTransferSerial_0Delegate = (global::LTSApi.Delegates.Action_IntPtr_IntPtr_IntPtr_int_bool) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::LTSApi.Delegates.Action_IntPtr_IntPtr_IntPtr_int_bool));
            var ____arg0 = pFundInterTransferSerial.__Instance;
            var __arg0 = new global::System.IntPtr(&____arg0);
            var ____arg1 = pRspInfo.__Instance;
            var __arg1 = new global::System.IntPtr(&____arg1);
            ___OnRspQryFundInterTransferSerial_0Delegate((__Instance + __PointerAdjustment), __arg0, __arg1, nRequestID, bIsLast);
        }

        #region Virtual table interop

        // void OnFrontConnected(){}
        private static global::LTSApi.Delegates.Action_IntPtr _OnFrontConnected_0DelegateInstance;

        private static void _OnFrontConnected_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::LTSApi.CSecurityFtdcQuerySpi) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.OnFrontConnected();
        }

        // void OnFrontDisconnected(int nReason){}
        private static global::LTSApi.Delegates.Action_IntPtr_int _OnFrontDisconnected_0DelegateInstance;

        private static void _OnFrontDisconnected_0DelegateHook(global::System.IntPtr instance, int nReason)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::LTSApi.CSecurityFtdcQuerySpi) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.OnFrontDisconnected(nReason);
        }

        // void OnHeartBeatWarning(int nTimeLapse){}
        private static global::LTSApi.Delegates.Action_IntPtr_int _OnHeartBeatWarning_0DelegateInstance;

        private static void _OnHeartBeatWarning_0DelegateHook(global::System.IntPtr instance, int nTimeLapse)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::LTSApi.CSecurityFtdcQuerySpi) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.OnHeartBeatWarning(nTimeLapse);
        }

        // void OnRspError(CSecurityFtdcRspInfoField *pRspInfo, int nRequestID, bool bIsLast) {}
        private static global::LTSApi.Delegates.Action_IntPtr_IntPtr_int_bool _OnRspError_0DelegateInstance;

        private static void _OnRspError_0DelegateHook(global::System.IntPtr instance, global::System.IntPtr pRspInfo, int nRequestID, bool bIsLast)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::LTSApi.CSecurityFtdcQuerySpi) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::LTSApi.CSecurityFtdcRspInfoField __result0;
            if (pRspInfo == IntPtr.Zero) __result0 = new global::LTSApi.CSecurityFtdcRspInfoField();
            else __result0 = global::LTSApi.CSecurityFtdcRspInfoField.__CreateInstance(pRspInfo);
            __target.OnRspError(__result0, nRequestID, bIsLast);
        }

        // void OnRspUserLogin(CSecurityFtdcRspUserLoginField *pRspUserLogin, CSecurityFtdcRspInfoField *pRspInfo, int nRequestID, bool bIsLast) {}
        private static global::LTSApi.Delegates.Action_IntPtr_IntPtr_IntPtr_int_bool _OnRspUserLogin_0DelegateInstance;

        private static void _OnRspUserLogin_0DelegateHook(global::System.IntPtr instance, global::System.IntPtr pRspUserLogin, global::System.IntPtr pRspInfo, int nRequestID, bool bIsLast)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::LTSApi.CSecurityFtdcQuerySpi) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::LTSApi.CSecurityFtdcRspUserLoginField __result0;
            if (pRspUserLogin == IntPtr.Zero) __result0 = new global::LTSApi.CSecurityFtdcRspUserLoginField();
            else __result0 = global::LTSApi.CSecurityFtdcRspUserLoginField.__CreateInstance(pRspUserLogin);
            global::LTSApi.CSecurityFtdcRspInfoField __result1;
            if (pRspInfo == IntPtr.Zero) __result1 = new global::LTSApi.CSecurityFtdcRspInfoField();
            else __result1 = global::LTSApi.CSecurityFtdcRspInfoField.__CreateInstance(pRspInfo);
            __target.OnRspUserLogin(__result0, __result1, nRequestID, bIsLast);
        }

        // void OnRspUserLogout(CSecurityFtdcUserLogoutField *pUserLogout, CSecurityFtdcRspInfoField *pRspInfo, int nRequestID, bool bIsLast) {}
        private static global::LTSApi.Delegates.Action_IntPtr_IntPtr_IntPtr_int_bool _OnRspUserLogout_0DelegateInstance;

        private static void _OnRspUserLogout_0DelegateHook(global::System.IntPtr instance, global::System.IntPtr pUserLogout, global::System.IntPtr pRspInfo, int nRequestID, bool bIsLast)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::LTSApi.CSecurityFtdcQuerySpi) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::LTSApi.CSecurityFtdcUserLogoutField __result0;
            if (pUserLogout == IntPtr.Zero) __result0 = new global::LTSApi.CSecurityFtdcUserLogoutField();
            else __result0 = global::LTSApi.CSecurityFtdcUserLogoutField.__CreateInstance(pUserLogout);
            global::LTSApi.CSecurityFtdcRspInfoField __result1;
            if (pRspInfo == IntPtr.Zero) __result1 = new global::LTSApi.CSecurityFtdcRspInfoField();
            else __result1 = global::LTSApi.CSecurityFtdcRspInfoField.__CreateInstance(pRspInfo);
            __target.OnRspUserLogout(__result0, __result1, nRequestID, bIsLast);
        }

        // void OnRspFetchAuthRandCode(CSecurityFtdcAuthRandCodeField *pAuthRandCode, CSecurityFtdcRspInfoField *pRspInfo, int nRequestID, bool bIsLast) {}
        private static global::LTSApi.Delegates.Action_IntPtr_IntPtr_IntPtr_int_bool _OnRspFetchAuthRandCode_0DelegateInstance;

        private static void _OnRspFetchAuthRandCode_0DelegateHook(global::System.IntPtr instance, global::System.IntPtr pAuthRandCode, global::System.IntPtr pRspInfo, int nRequestID, bool bIsLast)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::LTSApi.CSecurityFtdcQuerySpi) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::LTSApi.CSecurityFtdcAuthRandCodeField __result0;
            if (pAuthRandCode == IntPtr.Zero) __result0 = new global::LTSApi.CSecurityFtdcAuthRandCodeField();
            else __result0 = global::LTSApi.CSecurityFtdcAuthRandCodeField.__CreateInstance(pAuthRandCode);
            global::LTSApi.CSecurityFtdcRspInfoField __result1;
            if (pRspInfo == IntPtr.Zero) __result1 = new global::LTSApi.CSecurityFtdcRspInfoField();
            else __result1 = global::LTSApi.CSecurityFtdcRspInfoField.__CreateInstance(pRspInfo);
            __target.OnRspFetchAuthRandCode(__result0, __result1, nRequestID, bIsLast);
        }

        // void OnRspQryExchange(CSecurityFtdcExchangeField *pExchange, CSecurityFtdcRspInfoField *pRspInfo, int nRequestID, bool bIsLast) {}
        private static global::LTSApi.Delegates.Action_IntPtr_IntPtr_IntPtr_int_bool _OnRspQryExchange_0DelegateInstance;

        private static void _OnRspQryExchange_0DelegateHook(global::System.IntPtr instance, global::System.IntPtr pExchange, global::System.IntPtr pRspInfo, int nRequestID, bool bIsLast)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::LTSApi.CSecurityFtdcQuerySpi) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::LTSApi.CSecurityFtdcExchangeField __result0;
            if (pExchange == IntPtr.Zero) __result0 = new global::LTSApi.CSecurityFtdcExchangeField();
            else __result0 = global::LTSApi.CSecurityFtdcExchangeField.__CreateInstance(pExchange);
            global::LTSApi.CSecurityFtdcRspInfoField __result1;
            if (pRspInfo == IntPtr.Zero) __result1 = new global::LTSApi.CSecurityFtdcRspInfoField();
            else __result1 = global::LTSApi.CSecurityFtdcRspInfoField.__CreateInstance(pRspInfo);
            __target.OnRspQryExchange(__result0, __result1, nRequestID, bIsLast);
        }

        // void OnRspQryInstrument(CSecurityFtdcInstrumentField *pInstrument, CSecurityFtdcRspInfoField *pRspInfo, int nRequestID, bool bIsLast) {}
        private static global::LTSApi.Delegates.Action_IntPtr_IntPtr_IntPtr_int_bool _OnRspQryInstrument_0DelegateInstance;

        private static void _OnRspQryInstrument_0DelegateHook(global::System.IntPtr instance, global::System.IntPtr pInstrument, global::System.IntPtr pRspInfo, int nRequestID, bool bIsLast)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::LTSApi.CSecurityFtdcQuerySpi) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::LTSApi.CSecurityFtdcInstrumentField __result0;
            if (pInstrument == IntPtr.Zero) __result0 = new global::LTSApi.CSecurityFtdcInstrumentField();
            else __result0 = global::LTSApi.CSecurityFtdcInstrumentField.__CreateInstance(pInstrument);
            global::LTSApi.CSecurityFtdcRspInfoField __result1;
            if (pRspInfo == IntPtr.Zero) __result1 = new global::LTSApi.CSecurityFtdcRspInfoField();
            else __result1 = global::LTSApi.CSecurityFtdcRspInfoField.__CreateInstance(pRspInfo);
            __target.OnRspQryInstrument(__result0, __result1, nRequestID, bIsLast);
        }

        // void OnRspQryInvestor(CSecurityFtdcInvestorField *pInvestor, CSecurityFtdcRspInfoField *pRspInfo, int nRequestID, bool bIsLast) {}
        private static global::LTSApi.Delegates.Action_IntPtr_IntPtr_IntPtr_int_bool _OnRspQryInvestor_0DelegateInstance;

        private static void _OnRspQryInvestor_0DelegateHook(global::System.IntPtr instance, global::System.IntPtr pInvestor, global::System.IntPtr pRspInfo, int nRequestID, bool bIsLast)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::LTSApi.CSecurityFtdcQuerySpi) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::LTSApi.CSecurityFtdcInvestorField __result0;
            if (pInvestor == IntPtr.Zero) __result0 = new global::LTSApi.CSecurityFtdcInvestorField();
            else __result0 = global::LTSApi.CSecurityFtdcInvestorField.__CreateInstance(pInvestor);
            global::LTSApi.CSecurityFtdcRspInfoField __result1;
            if (pRspInfo == IntPtr.Zero) __result1 = new global::LTSApi.CSecurityFtdcRspInfoField();
            else __result1 = global::LTSApi.CSecurityFtdcRspInfoField.__CreateInstance(pRspInfo);
            __target.OnRspQryInvestor(__result0, __result1, nRequestID, bIsLast);
        }

        // void OnRspQryTradingCode(CSecurityFtdcTradingCodeField *pTradingCode, CSecurityFtdcRspInfoField *pRspInfo, int nRequestID, bool bIsLast) {}
        private static global::LTSApi.Delegates.Action_IntPtr_IntPtr_IntPtr_int_bool _OnRspQryTradingCode_0DelegateInstance;

        private static void _OnRspQryTradingCode_0DelegateHook(global::System.IntPtr instance, global::System.IntPtr pTradingCode, global::System.IntPtr pRspInfo, int nRequestID, bool bIsLast)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::LTSApi.CSecurityFtdcQuerySpi) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::LTSApi.CSecurityFtdcTradingCodeField __result0;
            if (pTradingCode == IntPtr.Zero) __result0 = new global::LTSApi.CSecurityFtdcTradingCodeField();
            else __result0 = global::LTSApi.CSecurityFtdcTradingCodeField.__CreateInstance(pTradingCode);
            global::LTSApi.CSecurityFtdcRspInfoField __result1;
            if (pRspInfo == IntPtr.Zero) __result1 = new global::LTSApi.CSecurityFtdcRspInfoField();
            else __result1 = global::LTSApi.CSecurityFtdcRspInfoField.__CreateInstance(pRspInfo);
            __target.OnRspQryTradingCode(__result0, __result1, nRequestID, bIsLast);
        }

        // void OnRspQryTradingAccount(CSecurityFtdcTradingAccountField *pTradingAccount, CSecurityFtdcRspInfoField *pRspInfo, int nRequestID, bool bIsLast) {}
        private static global::LTSApi.Delegates.Action_IntPtr_IntPtr_IntPtr_int_bool _OnRspQryTradingAccount_0DelegateInstance;

        private static void _OnRspQryTradingAccount_0DelegateHook(global::System.IntPtr instance, global::System.IntPtr pTradingAccount, global::System.IntPtr pRspInfo, int nRequestID, bool bIsLast)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::LTSApi.CSecurityFtdcQuerySpi) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::LTSApi.CSecurityFtdcTradingAccountField __result0;
            if (pTradingAccount == IntPtr.Zero) __result0 = new global::LTSApi.CSecurityFtdcTradingAccountField();
            else __result0 = global::LTSApi.CSecurityFtdcTradingAccountField.__CreateInstance(pTradingAccount);
            global::LTSApi.CSecurityFtdcRspInfoField __result1;
            if (pRspInfo == IntPtr.Zero) __result1 = new global::LTSApi.CSecurityFtdcRspInfoField();
            else __result1 = global::LTSApi.CSecurityFtdcRspInfoField.__CreateInstance(pRspInfo);
            __target.OnRspQryTradingAccount(__result0, __result1, nRequestID, bIsLast);
        }

        // void OnRspQryBondInterest(CSecurityFtdcBondInterestField *pBondInterest, CSecurityFtdcRspInfoField *pRspInfo, int nRequestID, bool bIsLast) {}
        private static global::LTSApi.Delegates.Action_IntPtr_IntPtr_IntPtr_int_bool _OnRspQryBondInterest_0DelegateInstance;

        private static void _OnRspQryBondInterest_0DelegateHook(global::System.IntPtr instance, global::System.IntPtr pBondInterest, global::System.IntPtr pRspInfo, int nRequestID, bool bIsLast)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::LTSApi.CSecurityFtdcQuerySpi) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::LTSApi.CSecurityFtdcBondInterestField __result0;
            if (pBondInterest == IntPtr.Zero) __result0 = new global::LTSApi.CSecurityFtdcBondInterestField();
            else __result0 = global::LTSApi.CSecurityFtdcBondInterestField.__CreateInstance(pBondInterest);
            global::LTSApi.CSecurityFtdcRspInfoField __result1;
            if (pRspInfo == IntPtr.Zero) __result1 = new global::LTSApi.CSecurityFtdcRspInfoField();
            else __result1 = global::LTSApi.CSecurityFtdcRspInfoField.__CreateInstance(pRspInfo);
            __target.OnRspQryBondInterest(__result0, __result1, nRequestID, bIsLast);
        }

        // void OnRspQryMarketRationInfo(CSecurityFtdcMarketRationInfoField *pMarketRationInfo, CSecurityFtdcRspInfoField *pRspInfo, int nRequestID, bool bIsLast) {}
        private static global::LTSApi.Delegates.Action_IntPtr_IntPtr_IntPtr_int_bool _OnRspQryMarketRationInfo_0DelegateInstance;

        private static void _OnRspQryMarketRationInfo_0DelegateHook(global::System.IntPtr instance, global::System.IntPtr pMarketRationInfo, global::System.IntPtr pRspInfo, int nRequestID, bool bIsLast)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::LTSApi.CSecurityFtdcQuerySpi) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::LTSApi.CSecurityFtdcMarketRationInfoField __result0;
            if (pMarketRationInfo == IntPtr.Zero) __result0 = new global::LTSApi.CSecurityFtdcMarketRationInfoField();
            else __result0 = global::LTSApi.CSecurityFtdcMarketRationInfoField.__CreateInstance(pMarketRationInfo);
            global::LTSApi.CSecurityFtdcRspInfoField __result1;
            if (pRspInfo == IntPtr.Zero) __result1 = new global::LTSApi.CSecurityFtdcRspInfoField();
            else __result1 = global::LTSApi.CSecurityFtdcRspInfoField.__CreateInstance(pRspInfo);
            __target.OnRspQryMarketRationInfo(__result0, __result1, nRequestID, bIsLast);
        }

        // void OnRspQryInstrumentCommissionRate(CSecurityFtdcInstrumentCommissionRateField *pInstrumentCommissionRate, CSecurityFtdcRspInfoField *pRspInfo, int nRequestID, bool bIsLast) {}
        private static global::LTSApi.Delegates.Action_IntPtr_IntPtr_IntPtr_int_bool _OnRspQryInstrumentCommissionRate_0DelegateInstance;

        private static void _OnRspQryInstrumentCommissionRate_0DelegateHook(global::System.IntPtr instance, global::System.IntPtr pInstrumentCommissionRate, global::System.IntPtr pRspInfo, int nRequestID, bool bIsLast)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::LTSApi.CSecurityFtdcQuerySpi) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::LTSApi.CSecurityFtdcInstrumentCommissionRateField __result0;
            if (pInstrumentCommissionRate == IntPtr.Zero) __result0 = new global::LTSApi.CSecurityFtdcInstrumentCommissionRateField();
            else __result0 = global::LTSApi.CSecurityFtdcInstrumentCommissionRateField.__CreateInstance(pInstrumentCommissionRate);
            global::LTSApi.CSecurityFtdcRspInfoField __result1;
            if (pRspInfo == IntPtr.Zero) __result1 = new global::LTSApi.CSecurityFtdcRspInfoField();
            else __result1 = global::LTSApi.CSecurityFtdcRspInfoField.__CreateInstance(pRspInfo);
            __target.OnRspQryInstrumentCommissionRate(__result0, __result1, nRequestID, bIsLast);
        }

        // void OnRspQryETFInstrument(CSecurityFtdcETFInstrumentField *pETFInstrument, CSecurityFtdcRspInfoField *pRspInfo, int nRequestID, bool bIsLast) {}
        private static global::LTSApi.Delegates.Action_IntPtr_IntPtr_IntPtr_int_bool _OnRspQryETFInstrument_0DelegateInstance;

        private static void _OnRspQryETFInstrument_0DelegateHook(global::System.IntPtr instance, global::System.IntPtr pETFInstrument, global::System.IntPtr pRspInfo, int nRequestID, bool bIsLast)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::LTSApi.CSecurityFtdcQuerySpi) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::LTSApi.CSecurityFtdcETFInstrumentField __result0;
            if (pETFInstrument == IntPtr.Zero) __result0 = new global::LTSApi.CSecurityFtdcETFInstrumentField();
            else __result0 = global::LTSApi.CSecurityFtdcETFInstrumentField.__CreateInstance(pETFInstrument);
            global::LTSApi.CSecurityFtdcRspInfoField __result1;
            if (pRspInfo == IntPtr.Zero) __result1 = new global::LTSApi.CSecurityFtdcRspInfoField();
            else __result1 = global::LTSApi.CSecurityFtdcRspInfoField.__CreateInstance(pRspInfo);
            __target.OnRspQryETFInstrument(__result0, __result1, nRequestID, bIsLast);
        }

        // void OnRspQryETFBasket(CSecurityFtdcETFBasketField *pETFBasket, CSecurityFtdcRspInfoField *pRspInfo, int nRequestID, bool bIsLast) {}
        private static global::LTSApi.Delegates.Action_IntPtr_IntPtr_IntPtr_int_bool _OnRspQryETFBasket_0DelegateInstance;

        private static void _OnRspQryETFBasket_0DelegateHook(global::System.IntPtr instance, global::System.IntPtr pETFBasket, global::System.IntPtr pRspInfo, int nRequestID, bool bIsLast)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::LTSApi.CSecurityFtdcQuerySpi) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::LTSApi.CSecurityFtdcETFBasketField __result0;
            if (pETFBasket == IntPtr.Zero) __result0 = new global::LTSApi.CSecurityFtdcETFBasketField();
            else __result0 = global::LTSApi.CSecurityFtdcETFBasketField.__CreateInstance(pETFBasket);
            global::LTSApi.CSecurityFtdcRspInfoField __result1;
            if (pRspInfo == IntPtr.Zero) __result1 = new global::LTSApi.CSecurityFtdcRspInfoField();
            else __result1 = global::LTSApi.CSecurityFtdcRspInfoField.__CreateInstance(pRspInfo);
            __target.OnRspQryETFBasket(__result0, __result1, nRequestID, bIsLast);
        }

        // void OnRspQryOFInstrument(CSecurityFtdcOFInstrumentField *pOFInstrument, CSecurityFtdcRspInfoField *pRspInfo, int nRequestID, bool bIsLast) {}
        private static global::LTSApi.Delegates.Action_IntPtr_IntPtr_IntPtr_int_bool _OnRspQryOFInstrument_0DelegateInstance;

        private static void _OnRspQryOFInstrument_0DelegateHook(global::System.IntPtr instance, global::System.IntPtr pOFInstrument, global::System.IntPtr pRspInfo, int nRequestID, bool bIsLast)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::LTSApi.CSecurityFtdcQuerySpi) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::LTSApi.CSecurityFtdcOFInstrumentField __result0;
            if (pOFInstrument == IntPtr.Zero) __result0 = new global::LTSApi.CSecurityFtdcOFInstrumentField();
            else __result0 = global::LTSApi.CSecurityFtdcOFInstrumentField.__CreateInstance(pOFInstrument);
            global::LTSApi.CSecurityFtdcRspInfoField __result1;
            if (pRspInfo == IntPtr.Zero) __result1 = new global::LTSApi.CSecurityFtdcRspInfoField();
            else __result1 = global::LTSApi.CSecurityFtdcRspInfoField.__CreateInstance(pRspInfo);
            __target.OnRspQryOFInstrument(__result0, __result1, nRequestID, bIsLast);
        }

        // void OnRspQrySFInstrument(CSecurityFtdcSFInstrumentField *pSFInstrument, CSecurityFtdcRspInfoField *pRspInfo, int nRequestID, bool bIsLast) {}
        private static global::LTSApi.Delegates.Action_IntPtr_IntPtr_IntPtr_int_bool _OnRspQrySFInstrument_0DelegateInstance;

        private static void _OnRspQrySFInstrument_0DelegateHook(global::System.IntPtr instance, global::System.IntPtr pSFInstrument, global::System.IntPtr pRspInfo, int nRequestID, bool bIsLast)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::LTSApi.CSecurityFtdcQuerySpi) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::LTSApi.CSecurityFtdcSFInstrumentField __result0;
            if (pSFInstrument == IntPtr.Zero) __result0 = new global::LTSApi.CSecurityFtdcSFInstrumentField();
            else __result0 = global::LTSApi.CSecurityFtdcSFInstrumentField.__CreateInstance(pSFInstrument);
            global::LTSApi.CSecurityFtdcRspInfoField __result1;
            if (pRspInfo == IntPtr.Zero) __result1 = new global::LTSApi.CSecurityFtdcRspInfoField();
            else __result1 = global::LTSApi.CSecurityFtdcRspInfoField.__CreateInstance(pRspInfo);
            __target.OnRspQrySFInstrument(__result0, __result1, nRequestID, bIsLast);
        }

        // void OnRspQryInstrumentUnitMargin(CSecurityFtdcInstrumentUnitMarginField *pInstrumentUnitMargin, CSecurityFtdcRspInfoField *pRspInfo, int nRequestID, bool bIsLast) {}
        private static global::LTSApi.Delegates.Action_IntPtr_IntPtr_IntPtr_int_bool _OnRspQryInstrumentUnitMargin_0DelegateInstance;

        private static void _OnRspQryInstrumentUnitMargin_0DelegateHook(global::System.IntPtr instance, global::System.IntPtr pInstrumentUnitMargin, global::System.IntPtr pRspInfo, int nRequestID, bool bIsLast)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::LTSApi.CSecurityFtdcQuerySpi) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::LTSApi.CSecurityFtdcInstrumentUnitMarginField __result0;
            if (pInstrumentUnitMargin == IntPtr.Zero) __result0 = new global::LTSApi.CSecurityFtdcInstrumentUnitMarginField();
            else __result0 = global::LTSApi.CSecurityFtdcInstrumentUnitMarginField.__CreateInstance(pInstrumentUnitMargin);
            global::LTSApi.CSecurityFtdcRspInfoField __result1;
            if (pRspInfo == IntPtr.Zero) __result1 = new global::LTSApi.CSecurityFtdcRspInfoField();
            else __result1 = global::LTSApi.CSecurityFtdcRspInfoField.__CreateInstance(pRspInfo);
            __target.OnRspQryInstrumentUnitMargin(__result0, __result1, nRequestID, bIsLast);
        }

        // void OnRspQryPreDelivInfo(CSecurityFtdcPreDelivInfoField *pPreDelivInfo, CSecurityFtdcRspInfoField *pRspInfo, int nRequestID, bool bIsLast) {}
        private static global::LTSApi.Delegates.Action_IntPtr_IntPtr_IntPtr_int_bool _OnRspQryPreDelivInfo_0DelegateInstance;

        private static void _OnRspQryPreDelivInfo_0DelegateHook(global::System.IntPtr instance, global::System.IntPtr pPreDelivInfo, global::System.IntPtr pRspInfo, int nRequestID, bool bIsLast)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::LTSApi.CSecurityFtdcQuerySpi) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::LTSApi.CSecurityFtdcPreDelivInfoField __result0;
            if (pPreDelivInfo == IntPtr.Zero) __result0 = new global::LTSApi.CSecurityFtdcPreDelivInfoField();
            else __result0 = global::LTSApi.CSecurityFtdcPreDelivInfoField.__CreateInstance(pPreDelivInfo);
            global::LTSApi.CSecurityFtdcRspInfoField __result1;
            if (pRspInfo == IntPtr.Zero) __result1 = new global::LTSApi.CSecurityFtdcRspInfoField();
            else __result1 = global::LTSApi.CSecurityFtdcRspInfoField.__CreateInstance(pRspInfo);
            __target.OnRspQryPreDelivInfo(__result0, __result1, nRequestID, bIsLast);
        }

        // void OnRspQryCreditStockAssignInfo(CSecurityFtdcCreditStockAssignInfoField *pCreditStockAssignInfo, CSecurityFtdcRspInfoField *pRspInfo, int nRequestID, bool bIsLast) {}
        private static global::LTSApi.Delegates.Action_IntPtr_IntPtr_IntPtr_int_bool _OnRspQryCreditStockAssignInfo_0DelegateInstance;

        private static void _OnRspQryCreditStockAssignInfo_0DelegateHook(global::System.IntPtr instance, global::System.IntPtr pCreditStockAssignInfo, global::System.IntPtr pRspInfo, int nRequestID, bool bIsLast)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::LTSApi.CSecurityFtdcQuerySpi) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::LTSApi.CSecurityFtdcCreditStockAssignInfoField __result0;
            if (pCreditStockAssignInfo == IntPtr.Zero) __result0 = new global::LTSApi.CSecurityFtdcCreditStockAssignInfoField();
            else __result0 = global::LTSApi.CSecurityFtdcCreditStockAssignInfoField.__CreateInstance(pCreditStockAssignInfo);
            global::LTSApi.CSecurityFtdcRspInfoField __result1;
            if (pRspInfo == IntPtr.Zero) __result1 = new global::LTSApi.CSecurityFtdcRspInfoField();
            else __result1 = global::LTSApi.CSecurityFtdcRspInfoField.__CreateInstance(pRspInfo);
            __target.OnRspQryCreditStockAssignInfo(__result0, __result1, nRequestID, bIsLast);
        }

        // void OnRspQryCreditCashAssignInfo(CSecurityFtdcCreditCashAssignInfoField *pCreditCashAssignInfo, CSecurityFtdcRspInfoField *pRspInfo, int nRequestID, bool bIsLast) {}
        private static global::LTSApi.Delegates.Action_IntPtr_IntPtr_IntPtr_int_bool _OnRspQryCreditCashAssignInfo_0DelegateInstance;

        private static void _OnRspQryCreditCashAssignInfo_0DelegateHook(global::System.IntPtr instance, global::System.IntPtr pCreditCashAssignInfo, global::System.IntPtr pRspInfo, int nRequestID, bool bIsLast)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::LTSApi.CSecurityFtdcQuerySpi) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::LTSApi.CSecurityFtdcCreditCashAssignInfoField __result0;
            if (pCreditCashAssignInfo == IntPtr.Zero) __result0 = new global::LTSApi.CSecurityFtdcCreditCashAssignInfoField();
            else __result0 = global::LTSApi.CSecurityFtdcCreditCashAssignInfoField.__CreateInstance(pCreditCashAssignInfo);
            global::LTSApi.CSecurityFtdcRspInfoField __result1;
            if (pRspInfo == IntPtr.Zero) __result1 = new global::LTSApi.CSecurityFtdcRspInfoField();
            else __result1 = global::LTSApi.CSecurityFtdcRspInfoField.__CreateInstance(pRspInfo);
            __target.OnRspQryCreditCashAssignInfo(__result0, __result1, nRequestID, bIsLast);
        }

        // void OnRspQryConversionRate(CSecurityFtdcConversionRateField *pConversionRate, CSecurityFtdcRspInfoField *pRspInfo, int nRequestID, bool bIsLast) {}
        private static global::LTSApi.Delegates.Action_IntPtr_IntPtr_IntPtr_int_bool _OnRspQryConversionRate_0DelegateInstance;

        private static void _OnRspQryConversionRate_0DelegateHook(global::System.IntPtr instance, global::System.IntPtr pConversionRate, global::System.IntPtr pRspInfo, int nRequestID, bool bIsLast)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::LTSApi.CSecurityFtdcQuerySpi) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::LTSApi.CSecurityFtdcConversionRateField __result0;
            if (pConversionRate == IntPtr.Zero) __result0 = new global::LTSApi.CSecurityFtdcConversionRateField();
            else __result0 = global::LTSApi.CSecurityFtdcConversionRateField.__CreateInstance(pConversionRate);
            global::LTSApi.CSecurityFtdcRspInfoField __result1;
            if (pRspInfo == IntPtr.Zero) __result1 = new global::LTSApi.CSecurityFtdcRspInfoField();
            else __result1 = global::LTSApi.CSecurityFtdcRspInfoField.__CreateInstance(pRspInfo);
            __target.OnRspQryConversionRate(__result0, __result1, nRequestID, bIsLast);
        }

        // void OnRspQryHisCreditDebtInfo(CSecurityFtdcHisCreditDebtInfoField *pHisCreditDebtInfo, CSecurityFtdcRspInfoField *pRspInfo, int nRequestID, bool bIsLast) {}
        private static global::LTSApi.Delegates.Action_IntPtr_IntPtr_IntPtr_int_bool _OnRspQryHisCreditDebtInfo_0DelegateInstance;

        private static void _OnRspQryHisCreditDebtInfo_0DelegateHook(global::System.IntPtr instance, global::System.IntPtr pHisCreditDebtInfo, global::System.IntPtr pRspInfo, int nRequestID, bool bIsLast)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::LTSApi.CSecurityFtdcQuerySpi) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::LTSApi.CSecurityFtdcHisCreditDebtInfoField __result0;
            if (pHisCreditDebtInfo == IntPtr.Zero) __result0 = new global::LTSApi.CSecurityFtdcHisCreditDebtInfoField();
            else __result0 = global::LTSApi.CSecurityFtdcHisCreditDebtInfoField.__CreateInstance(pHisCreditDebtInfo);
            global::LTSApi.CSecurityFtdcRspInfoField __result1;
            if (pRspInfo == IntPtr.Zero) __result1 = new global::LTSApi.CSecurityFtdcRspInfoField();
            else __result1 = global::LTSApi.CSecurityFtdcRspInfoField.__CreateInstance(pRspInfo);
            __target.OnRspQryHisCreditDebtInfo(__result0, __result1, nRequestID, bIsLast);
        }

        // void OnRspQryMarketDataStaticInfo(CSecurityFtdcMarketDataStaticInfoField *pMarketDataStaticInfo, CSecurityFtdcRspInfoField *pRspInfo, int nRequestID, bool bIsLast) {}
        private static global::LTSApi.Delegates.Action_IntPtr_IntPtr_IntPtr_int_bool _OnRspQryMarketDataStaticInfo_0DelegateInstance;

        private static void _OnRspQryMarketDataStaticInfo_0DelegateHook(global::System.IntPtr instance, global::System.IntPtr pMarketDataStaticInfo, global::System.IntPtr pRspInfo, int nRequestID, bool bIsLast)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::LTSApi.CSecurityFtdcQuerySpi) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::LTSApi.CSecurityFtdcMarketDataStaticInfoField __result0;
            if (pMarketDataStaticInfo == IntPtr.Zero) __result0 = new global::LTSApi.CSecurityFtdcMarketDataStaticInfoField();
            else __result0 = global::LTSApi.CSecurityFtdcMarketDataStaticInfoField.__CreateInstance(pMarketDataStaticInfo);
            global::LTSApi.CSecurityFtdcRspInfoField __result1;
            if (pRspInfo == IntPtr.Zero) __result1 = new global::LTSApi.CSecurityFtdcRspInfoField();
            else __result1 = global::LTSApi.CSecurityFtdcRspInfoField.__CreateInstance(pRspInfo);
            __target.OnRspQryMarketDataStaticInfo(__result0, __result1, nRequestID, bIsLast);
        }

        // void OnRspQryExpireRepurchInfo(CSecurityFtdcExpireRepurchInfoField *pExpireRepurchInfo, CSecurityFtdcRspInfoField *pRspInfo, int nRequestID, bool bIsLast) {}
        private static global::LTSApi.Delegates.Action_IntPtr_IntPtr_IntPtr_int_bool _OnRspQryExpireRepurchInfo_0DelegateInstance;

        private static void _OnRspQryExpireRepurchInfo_0DelegateHook(global::System.IntPtr instance, global::System.IntPtr pExpireRepurchInfo, global::System.IntPtr pRspInfo, int nRequestID, bool bIsLast)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::LTSApi.CSecurityFtdcQuerySpi) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::LTSApi.CSecurityFtdcExpireRepurchInfoField __result0;
            if (pExpireRepurchInfo == IntPtr.Zero) __result0 = new global::LTSApi.CSecurityFtdcExpireRepurchInfoField();
            else __result0 = global::LTSApi.CSecurityFtdcExpireRepurchInfoField.__CreateInstance(pExpireRepurchInfo);
            global::LTSApi.CSecurityFtdcRspInfoField __result1;
            if (pRspInfo == IntPtr.Zero) __result1 = new global::LTSApi.CSecurityFtdcRspInfoField();
            else __result1 = global::LTSApi.CSecurityFtdcRspInfoField.__CreateInstance(pRspInfo);
            __target.OnRspQryExpireRepurchInfo(__result0, __result1, nRequestID, bIsLast);
        }

        // void OnRspQryBondPledgeRate(CSecurityFtdcBondPledgeRateField *pBondPledgeRate, CSecurityFtdcRspInfoField *pRspInfo, int nRequestID, bool bIsLast) {}
        private static global::LTSApi.Delegates.Action_IntPtr_IntPtr_IntPtr_int_bool _OnRspQryBondPledgeRate_0DelegateInstance;

        private static void _OnRspQryBondPledgeRate_0DelegateHook(global::System.IntPtr instance, global::System.IntPtr pBondPledgeRate, global::System.IntPtr pRspInfo, int nRequestID, bool bIsLast)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::LTSApi.CSecurityFtdcQuerySpi) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::LTSApi.CSecurityFtdcBondPledgeRateField __result0;
            if (pBondPledgeRate == IntPtr.Zero) __result0 = new global::LTSApi.CSecurityFtdcBondPledgeRateField();
            else __result0 = global::LTSApi.CSecurityFtdcBondPledgeRateField.__CreateInstance(pBondPledgeRate);
            global::LTSApi.CSecurityFtdcRspInfoField __result1;
            if (pRspInfo == IntPtr.Zero) __result1 = new global::LTSApi.CSecurityFtdcRspInfoField();
            else __result1 = global::LTSApi.CSecurityFtdcRspInfoField.__CreateInstance(pRspInfo);
            __target.OnRspQryBondPledgeRate(__result0, __result1, nRequestID, bIsLast);
        }

        // void OnRspQryPledgeBond(CSecurityFtdcPledgeBondField *pPledgeBond, CSecurityFtdcRspInfoField *pRspInfo, int nRequestID, bool bIsLast) {}
        private static global::LTSApi.Delegates.Action_IntPtr_IntPtr_IntPtr_int_bool _OnRspQryPledgeBond_0DelegateInstance;

        private static void _OnRspQryPledgeBond_0DelegateHook(global::System.IntPtr instance, global::System.IntPtr pPledgeBond, global::System.IntPtr pRspInfo, int nRequestID, bool bIsLast)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::LTSApi.CSecurityFtdcQuerySpi) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::LTSApi.CSecurityFtdcPledgeBondField __result0;
            if (pPledgeBond == IntPtr.Zero) __result0 = new global::LTSApi.CSecurityFtdcPledgeBondField();
            else __result0 = global::LTSApi.CSecurityFtdcPledgeBondField.__CreateInstance(pPledgeBond);
            global::LTSApi.CSecurityFtdcRspInfoField __result1;
            if (pRspInfo == IntPtr.Zero) __result1 = new global::LTSApi.CSecurityFtdcRspInfoField();
            else __result1 = global::LTSApi.CSecurityFtdcRspInfoField.__CreateInstance(pRspInfo);
            __target.OnRspQryPledgeBond(__result0, __result1, nRequestID, bIsLast);
        }

        // void OnRspQryOrder(CSecurityFtdcOrderField *pOrder, CSecurityFtdcRspInfoField *pRspInfo, int nRequestID, bool bIsLast) {}
        private static global::LTSApi.Delegates.Action_IntPtr_IntPtr_IntPtr_int_bool _OnRspQryOrder_0DelegateInstance;

        private static void _OnRspQryOrder_0DelegateHook(global::System.IntPtr instance, global::System.IntPtr pOrder, global::System.IntPtr pRspInfo, int nRequestID, bool bIsLast)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::LTSApi.CSecurityFtdcQuerySpi) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::LTSApi.CSecurityFtdcOrderField __result0;
            if (pOrder == IntPtr.Zero) __result0 = new global::LTSApi.CSecurityFtdcOrderField();
            else __result0 = global::LTSApi.CSecurityFtdcOrderField.__CreateInstance(pOrder);
            global::LTSApi.CSecurityFtdcRspInfoField __result1;
            if (pRspInfo == IntPtr.Zero) __result1 = new global::LTSApi.CSecurityFtdcRspInfoField();
            else __result1 = global::LTSApi.CSecurityFtdcRspInfoField.__CreateInstance(pRspInfo);
            __target.OnRspQryOrder(__result0, __result1, nRequestID, bIsLast);
        }

        // void OnRspQryTrade(CSecurityFtdcTradeField *pTrade, CSecurityFtdcRspInfoField *pRspInfo, int nRequestID, bool bIsLast) {}
        private static global::LTSApi.Delegates.Action_IntPtr_IntPtr_IntPtr_int_bool _OnRspQryTrade_0DelegateInstance;

        private static void _OnRspQryTrade_0DelegateHook(global::System.IntPtr instance, global::System.IntPtr pTrade, global::System.IntPtr pRspInfo, int nRequestID, bool bIsLast)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::LTSApi.CSecurityFtdcQuerySpi) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::LTSApi.CSecurityFtdcTradeField __result0;
            if (pTrade == IntPtr.Zero) __result0 = new global::LTSApi.CSecurityFtdcTradeField();
            else __result0 = global::LTSApi.CSecurityFtdcTradeField.__CreateInstance(pTrade);
            global::LTSApi.CSecurityFtdcRspInfoField __result1;
            if (pRspInfo == IntPtr.Zero) __result1 = new global::LTSApi.CSecurityFtdcRspInfoField();
            else __result1 = global::LTSApi.CSecurityFtdcRspInfoField.__CreateInstance(pRspInfo);
            __target.OnRspQryTrade(__result0, __result1, nRequestID, bIsLast);
        }

        // void OnRspQryInvestorPosition(CSecurityFtdcInvestorPositionField *pInvestorPosition, CSecurityFtdcRspInfoField *pRspInfo, int nRequestID, bool bIsLast) {}
        private static global::LTSApi.Delegates.Action_IntPtr_IntPtr_IntPtr_int_bool _OnRspQryInvestorPosition_0DelegateInstance;

        private static void _OnRspQryInvestorPosition_0DelegateHook(global::System.IntPtr instance, global::System.IntPtr pInvestorPosition, global::System.IntPtr pRspInfo, int nRequestID, bool bIsLast)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::LTSApi.CSecurityFtdcQuerySpi) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::LTSApi.CSecurityFtdcInvestorPositionField __result0;
            if (pInvestorPosition == IntPtr.Zero) __result0 = new global::LTSApi.CSecurityFtdcInvestorPositionField();
            else __result0 = global::LTSApi.CSecurityFtdcInvestorPositionField.__CreateInstance(pInvestorPosition);
            global::LTSApi.CSecurityFtdcRspInfoField __result1;
            if (pRspInfo == IntPtr.Zero) __result1 = new global::LTSApi.CSecurityFtdcRspInfoField();
            else __result1 = global::LTSApi.CSecurityFtdcRspInfoField.__CreateInstance(pRspInfo);
            __target.OnRspQryInvestorPosition(__result0, __result1, nRequestID, bIsLast);
        }

        // void OnRspQryFundTransferSerial(CSecurityFtdcFundTransferField *pFundTransfer, CSecurityFtdcRspInfoField *pRspInfo, int nRequestID, bool bIsLast) {}
        private static global::LTSApi.Delegates.Action_IntPtr_IntPtr_IntPtr_int_bool _OnRspQryFundTransferSerial_0DelegateInstance;

        private static void _OnRspQryFundTransferSerial_0DelegateHook(global::System.IntPtr instance, global::System.IntPtr pFundTransfer, global::System.IntPtr pRspInfo, int nRequestID, bool bIsLast)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::LTSApi.CSecurityFtdcQuerySpi) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::LTSApi.CSecurityFtdcFundTransferField __result0;
            if (pFundTransfer == IntPtr.Zero) __result0 = new global::LTSApi.CSecurityFtdcFundTransferField();
            else __result0 = global::LTSApi.CSecurityFtdcFundTransferField.__CreateInstance(pFundTransfer);
            global::LTSApi.CSecurityFtdcRspInfoField __result1;
            if (pRspInfo == IntPtr.Zero) __result1 = new global::LTSApi.CSecurityFtdcRspInfoField();
            else __result1 = global::LTSApi.CSecurityFtdcRspInfoField.__CreateInstance(pRspInfo);
            __target.OnRspQryFundTransferSerial(__result0, __result1, nRequestID, bIsLast);
        }

        // void OnRspQryFundInterTransferSerial(CSecurityFtdcFundInterTransferSerialField *pFundInterTransferSerial, CSecurityFtdcRspInfoField *pRspInfo, int nRequestID, bool bIsLast) {}
        private static global::LTSApi.Delegates.Action_IntPtr_IntPtr_IntPtr_int_bool _OnRspQryFundInterTransferSerial_0DelegateInstance;

        private static void _OnRspQryFundInterTransferSerial_0DelegateHook(global::System.IntPtr instance, global::System.IntPtr pFundInterTransferSerial, global::System.IntPtr pRspInfo, int nRequestID, bool bIsLast)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::LTSApi.CSecurityFtdcQuerySpi) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::LTSApi.CSecurityFtdcFundInterTransferSerialField __result0;
            if (pFundInterTransferSerial == IntPtr.Zero) __result0 = new global::LTSApi.CSecurityFtdcFundInterTransferSerialField();
            else __result0 = global::LTSApi.CSecurityFtdcFundInterTransferSerialField.__CreateInstance(pFundInterTransferSerial);
            global::LTSApi.CSecurityFtdcRspInfoField __result1;
            if (pRspInfo == IntPtr.Zero) __result1 = new global::LTSApi.CSecurityFtdcRspInfoField();
            else __result1 = global::LTSApi.CSecurityFtdcRspInfoField.__CreateInstance(pRspInfo);
            __target.OnRspQryFundInterTransferSerial(__result0, __result1, nRequestID, bIsLast);
        }

        private static void*[] __ManagedVTables;
        private static void*[] _Thunks;

        private void SetupVTables(bool destructorOnly = false)
        {
            if (__OriginalVTables != null)
                return;
            __OriginalVTables = new void*[] { *(void**) (__Instance + 0) };

            if (destructorOnly)
                return;
            if (_Thunks == null)
            {
                _Thunks = new void*[34];
                _OnFrontConnected_0DelegateInstance += _OnFrontConnected_0DelegateHook;
                _Thunks[0] = Marshal.GetFunctionPointerForDelegate(_OnFrontConnected_0DelegateInstance).ToPointer();
                _OnFrontDisconnected_0DelegateInstance += _OnFrontDisconnected_0DelegateHook;
                _Thunks[1] = Marshal.GetFunctionPointerForDelegate(_OnFrontDisconnected_0DelegateInstance).ToPointer();
                _OnHeartBeatWarning_0DelegateInstance += _OnHeartBeatWarning_0DelegateHook;
                _Thunks[2] = Marshal.GetFunctionPointerForDelegate(_OnHeartBeatWarning_0DelegateInstance).ToPointer();
                _OnRspError_0DelegateInstance += _OnRspError_0DelegateHook;
                _Thunks[3] = Marshal.GetFunctionPointerForDelegate(_OnRspError_0DelegateInstance).ToPointer();
                _OnRspUserLogin_0DelegateInstance += _OnRspUserLogin_0DelegateHook;
                _Thunks[4] = Marshal.GetFunctionPointerForDelegate(_OnRspUserLogin_0DelegateInstance).ToPointer();
                _OnRspUserLogout_0DelegateInstance += _OnRspUserLogout_0DelegateHook;
                _Thunks[5] = Marshal.GetFunctionPointerForDelegate(_OnRspUserLogout_0DelegateInstance).ToPointer();
                _OnRspFetchAuthRandCode_0DelegateInstance += _OnRspFetchAuthRandCode_0DelegateHook;
                _Thunks[6] = Marshal.GetFunctionPointerForDelegate(_OnRspFetchAuthRandCode_0DelegateInstance).ToPointer();
                _OnRspQryExchange_0DelegateInstance += _OnRspQryExchange_0DelegateHook;
                _Thunks[7] = Marshal.GetFunctionPointerForDelegate(_OnRspQryExchange_0DelegateInstance).ToPointer();
                _OnRspQryInstrument_0DelegateInstance += _OnRspQryInstrument_0DelegateHook;
                _Thunks[8] = Marshal.GetFunctionPointerForDelegate(_OnRspQryInstrument_0DelegateInstance).ToPointer();
                _OnRspQryInvestor_0DelegateInstance += _OnRspQryInvestor_0DelegateHook;
                _Thunks[9] = Marshal.GetFunctionPointerForDelegate(_OnRspQryInvestor_0DelegateInstance).ToPointer();
                _OnRspQryTradingCode_0DelegateInstance += _OnRspQryTradingCode_0DelegateHook;
                _Thunks[10] = Marshal.GetFunctionPointerForDelegate(_OnRspQryTradingCode_0DelegateInstance).ToPointer();
                _OnRspQryTradingAccount_0DelegateInstance += _OnRspQryTradingAccount_0DelegateHook;
                _Thunks[11] = Marshal.GetFunctionPointerForDelegate(_OnRspQryTradingAccount_0DelegateInstance).ToPointer();
                _OnRspQryBondInterest_0DelegateInstance += _OnRspQryBondInterest_0DelegateHook;
                _Thunks[12] = Marshal.GetFunctionPointerForDelegate(_OnRspQryBondInterest_0DelegateInstance).ToPointer();
                _OnRspQryMarketRationInfo_0DelegateInstance += _OnRspQryMarketRationInfo_0DelegateHook;
                _Thunks[13] = Marshal.GetFunctionPointerForDelegate(_OnRspQryMarketRationInfo_0DelegateInstance).ToPointer();
                _OnRspQryInstrumentCommissionRate_0DelegateInstance += _OnRspQryInstrumentCommissionRate_0DelegateHook;
                _Thunks[14] = Marshal.GetFunctionPointerForDelegate(_OnRspQryInstrumentCommissionRate_0DelegateInstance).ToPointer();
                _OnRspQryETFInstrument_0DelegateInstance += _OnRspQryETFInstrument_0DelegateHook;
                _Thunks[15] = Marshal.GetFunctionPointerForDelegate(_OnRspQryETFInstrument_0DelegateInstance).ToPointer();
                _OnRspQryETFBasket_0DelegateInstance += _OnRspQryETFBasket_0DelegateHook;
                _Thunks[16] = Marshal.GetFunctionPointerForDelegate(_OnRspQryETFBasket_0DelegateInstance).ToPointer();
                _OnRspQryOFInstrument_0DelegateInstance += _OnRspQryOFInstrument_0DelegateHook;
                _Thunks[17] = Marshal.GetFunctionPointerForDelegate(_OnRspQryOFInstrument_0DelegateInstance).ToPointer();
                _OnRspQrySFInstrument_0DelegateInstance += _OnRspQrySFInstrument_0DelegateHook;
                _Thunks[18] = Marshal.GetFunctionPointerForDelegate(_OnRspQrySFInstrument_0DelegateInstance).ToPointer();
                _OnRspQryInstrumentUnitMargin_0DelegateInstance += _OnRspQryInstrumentUnitMargin_0DelegateHook;
                _Thunks[19] = Marshal.GetFunctionPointerForDelegate(_OnRspQryInstrumentUnitMargin_0DelegateInstance).ToPointer();
                _OnRspQryPreDelivInfo_0DelegateInstance += _OnRspQryPreDelivInfo_0DelegateHook;
                _Thunks[20] = Marshal.GetFunctionPointerForDelegate(_OnRspQryPreDelivInfo_0DelegateInstance).ToPointer();
                _OnRspQryCreditStockAssignInfo_0DelegateInstance += _OnRspQryCreditStockAssignInfo_0DelegateHook;
                _Thunks[21] = Marshal.GetFunctionPointerForDelegate(_OnRspQryCreditStockAssignInfo_0DelegateInstance).ToPointer();
                _OnRspQryCreditCashAssignInfo_0DelegateInstance += _OnRspQryCreditCashAssignInfo_0DelegateHook;
                _Thunks[22] = Marshal.GetFunctionPointerForDelegate(_OnRspQryCreditCashAssignInfo_0DelegateInstance).ToPointer();
                _OnRspQryConversionRate_0DelegateInstance += _OnRspQryConversionRate_0DelegateHook;
                _Thunks[23] = Marshal.GetFunctionPointerForDelegate(_OnRspQryConversionRate_0DelegateInstance).ToPointer();
                _OnRspQryHisCreditDebtInfo_0DelegateInstance += _OnRspQryHisCreditDebtInfo_0DelegateHook;
                _Thunks[24] = Marshal.GetFunctionPointerForDelegate(_OnRspQryHisCreditDebtInfo_0DelegateInstance).ToPointer();
                _OnRspQryMarketDataStaticInfo_0DelegateInstance += _OnRspQryMarketDataStaticInfo_0DelegateHook;
                _Thunks[25] = Marshal.GetFunctionPointerForDelegate(_OnRspQryMarketDataStaticInfo_0DelegateInstance).ToPointer();
                _OnRspQryExpireRepurchInfo_0DelegateInstance += _OnRspQryExpireRepurchInfo_0DelegateHook;
                _Thunks[26] = Marshal.GetFunctionPointerForDelegate(_OnRspQryExpireRepurchInfo_0DelegateInstance).ToPointer();
                _OnRspQryBondPledgeRate_0DelegateInstance += _OnRspQryBondPledgeRate_0DelegateHook;
                _Thunks[27] = Marshal.GetFunctionPointerForDelegate(_OnRspQryBondPledgeRate_0DelegateInstance).ToPointer();
                _OnRspQryPledgeBond_0DelegateInstance += _OnRspQryPledgeBond_0DelegateHook;
                _Thunks[28] = Marshal.GetFunctionPointerForDelegate(_OnRspQryPledgeBond_0DelegateInstance).ToPointer();
                _OnRspQryOrder_0DelegateInstance += _OnRspQryOrder_0DelegateHook;
                _Thunks[29] = Marshal.GetFunctionPointerForDelegate(_OnRspQryOrder_0DelegateInstance).ToPointer();
                _OnRspQryTrade_0DelegateInstance += _OnRspQryTrade_0DelegateHook;
                _Thunks[30] = Marshal.GetFunctionPointerForDelegate(_OnRspQryTrade_0DelegateInstance).ToPointer();
                _OnRspQryInvestorPosition_0DelegateInstance += _OnRspQryInvestorPosition_0DelegateHook;
                _Thunks[31] = Marshal.GetFunctionPointerForDelegate(_OnRspQryInvestorPosition_0DelegateInstance).ToPointer();
                _OnRspQryFundTransferSerial_0DelegateInstance += _OnRspQryFundTransferSerial_0DelegateHook;
                _Thunks[32] = Marshal.GetFunctionPointerForDelegate(_OnRspQryFundTransferSerial_0DelegateInstance).ToPointer();
                _OnRspQryFundInterTransferSerial_0DelegateInstance += _OnRspQryFundInterTransferSerial_0DelegateHook;
                _Thunks[33] = Marshal.GetFunctionPointerForDelegate(_OnRspQryFundInterTransferSerial_0DelegateInstance).ToPointer();
            }

            if (__ManagedVTables == null)
            {
                __ManagedVTables = new void*[1];
                var vfptr0 = Marshal.AllocHGlobal(34 * 4);
                __ManagedVTables[0] = vfptr0.ToPointer();
                *(void**) (vfptr0 + 0) = _Thunks[0];
                *(void**) (vfptr0 + 4) = _Thunks[1];
                *(void**) (vfptr0 + 8) = _Thunks[2];
                *(void**) (vfptr0 + 12) = _Thunks[3];
                *(void**) (vfptr0 + 16) = _Thunks[4];
                *(void**) (vfptr0 + 20) = _Thunks[5];
                *(void**) (vfptr0 + 24) = _Thunks[6];
                *(void**) (vfptr0 + 28) = _Thunks[7];
                *(void**) (vfptr0 + 32) = _Thunks[8];
                *(void**) (vfptr0 + 36) = _Thunks[9];
                *(void**) (vfptr0 + 40) = _Thunks[10];
                *(void**) (vfptr0 + 44) = _Thunks[11];
                *(void**) (vfptr0 + 48) = _Thunks[12];
                *(void**) (vfptr0 + 52) = _Thunks[13];
                *(void**) (vfptr0 + 56) = _Thunks[14];
                *(void**) (vfptr0 + 60) = _Thunks[15];
                *(void**) (vfptr0 + 64) = _Thunks[16];
                *(void**) (vfptr0 + 68) = _Thunks[17];
                *(void**) (vfptr0 + 72) = _Thunks[18];
                *(void**) (vfptr0 + 76) = _Thunks[19];
                *(void**) (vfptr0 + 80) = _Thunks[20];
                *(void**) (vfptr0 + 84) = _Thunks[21];
                *(void**) (vfptr0 + 88) = _Thunks[22];
                *(void**) (vfptr0 + 92) = _Thunks[23];
                *(void**) (vfptr0 + 96) = _Thunks[24];
                *(void**) (vfptr0 + 100) = _Thunks[25];
                *(void**) (vfptr0 + 104) = _Thunks[26];
                *(void**) (vfptr0 + 108) = _Thunks[27];
                *(void**) (vfptr0 + 112) = _Thunks[28];
                *(void**) (vfptr0 + 116) = _Thunks[29];
                *(void**) (vfptr0 + 120) = _Thunks[30];
                *(void**) (vfptr0 + 124) = _Thunks[31];
                *(void**) (vfptr0 + 128) = _Thunks[32];
                *(void**) (vfptr0 + 132) = _Thunks[33];
            }

            *(void**) (__Instance + 0) = __ManagedVTables[0];
        }

        #endregion
    }

    public unsafe abstract partial class CSecurityFtdcQueryApi : IDisposable
    {
        public partial struct __Internal
        {
            public global::System.IntPtr vfptr_CSecurityFtdcQueryApi;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("securitymduserapi", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0CSecurityFtdcQueryApi@@QAE@XZ")]
            internal static extern global::System.IntPtr ctor_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("securitymduserapi", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0CSecurityFtdcQueryApi@@QAE@ABV0@@Z")]
            internal static extern global::System.IntPtr cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("securitymduserapi", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??1CSecurityFtdcQueryApi@@IAE@XZ")]
            internal static extern void dtor_0(global::System.IntPtr instance, int delete);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("securitymduserapi", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?CreateFtdcQueryApi@CSecurityFtdcQueryApi@@SAPAV1@PBD@Z")]
            internal static extern global::System.IntPtr CreateFtdcQueryApi_0([MarshalAs(UnmanagedType.LPStr)] string pszFlowPath);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::LTSApi.CSecurityFtdcQueryApi> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::LTSApi.CSecurityFtdcQueryApi>();
        protected void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::LTSApi.CSecurityFtdcQueryApi __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new CSecurityFtdcQueryApiInternal(native.ToPointer(), skipVTables);
        }

        internal static global::LTSApi.CSecurityFtdcQueryApi __CreateInstance(global::LTSApi.CSecurityFtdcQueryApi.__Internal native, bool skipVTables = false)
        {
            return new CSecurityFtdcQueryApiInternal(native, skipVTables);
        }

        protected CSecurityFtdcQueryApi(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
            __OriginalVTables = new void*[] { *(void**) (__Instance + 0) };
        }

        protected CSecurityFtdcQueryApi()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::LTSApi.CSecurityFtdcQueryApi.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            __Internal.ctor_0((__Instance + __PointerAdjustment));
            SetupVTables(GetType().FullName == "LTSApi.CSecurityFtdcQueryApi");
        }

        protected CSecurityFtdcQueryApi(global::LTSApi.CSecurityFtdcQueryApi _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::LTSApi.CSecurityFtdcQueryApi.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(_0, null))
                throw new global::System.ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = _0.__Instance;
            __Internal.cctor_1((__Instance + __PointerAdjustment), __arg0);
            SetupVTables(GetType().FullName == "LTSApi.CSecurityFtdcQueryApi");
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            global::LTSApi.CSecurityFtdcQueryApi __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            ((global::LTSApi.CSecurityFtdcQueryApi.__Internal*) __Instance)->vfptr_CSecurityFtdcQueryApi = new global::System.IntPtr(__OriginalVTables[0]);
            if (disposing)
                __Internal.dtor_0((__Instance + __PointerAdjustment), 0);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
        }

        public abstract void Release();

        public abstract void Init();

        public abstract int Join();

        public abstract void RegisterFront(sbyte* pszFrontAddress);

        public abstract void RegisterSpi(global::LTSApi.CSecurityFtdcQuerySpi pSpi);

        public abstract int ReqUserLogin(global::LTSApi.CSecurityFtdcReqUserLoginField pReqUserLoginField, int nRequestID);

        public abstract int ReqUserLogout(global::LTSApi.CSecurityFtdcUserLogoutField pUserLogout, int nRequestID);

        public abstract int ReqFetchAuthRandCode(global::LTSApi.CSecurityFtdcAuthRandCodeField pAuthRandCode, int nRequestID);

        public abstract int ReqQryExchange(global::LTSApi.CSecurityFtdcQryExchangeField pQryExchange, int nRequestID);

        public abstract int ReqQryInstrument(global::LTSApi.CSecurityFtdcQryInstrumentField pQryInstrument, int nRequestID);

        public abstract int ReqQryInvestor(global::LTSApi.CSecurityFtdcQryInvestorField pQryInvestor, int nRequestID);

        public abstract int ReqQryTradingCode(global::LTSApi.CSecurityFtdcQryTradingCodeField pQryTradingCode, int nRequestID);

        public abstract int ReqQryTradingAccount(global::LTSApi.CSecurityFtdcQryTradingAccountField pQryTradingAccount, int nRequestID);

        public abstract int ReqQryBondInterest(global::LTSApi.CSecurityFtdcQryBondInterestField pQryBondInterest, int nRequestID);

        public abstract int ReqQryMarketRationInfo(global::LTSApi.CSecurityFtdcQryMarketRationInfoField pQryMarketRationInfo, int nRequestID);

        public abstract int ReqQryInstrumentCommissionRate(global::LTSApi.CSecurityFtdcQryInstrumentCommissionRateField pQryInstrumentCommissionRate, int nRequestID);

        public abstract int ReqQryETFInstrument(global::LTSApi.CSecurityFtdcQryETFInstrumentField pQryETFInstrument, int nRequestID);

        public abstract int ReqQryETFBasket(global::LTSApi.CSecurityFtdcQryETFBasketField pQryETFBasket, int nRequestID);

        public abstract int ReqQryOFInstrument(global::LTSApi.CSecurityFtdcQryOFInstrumentField pQryOFInstrument, int nRequestID);

        public abstract int ReqQrySFInstrument(global::LTSApi.CSecurityFtdcQrySFInstrumentField pQrySFInstrument, int nRequestID);

        public abstract int ReqQryInstrumentUnitMargin(global::LTSApi.CSecurityFtdcQryInstrumentUnitMarginField pQryInstrumentUnitMargin, int nRequestID);

        public abstract int ReqQryPreDelivInfo(global::LTSApi.CSecurityFtdcQryPreDelivInfoField pQryPreDelivInfo, int nRequestID);

        public abstract int ReqQryCreditStockAssignInfo(global::LTSApi.CSecurityFtdcQryCreditStockAssignInfoField pQryCreditStockAssignInfo, int nRequestID);

        public abstract int ReqQryCreditCashAssignInfo(global::LTSApi.CSecurityFtdcQryCreditCashAssignInfoField pQryCreditCashAssignInfo, int nRequestID);

        public abstract int ReqQryConversionRate(global::LTSApi.CSecurityFtdcQryConversionRateField pQryConversionRate, int nRequestID);

        public abstract int ReqQryHisCreditDebtInfo(global::LTSApi.CSecurityFtdcQryHisCreditDebtInfoField pQryHisCreditDebtInfo, int nRequestID);

        public abstract int ReqQryMarketDataStaticInfo(global::LTSApi.CSecurityFtdcQryMarketDataStaticInfoField pQryMarketDataStaticInfo, int nRequestID);

        public abstract int ReqQryExpireRepurchInfo(global::LTSApi.CSecurityFtdcQryExpireRepurchInfoField pQryExpireRepurchInfo, int nRequestID);

        public abstract int ReqQryBondPledgeRate(global::LTSApi.CSecurityFtdcQryBondPledgeRateField pQryBondPledgeRate, int nRequestID);

        public abstract int ReqQryPledgeBond(global::LTSApi.CSecurityFtdcQryPledgeBondField pQryPledgeBond, int nRequestID);

        public abstract int ReqQryOrder(global::LTSApi.CSecurityFtdcQryOrderField pQryOrder, int nRequestID);

        public abstract int ReqQryTrade(global::LTSApi.CSecurityFtdcQryTradeField pQryTrade, int nRequestID);

        public abstract int ReqQryInvestorPosition(global::LTSApi.CSecurityFtdcQryInvestorPositionField pQryInvestorPosition, int nRequestID);

        public abstract int ReqQryFundTransferSerial(global::LTSApi.CSecurityFtdcQryFundTransferSerialField pQryFundTransferSerial, int nRequestID);

        public abstract int ReqQryFundInterTransferSerial(global::LTSApi.CSecurityFtdcQryFundInterTransferSerialField pQryFundInterTransferSerial, int nRequestID);

        public static global::LTSApi.CSecurityFtdcQueryApi CreateFtdcQueryApi(string pszFlowPath)
        {
            var __ret = __Internal.CreateFtdcQueryApi_0(pszFlowPath);
            global::LTSApi.CSecurityFtdcQueryApi __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::LTSApi.CSecurityFtdcQueryApi.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::LTSApi.CSecurityFtdcQueryApi) global::LTSApi.CSecurityFtdcQueryApi.NativeToManagedMap[__ret];
            else __result0 = global::LTSApi.CSecurityFtdcQueryApi.__CreateInstance(__ret);
            return __result0;
        }

        public abstract string TradingDay
        {
            get;
        }

        #region Virtual table interop

        // void Release() = 0
        private static global::LTSApi.Delegates.Action_IntPtr _Release_0DelegateInstance;

        private static void _Release_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::LTSApi.CSecurityFtdcQueryApi) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.Release();
        }

        // void Init() = 0
        private static global::LTSApi.Delegates.Action_IntPtr _Init_0DelegateInstance;

        private static void _Init_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::LTSApi.CSecurityFtdcQueryApi) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.Init();
        }

        // int Join() = 0
        private static global::LTSApi.Delegates.Func_int_IntPtr _Join_0DelegateInstance;

        private static int _Join_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::LTSApi.CSecurityFtdcQueryApi) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.Join();
            return __ret;
        }

        // char *GetTradingDay() = 0
        private static global::LTSApi.Delegates.Func_string_IntPtr _GetTradingDay_0DelegateInstance;

        private static global::System.IntPtr _GetTradingDay_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::LTSApi.CSecurityFtdcQueryApi) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.TradingDay;
            return Marshal.StringToHGlobalAnsi(__ret);
        }

        // void RegisterFront(char *pszFrontAddress) = 0
        private static global::LTSApi.Delegates.Action_IntPtr_sbytePtr _RegisterFront_0DelegateInstance;

        private static void _RegisterFront_0DelegateHook(global::System.IntPtr instance, sbyte* pszFrontAddress)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::LTSApi.CSecurityFtdcQueryApi) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.RegisterFront(pszFrontAddress);
        }

        // void RegisterSpi(CSecurityFtdcQuerySpi *pSpi) = 0
        private static global::LTSApi.Delegates.Action_IntPtr_IntPtr _RegisterSpi_0DelegateInstance;

        private static void _RegisterSpi_0DelegateHook(global::System.IntPtr instance, global::System.IntPtr pSpi)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::LTSApi.CSecurityFtdcQueryApi) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::LTSApi.CSecurityFtdcQuerySpi __result0;
            if (pSpi == IntPtr.Zero) __result0 = null;
            else if (global::LTSApi.CSecurityFtdcQuerySpi.NativeToManagedMap.ContainsKey(pSpi))
                __result0 = (global::LTSApi.CSecurityFtdcQuerySpi) global::LTSApi.CSecurityFtdcQuerySpi.NativeToManagedMap[pSpi];
            else __result0 = global::LTSApi.CSecurityFtdcQuerySpi.__CreateInstance(pSpi);
            __target.RegisterSpi(__result0);
        }

        // int ReqUserLogin(CSecurityFtdcReqUserLoginField *pReqUserLoginField, int nRequestID) = 0
        private static global::LTSApi.Delegates.Func_int_IntPtr_IntPtr_int _ReqUserLogin_0DelegateInstance;

        private static int _ReqUserLogin_0DelegateHook(global::System.IntPtr instance, global::System.IntPtr pReqUserLoginField, int nRequestID)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::LTSApi.CSecurityFtdcQueryApi) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::LTSApi.CSecurityFtdcReqUserLoginField __result0;
            if (pReqUserLoginField == IntPtr.Zero) __result0 = new global::LTSApi.CSecurityFtdcReqUserLoginField();
            else __result0 = global::LTSApi.CSecurityFtdcReqUserLoginField.__CreateInstance(pReqUserLoginField);
            var __ret = __target.ReqUserLogin(__result0, nRequestID);
            return __ret;
        }

        // int ReqUserLogout(CSecurityFtdcUserLogoutField *pUserLogout, int nRequestID) = 0
        private static global::LTSApi.Delegates.Func_int_IntPtr_IntPtr_int _ReqUserLogout_0DelegateInstance;

        private static int _ReqUserLogout_0DelegateHook(global::System.IntPtr instance, global::System.IntPtr pUserLogout, int nRequestID)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::LTSApi.CSecurityFtdcQueryApi) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::LTSApi.CSecurityFtdcUserLogoutField __result0;
            if (pUserLogout == IntPtr.Zero) __result0 = new global::LTSApi.CSecurityFtdcUserLogoutField();
            else __result0 = global::LTSApi.CSecurityFtdcUserLogoutField.__CreateInstance(pUserLogout);
            var __ret = __target.ReqUserLogout(__result0, nRequestID);
            return __ret;
        }

        // int ReqFetchAuthRandCode(CSecurityFtdcAuthRandCodeField *pAuthRandCode, int nRequestID) = 0
        private static global::LTSApi.Delegates.Func_int_IntPtr_IntPtr_int _ReqFetchAuthRandCode_0DelegateInstance;

        private static int _ReqFetchAuthRandCode_0DelegateHook(global::System.IntPtr instance, global::System.IntPtr pAuthRandCode, int nRequestID)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::LTSApi.CSecurityFtdcQueryApi) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::LTSApi.CSecurityFtdcAuthRandCodeField __result0;
            if (pAuthRandCode == IntPtr.Zero) __result0 = new global::LTSApi.CSecurityFtdcAuthRandCodeField();
            else __result0 = global::LTSApi.CSecurityFtdcAuthRandCodeField.__CreateInstance(pAuthRandCode);
            var __ret = __target.ReqFetchAuthRandCode(__result0, nRequestID);
            return __ret;
        }

        // int ReqQryExchange(CSecurityFtdcQryExchangeField *pQryExchange, int nRequestID) = 0
        private static global::LTSApi.Delegates.Func_int_IntPtr_IntPtr_int _ReqQryExchange_0DelegateInstance;

        private static int _ReqQryExchange_0DelegateHook(global::System.IntPtr instance, global::System.IntPtr pQryExchange, int nRequestID)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::LTSApi.CSecurityFtdcQueryApi) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::LTSApi.CSecurityFtdcQryExchangeField __result0;
            if (pQryExchange == IntPtr.Zero) __result0 = new global::LTSApi.CSecurityFtdcQryExchangeField();
            else __result0 = global::LTSApi.CSecurityFtdcQryExchangeField.__CreateInstance(pQryExchange);
            var __ret = __target.ReqQryExchange(__result0, nRequestID);
            return __ret;
        }

        // int ReqQryInstrument(CSecurityFtdcQryInstrumentField *pQryInstrument, int nRequestID) = 0
        private static global::LTSApi.Delegates.Func_int_IntPtr_IntPtr_int _ReqQryInstrument_0DelegateInstance;

        private static int _ReqQryInstrument_0DelegateHook(global::System.IntPtr instance, global::System.IntPtr pQryInstrument, int nRequestID)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::LTSApi.CSecurityFtdcQueryApi) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::LTSApi.CSecurityFtdcQryInstrumentField __result0;
            if (pQryInstrument == IntPtr.Zero) __result0 = new global::LTSApi.CSecurityFtdcQryInstrumentField();
            else __result0 = global::LTSApi.CSecurityFtdcQryInstrumentField.__CreateInstance(pQryInstrument);
            var __ret = __target.ReqQryInstrument(__result0, nRequestID);
            return __ret;
        }

        // int ReqQryInvestor(CSecurityFtdcQryInvestorField *pQryInvestor, int nRequestID) = 0
        private static global::LTSApi.Delegates.Func_int_IntPtr_IntPtr_int _ReqQryInvestor_0DelegateInstance;

        private static int _ReqQryInvestor_0DelegateHook(global::System.IntPtr instance, global::System.IntPtr pQryInvestor, int nRequestID)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::LTSApi.CSecurityFtdcQueryApi) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::LTSApi.CSecurityFtdcQryInvestorField __result0;
            if (pQryInvestor == IntPtr.Zero) __result0 = new global::LTSApi.CSecurityFtdcQryInvestorField();
            else __result0 = global::LTSApi.CSecurityFtdcQryInvestorField.__CreateInstance(pQryInvestor);
            var __ret = __target.ReqQryInvestor(__result0, nRequestID);
            return __ret;
        }

        // int ReqQryTradingCode(CSecurityFtdcQryTradingCodeField *pQryTradingCode, int nRequestID) = 0
        private static global::LTSApi.Delegates.Func_int_IntPtr_IntPtr_int _ReqQryTradingCode_0DelegateInstance;

        private static int _ReqQryTradingCode_0DelegateHook(global::System.IntPtr instance, global::System.IntPtr pQryTradingCode, int nRequestID)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::LTSApi.CSecurityFtdcQueryApi) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::LTSApi.CSecurityFtdcQryTradingCodeField __result0;
            if (pQryTradingCode == IntPtr.Zero) __result0 = new global::LTSApi.CSecurityFtdcQryTradingCodeField();
            else __result0 = global::LTSApi.CSecurityFtdcQryTradingCodeField.__CreateInstance(pQryTradingCode);
            var __ret = __target.ReqQryTradingCode(__result0, nRequestID);
            return __ret;
        }

        // int ReqQryTradingAccount(CSecurityFtdcQryTradingAccountField *pQryTradingAccount, int nRequestID) = 0
        private static global::LTSApi.Delegates.Func_int_IntPtr_IntPtr_int _ReqQryTradingAccount_0DelegateInstance;

        private static int _ReqQryTradingAccount_0DelegateHook(global::System.IntPtr instance, global::System.IntPtr pQryTradingAccount, int nRequestID)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::LTSApi.CSecurityFtdcQueryApi) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::LTSApi.CSecurityFtdcQryTradingAccountField __result0;
            if (pQryTradingAccount == IntPtr.Zero) __result0 = new global::LTSApi.CSecurityFtdcQryTradingAccountField();
            else __result0 = global::LTSApi.CSecurityFtdcQryTradingAccountField.__CreateInstance(pQryTradingAccount);
            var __ret = __target.ReqQryTradingAccount(__result0, nRequestID);
            return __ret;
        }

        // int ReqQryBondInterest(CSecurityFtdcQryBondInterestField *pQryBondInterest, int nRequestID) = 0
        private static global::LTSApi.Delegates.Func_int_IntPtr_IntPtr_int _ReqQryBondInterest_0DelegateInstance;

        private static int _ReqQryBondInterest_0DelegateHook(global::System.IntPtr instance, global::System.IntPtr pQryBondInterest, int nRequestID)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::LTSApi.CSecurityFtdcQueryApi) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::LTSApi.CSecurityFtdcQryBondInterestField __result0;
            if (pQryBondInterest == IntPtr.Zero) __result0 = new global::LTSApi.CSecurityFtdcQryBondInterestField();
            else __result0 = global::LTSApi.CSecurityFtdcQryBondInterestField.__CreateInstance(pQryBondInterest);
            var __ret = __target.ReqQryBondInterest(__result0, nRequestID);
            return __ret;
        }

        // int ReqQryMarketRationInfo(CSecurityFtdcQryMarketRationInfoField *pQryMarketRationInfo, int nRequestID) = 0
        private static global::LTSApi.Delegates.Func_int_IntPtr_IntPtr_int _ReqQryMarketRationInfo_0DelegateInstance;

        private static int _ReqQryMarketRationInfo_0DelegateHook(global::System.IntPtr instance, global::System.IntPtr pQryMarketRationInfo, int nRequestID)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::LTSApi.CSecurityFtdcQueryApi) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::LTSApi.CSecurityFtdcQryMarketRationInfoField __result0;
            if (pQryMarketRationInfo == IntPtr.Zero) __result0 = new global::LTSApi.CSecurityFtdcQryMarketRationInfoField();
            else __result0 = global::LTSApi.CSecurityFtdcQryMarketRationInfoField.__CreateInstance(pQryMarketRationInfo);
            var __ret = __target.ReqQryMarketRationInfo(__result0, nRequestID);
            return __ret;
        }

        // int ReqQryInstrumentCommissionRate(CSecurityFtdcQryInstrumentCommissionRateField *pQryInstrumentCommissionRate, int nRequestID) = 0
        private static global::LTSApi.Delegates.Func_int_IntPtr_IntPtr_int _ReqQryInstrumentCommissionRate_0DelegateInstance;

        private static int _ReqQryInstrumentCommissionRate_0DelegateHook(global::System.IntPtr instance, global::System.IntPtr pQryInstrumentCommissionRate, int nRequestID)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::LTSApi.CSecurityFtdcQueryApi) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::LTSApi.CSecurityFtdcQryInstrumentCommissionRateField __result0;
            if (pQryInstrumentCommissionRate == IntPtr.Zero) __result0 = new global::LTSApi.CSecurityFtdcQryInstrumentCommissionRateField();
            else __result0 = global::LTSApi.CSecurityFtdcQryInstrumentCommissionRateField.__CreateInstance(pQryInstrumentCommissionRate);
            var __ret = __target.ReqQryInstrumentCommissionRate(__result0, nRequestID);
            return __ret;
        }

        // int ReqQryETFInstrument(CSecurityFtdcQryETFInstrumentField *pQryETFInstrument, int nRequestID) = 0
        private static global::LTSApi.Delegates.Func_int_IntPtr_IntPtr_int _ReqQryETFInstrument_0DelegateInstance;

        private static int _ReqQryETFInstrument_0DelegateHook(global::System.IntPtr instance, global::System.IntPtr pQryETFInstrument, int nRequestID)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::LTSApi.CSecurityFtdcQueryApi) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::LTSApi.CSecurityFtdcQryETFInstrumentField __result0;
            if (pQryETFInstrument == IntPtr.Zero) __result0 = new global::LTSApi.CSecurityFtdcQryETFInstrumentField();
            else __result0 = global::LTSApi.CSecurityFtdcQryETFInstrumentField.__CreateInstance(pQryETFInstrument);
            var __ret = __target.ReqQryETFInstrument(__result0, nRequestID);
            return __ret;
        }

        // int ReqQryETFBasket(CSecurityFtdcQryETFBasketField *pQryETFBasket, int nRequestID) = 0
        private static global::LTSApi.Delegates.Func_int_IntPtr_IntPtr_int _ReqQryETFBasket_0DelegateInstance;

        private static int _ReqQryETFBasket_0DelegateHook(global::System.IntPtr instance, global::System.IntPtr pQryETFBasket, int nRequestID)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::LTSApi.CSecurityFtdcQueryApi) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::LTSApi.CSecurityFtdcQryETFBasketField __result0;
            if (pQryETFBasket == IntPtr.Zero) __result0 = new global::LTSApi.CSecurityFtdcQryETFBasketField();
            else __result0 = global::LTSApi.CSecurityFtdcQryETFBasketField.__CreateInstance(pQryETFBasket);
            var __ret = __target.ReqQryETFBasket(__result0, nRequestID);
            return __ret;
        }

        // int ReqQryOFInstrument(CSecurityFtdcQryOFInstrumentField *pQryOFInstrument, int nRequestID) = 0
        private static global::LTSApi.Delegates.Func_int_IntPtr_IntPtr_int _ReqQryOFInstrument_0DelegateInstance;

        private static int _ReqQryOFInstrument_0DelegateHook(global::System.IntPtr instance, global::System.IntPtr pQryOFInstrument, int nRequestID)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::LTSApi.CSecurityFtdcQueryApi) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::LTSApi.CSecurityFtdcQryOFInstrumentField __result0;
            if (pQryOFInstrument == IntPtr.Zero) __result0 = new global::LTSApi.CSecurityFtdcQryOFInstrumentField();
            else __result0 = global::LTSApi.CSecurityFtdcQryOFInstrumentField.__CreateInstance(pQryOFInstrument);
            var __ret = __target.ReqQryOFInstrument(__result0, nRequestID);
            return __ret;
        }

        // int ReqQrySFInstrument(CSecurityFtdcQrySFInstrumentField *pQrySFInstrument, int nRequestID) = 0
        private static global::LTSApi.Delegates.Func_int_IntPtr_IntPtr_int _ReqQrySFInstrument_0DelegateInstance;

        private static int _ReqQrySFInstrument_0DelegateHook(global::System.IntPtr instance, global::System.IntPtr pQrySFInstrument, int nRequestID)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::LTSApi.CSecurityFtdcQueryApi) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::LTSApi.CSecurityFtdcQrySFInstrumentField __result0;
            if (pQrySFInstrument == IntPtr.Zero) __result0 = new global::LTSApi.CSecurityFtdcQrySFInstrumentField();
            else __result0 = global::LTSApi.CSecurityFtdcQrySFInstrumentField.__CreateInstance(pQrySFInstrument);
            var __ret = __target.ReqQrySFInstrument(__result0, nRequestID);
            return __ret;
        }

        // int ReqQryInstrumentUnitMargin(CSecurityFtdcQryInstrumentUnitMarginField *pQryInstrumentUnitMargin, int nRequestID) = 0
        private static global::LTSApi.Delegates.Func_int_IntPtr_IntPtr_int _ReqQryInstrumentUnitMargin_0DelegateInstance;

        private static int _ReqQryInstrumentUnitMargin_0DelegateHook(global::System.IntPtr instance, global::System.IntPtr pQryInstrumentUnitMargin, int nRequestID)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::LTSApi.CSecurityFtdcQueryApi) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::LTSApi.CSecurityFtdcQryInstrumentUnitMarginField __result0;
            if (pQryInstrumentUnitMargin == IntPtr.Zero) __result0 = new global::LTSApi.CSecurityFtdcQryInstrumentUnitMarginField();
            else __result0 = global::LTSApi.CSecurityFtdcQryInstrumentUnitMarginField.__CreateInstance(pQryInstrumentUnitMargin);
            var __ret = __target.ReqQryInstrumentUnitMargin(__result0, nRequestID);
            return __ret;
        }

        // int ReqQryPreDelivInfo(CSecurityFtdcQryPreDelivInfoField *pQryPreDelivInfo, int nRequestID) = 0
        private static global::LTSApi.Delegates.Func_int_IntPtr_IntPtr_int _ReqQryPreDelivInfo_0DelegateInstance;

        private static int _ReqQryPreDelivInfo_0DelegateHook(global::System.IntPtr instance, global::System.IntPtr pQryPreDelivInfo, int nRequestID)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::LTSApi.CSecurityFtdcQueryApi) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::LTSApi.CSecurityFtdcQryPreDelivInfoField __result0;
            if (pQryPreDelivInfo == IntPtr.Zero) __result0 = new global::LTSApi.CSecurityFtdcQryPreDelivInfoField();
            else __result0 = global::LTSApi.CSecurityFtdcQryPreDelivInfoField.__CreateInstance(pQryPreDelivInfo);
            var __ret = __target.ReqQryPreDelivInfo(__result0, nRequestID);
            return __ret;
        }

        // int ReqQryCreditStockAssignInfo(CSecurityFtdcQryCreditStockAssignInfoField *pQryCreditStockAssignInfo, int nRequestID) = 0
        private static global::LTSApi.Delegates.Func_int_IntPtr_IntPtr_int _ReqQryCreditStockAssignInfo_0DelegateInstance;

        private static int _ReqQryCreditStockAssignInfo_0DelegateHook(global::System.IntPtr instance, global::System.IntPtr pQryCreditStockAssignInfo, int nRequestID)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::LTSApi.CSecurityFtdcQueryApi) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::LTSApi.CSecurityFtdcQryCreditStockAssignInfoField __result0;
            if (pQryCreditStockAssignInfo == IntPtr.Zero) __result0 = new global::LTSApi.CSecurityFtdcQryCreditStockAssignInfoField();
            else __result0 = global::LTSApi.CSecurityFtdcQryCreditStockAssignInfoField.__CreateInstance(pQryCreditStockAssignInfo);
            var __ret = __target.ReqQryCreditStockAssignInfo(__result0, nRequestID);
            return __ret;
        }

        // int ReqQryCreditCashAssignInfo(CSecurityFtdcQryCreditCashAssignInfoField *pQryCreditCashAssignInfo, int nRequestID) = 0
        private static global::LTSApi.Delegates.Func_int_IntPtr_IntPtr_int _ReqQryCreditCashAssignInfo_0DelegateInstance;

        private static int _ReqQryCreditCashAssignInfo_0DelegateHook(global::System.IntPtr instance, global::System.IntPtr pQryCreditCashAssignInfo, int nRequestID)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::LTSApi.CSecurityFtdcQueryApi) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::LTSApi.CSecurityFtdcQryCreditCashAssignInfoField __result0;
            if (pQryCreditCashAssignInfo == IntPtr.Zero) __result0 = new global::LTSApi.CSecurityFtdcQryCreditCashAssignInfoField();
            else __result0 = global::LTSApi.CSecurityFtdcQryCreditCashAssignInfoField.__CreateInstance(pQryCreditCashAssignInfo);
            var __ret = __target.ReqQryCreditCashAssignInfo(__result0, nRequestID);
            return __ret;
        }

        // int ReqQryConversionRate(CSecurityFtdcQryConversionRateField *pQryConversionRate, int nRequestID) = 0
        private static global::LTSApi.Delegates.Func_int_IntPtr_IntPtr_int _ReqQryConversionRate_0DelegateInstance;

        private static int _ReqQryConversionRate_0DelegateHook(global::System.IntPtr instance, global::System.IntPtr pQryConversionRate, int nRequestID)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::LTSApi.CSecurityFtdcQueryApi) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::LTSApi.CSecurityFtdcQryConversionRateField __result0;
            if (pQryConversionRate == IntPtr.Zero) __result0 = new global::LTSApi.CSecurityFtdcQryConversionRateField();
            else __result0 = global::LTSApi.CSecurityFtdcQryConversionRateField.__CreateInstance(pQryConversionRate);
            var __ret = __target.ReqQryConversionRate(__result0, nRequestID);
            return __ret;
        }

        // int ReqQryHisCreditDebtInfo(CSecurityFtdcQryHisCreditDebtInfoField *pQryHisCreditDebtInfo, int nRequestID) = 0
        private static global::LTSApi.Delegates.Func_int_IntPtr_IntPtr_int _ReqQryHisCreditDebtInfo_0DelegateInstance;

        private static int _ReqQryHisCreditDebtInfo_0DelegateHook(global::System.IntPtr instance, global::System.IntPtr pQryHisCreditDebtInfo, int nRequestID)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::LTSApi.CSecurityFtdcQueryApi) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::LTSApi.CSecurityFtdcQryHisCreditDebtInfoField __result0;
            if (pQryHisCreditDebtInfo == IntPtr.Zero) __result0 = new global::LTSApi.CSecurityFtdcQryHisCreditDebtInfoField();
            else __result0 = global::LTSApi.CSecurityFtdcQryHisCreditDebtInfoField.__CreateInstance(pQryHisCreditDebtInfo);
            var __ret = __target.ReqQryHisCreditDebtInfo(__result0, nRequestID);
            return __ret;
        }

        // int ReqQryMarketDataStaticInfo(CSecurityFtdcQryMarketDataStaticInfoField *pQryMarketDataStaticInfo, int nRequestID) = 0
        private static global::LTSApi.Delegates.Func_int_IntPtr_IntPtr_int _ReqQryMarketDataStaticInfo_0DelegateInstance;

        private static int _ReqQryMarketDataStaticInfo_0DelegateHook(global::System.IntPtr instance, global::System.IntPtr pQryMarketDataStaticInfo, int nRequestID)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::LTSApi.CSecurityFtdcQueryApi) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::LTSApi.CSecurityFtdcQryMarketDataStaticInfoField __result0;
            if (pQryMarketDataStaticInfo == IntPtr.Zero) __result0 = new global::LTSApi.CSecurityFtdcQryMarketDataStaticInfoField();
            else __result0 = global::LTSApi.CSecurityFtdcQryMarketDataStaticInfoField.__CreateInstance(pQryMarketDataStaticInfo);
            var __ret = __target.ReqQryMarketDataStaticInfo(__result0, nRequestID);
            return __ret;
        }

        // int ReqQryExpireRepurchInfo(CSecurityFtdcQryExpireRepurchInfoField *pQryExpireRepurchInfo, int nRequestID) = 0
        private static global::LTSApi.Delegates.Func_int_IntPtr_IntPtr_int _ReqQryExpireRepurchInfo_0DelegateInstance;

        private static int _ReqQryExpireRepurchInfo_0DelegateHook(global::System.IntPtr instance, global::System.IntPtr pQryExpireRepurchInfo, int nRequestID)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::LTSApi.CSecurityFtdcQueryApi) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::LTSApi.CSecurityFtdcQryExpireRepurchInfoField __result0;
            if (pQryExpireRepurchInfo == IntPtr.Zero) __result0 = new global::LTSApi.CSecurityFtdcQryExpireRepurchInfoField();
            else __result0 = global::LTSApi.CSecurityFtdcQryExpireRepurchInfoField.__CreateInstance(pQryExpireRepurchInfo);
            var __ret = __target.ReqQryExpireRepurchInfo(__result0, nRequestID);
            return __ret;
        }

        // int ReqQryBondPledgeRate(CSecurityFtdcQryBondPledgeRateField *pQryBondPledgeRate, int nRequestID) = 0
        private static global::LTSApi.Delegates.Func_int_IntPtr_IntPtr_int _ReqQryBondPledgeRate_0DelegateInstance;

        private static int _ReqQryBondPledgeRate_0DelegateHook(global::System.IntPtr instance, global::System.IntPtr pQryBondPledgeRate, int nRequestID)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::LTSApi.CSecurityFtdcQueryApi) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::LTSApi.CSecurityFtdcQryBondPledgeRateField __result0;
            if (pQryBondPledgeRate == IntPtr.Zero) __result0 = new global::LTSApi.CSecurityFtdcQryBondPledgeRateField();
            else __result0 = global::LTSApi.CSecurityFtdcQryBondPledgeRateField.__CreateInstance(pQryBondPledgeRate);
            var __ret = __target.ReqQryBondPledgeRate(__result0, nRequestID);
            return __ret;
        }

        // int ReqQryPledgeBond(CSecurityFtdcQryPledgeBondField *pQryPledgeBond, int nRequestID) = 0
        private static global::LTSApi.Delegates.Func_int_IntPtr_IntPtr_int _ReqQryPledgeBond_0DelegateInstance;

        private static int _ReqQryPledgeBond_0DelegateHook(global::System.IntPtr instance, global::System.IntPtr pQryPledgeBond, int nRequestID)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::LTSApi.CSecurityFtdcQueryApi) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::LTSApi.CSecurityFtdcQryPledgeBondField __result0;
            if (pQryPledgeBond == IntPtr.Zero) __result0 = new global::LTSApi.CSecurityFtdcQryPledgeBondField();
            else __result0 = global::LTSApi.CSecurityFtdcQryPledgeBondField.__CreateInstance(pQryPledgeBond);
            var __ret = __target.ReqQryPledgeBond(__result0, nRequestID);
            return __ret;
        }

        // int ReqQryOrder(CSecurityFtdcQryOrderField *pQryOrder, int nRequestID) = 0
        private static global::LTSApi.Delegates.Func_int_IntPtr_IntPtr_int _ReqQryOrder_0DelegateInstance;

        private static int _ReqQryOrder_0DelegateHook(global::System.IntPtr instance, global::System.IntPtr pQryOrder, int nRequestID)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::LTSApi.CSecurityFtdcQueryApi) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::LTSApi.CSecurityFtdcQryOrderField __result0;
            if (pQryOrder == IntPtr.Zero) __result0 = new global::LTSApi.CSecurityFtdcQryOrderField();
            else __result0 = global::LTSApi.CSecurityFtdcQryOrderField.__CreateInstance(pQryOrder);
            var __ret = __target.ReqQryOrder(__result0, nRequestID);
            return __ret;
        }

        // int ReqQryTrade(CSecurityFtdcQryTradeField *pQryTrade, int nRequestID) = 0
        private static global::LTSApi.Delegates.Func_int_IntPtr_IntPtr_int _ReqQryTrade_0DelegateInstance;

        private static int _ReqQryTrade_0DelegateHook(global::System.IntPtr instance, global::System.IntPtr pQryTrade, int nRequestID)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::LTSApi.CSecurityFtdcQueryApi) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::LTSApi.CSecurityFtdcQryTradeField __result0;
            if (pQryTrade == IntPtr.Zero) __result0 = new global::LTSApi.CSecurityFtdcQryTradeField();
            else __result0 = global::LTSApi.CSecurityFtdcQryTradeField.__CreateInstance(pQryTrade);
            var __ret = __target.ReqQryTrade(__result0, nRequestID);
            return __ret;
        }

        // int ReqQryInvestorPosition(CSecurityFtdcQryInvestorPositionField *pQryInvestorPosition, int nRequestID) = 0
        private static global::LTSApi.Delegates.Func_int_IntPtr_IntPtr_int _ReqQryInvestorPosition_0DelegateInstance;

        private static int _ReqQryInvestorPosition_0DelegateHook(global::System.IntPtr instance, global::System.IntPtr pQryInvestorPosition, int nRequestID)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::LTSApi.CSecurityFtdcQueryApi) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::LTSApi.CSecurityFtdcQryInvestorPositionField __result0;
            if (pQryInvestorPosition == IntPtr.Zero) __result0 = new global::LTSApi.CSecurityFtdcQryInvestorPositionField();
            else __result0 = global::LTSApi.CSecurityFtdcQryInvestorPositionField.__CreateInstance(pQryInvestorPosition);
            var __ret = __target.ReqQryInvestorPosition(__result0, nRequestID);
            return __ret;
        }

        // int ReqQryFundTransferSerial(CSecurityFtdcQryFundTransferSerialField *pQryFundTransferSerial, int nRequestID) = 0
        private static global::LTSApi.Delegates.Func_int_IntPtr_IntPtr_int _ReqQryFundTransferSerial_0DelegateInstance;

        private static int _ReqQryFundTransferSerial_0DelegateHook(global::System.IntPtr instance, global::System.IntPtr pQryFundTransferSerial, int nRequestID)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::LTSApi.CSecurityFtdcQueryApi) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::LTSApi.CSecurityFtdcQryFundTransferSerialField __result0;
            if (pQryFundTransferSerial == IntPtr.Zero) __result0 = new global::LTSApi.CSecurityFtdcQryFundTransferSerialField();
            else __result0 = global::LTSApi.CSecurityFtdcQryFundTransferSerialField.__CreateInstance(pQryFundTransferSerial);
            var __ret = __target.ReqQryFundTransferSerial(__result0, nRequestID);
            return __ret;
        }

        // int ReqQryFundInterTransferSerial(CSecurityFtdcQryFundInterTransferSerialField *pQryFundInterTransferSerial, int nRequestID) = 0
        private static global::LTSApi.Delegates.Func_int_IntPtr_IntPtr_int _ReqQryFundInterTransferSerial_0DelegateInstance;

        private static int _ReqQryFundInterTransferSerial_0DelegateHook(global::System.IntPtr instance, global::System.IntPtr pQryFundInterTransferSerial, int nRequestID)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::LTSApi.CSecurityFtdcQueryApi) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::LTSApi.CSecurityFtdcQryFundInterTransferSerialField __result0;
            if (pQryFundInterTransferSerial == IntPtr.Zero) __result0 = new global::LTSApi.CSecurityFtdcQryFundInterTransferSerialField();
            else __result0 = global::LTSApi.CSecurityFtdcQryFundInterTransferSerialField.__CreateInstance(pQryFundInterTransferSerial);
            var __ret = __target.ReqQryFundInterTransferSerial(__result0, nRequestID);
            return __ret;
        }

        private static void*[] __ManagedVTables;
        private static void*[] _Thunks;

        private void SetupVTables(bool destructorOnly = false)
        {
            if (__OriginalVTables != null)
                return;
            __OriginalVTables = new void*[] { *(void**) (__Instance + 0) };

            if (destructorOnly)
                return;
            if (_Thunks == null)
            {
                _Thunks = new void*[36];
                _Release_0DelegateInstance += _Release_0DelegateHook;
                _Thunks[0] = Marshal.GetFunctionPointerForDelegate(_Release_0DelegateInstance).ToPointer();
                _Init_0DelegateInstance += _Init_0DelegateHook;
                _Thunks[1] = Marshal.GetFunctionPointerForDelegate(_Init_0DelegateInstance).ToPointer();
                _Join_0DelegateInstance += _Join_0DelegateHook;
                _Thunks[2] = Marshal.GetFunctionPointerForDelegate(_Join_0DelegateInstance).ToPointer();
                _GetTradingDay_0DelegateInstance += _GetTradingDay_0DelegateHook;
                _Thunks[3] = Marshal.GetFunctionPointerForDelegate(_GetTradingDay_0DelegateInstance).ToPointer();
                _RegisterFront_0DelegateInstance += _RegisterFront_0DelegateHook;
                _Thunks[4] = Marshal.GetFunctionPointerForDelegate(_RegisterFront_0DelegateInstance).ToPointer();
                _RegisterSpi_0DelegateInstance += _RegisterSpi_0DelegateHook;
                _Thunks[5] = Marshal.GetFunctionPointerForDelegate(_RegisterSpi_0DelegateInstance).ToPointer();
                _ReqUserLogin_0DelegateInstance += _ReqUserLogin_0DelegateHook;
                _Thunks[6] = Marshal.GetFunctionPointerForDelegate(_ReqUserLogin_0DelegateInstance).ToPointer();
                _ReqUserLogout_0DelegateInstance += _ReqUserLogout_0DelegateHook;
                _Thunks[7] = Marshal.GetFunctionPointerForDelegate(_ReqUserLogout_0DelegateInstance).ToPointer();
                _ReqFetchAuthRandCode_0DelegateInstance += _ReqFetchAuthRandCode_0DelegateHook;
                _Thunks[8] = Marshal.GetFunctionPointerForDelegate(_ReqFetchAuthRandCode_0DelegateInstance).ToPointer();
                _ReqQryExchange_0DelegateInstance += _ReqQryExchange_0DelegateHook;
                _Thunks[9] = Marshal.GetFunctionPointerForDelegate(_ReqQryExchange_0DelegateInstance).ToPointer();
                _ReqQryInstrument_0DelegateInstance += _ReqQryInstrument_0DelegateHook;
                _Thunks[10] = Marshal.GetFunctionPointerForDelegate(_ReqQryInstrument_0DelegateInstance).ToPointer();
                _ReqQryInvestor_0DelegateInstance += _ReqQryInvestor_0DelegateHook;
                _Thunks[11] = Marshal.GetFunctionPointerForDelegate(_ReqQryInvestor_0DelegateInstance).ToPointer();
                _ReqQryTradingCode_0DelegateInstance += _ReqQryTradingCode_0DelegateHook;
                _Thunks[12] = Marshal.GetFunctionPointerForDelegate(_ReqQryTradingCode_0DelegateInstance).ToPointer();
                _ReqQryTradingAccount_0DelegateInstance += _ReqQryTradingAccount_0DelegateHook;
                _Thunks[13] = Marshal.GetFunctionPointerForDelegate(_ReqQryTradingAccount_0DelegateInstance).ToPointer();
                _ReqQryBondInterest_0DelegateInstance += _ReqQryBondInterest_0DelegateHook;
                _Thunks[14] = Marshal.GetFunctionPointerForDelegate(_ReqQryBondInterest_0DelegateInstance).ToPointer();
                _ReqQryMarketRationInfo_0DelegateInstance += _ReqQryMarketRationInfo_0DelegateHook;
                _Thunks[15] = Marshal.GetFunctionPointerForDelegate(_ReqQryMarketRationInfo_0DelegateInstance).ToPointer();
                _ReqQryInstrumentCommissionRate_0DelegateInstance += _ReqQryInstrumentCommissionRate_0DelegateHook;
                _Thunks[16] = Marshal.GetFunctionPointerForDelegate(_ReqQryInstrumentCommissionRate_0DelegateInstance).ToPointer();
                _ReqQryETFInstrument_0DelegateInstance += _ReqQryETFInstrument_0DelegateHook;
                _Thunks[17] = Marshal.GetFunctionPointerForDelegate(_ReqQryETFInstrument_0DelegateInstance).ToPointer();
                _ReqQryETFBasket_0DelegateInstance += _ReqQryETFBasket_0DelegateHook;
                _Thunks[18] = Marshal.GetFunctionPointerForDelegate(_ReqQryETFBasket_0DelegateInstance).ToPointer();
                _ReqQryOFInstrument_0DelegateInstance += _ReqQryOFInstrument_0DelegateHook;
                _Thunks[19] = Marshal.GetFunctionPointerForDelegate(_ReqQryOFInstrument_0DelegateInstance).ToPointer();
                _ReqQrySFInstrument_0DelegateInstance += _ReqQrySFInstrument_0DelegateHook;
                _Thunks[20] = Marshal.GetFunctionPointerForDelegate(_ReqQrySFInstrument_0DelegateInstance).ToPointer();
                _ReqQryInstrumentUnitMargin_0DelegateInstance += _ReqQryInstrumentUnitMargin_0DelegateHook;
                _Thunks[21] = Marshal.GetFunctionPointerForDelegate(_ReqQryInstrumentUnitMargin_0DelegateInstance).ToPointer();
                _ReqQryPreDelivInfo_0DelegateInstance += _ReqQryPreDelivInfo_0DelegateHook;
                _Thunks[22] = Marshal.GetFunctionPointerForDelegate(_ReqQryPreDelivInfo_0DelegateInstance).ToPointer();
                _ReqQryCreditStockAssignInfo_0DelegateInstance += _ReqQryCreditStockAssignInfo_0DelegateHook;
                _Thunks[23] = Marshal.GetFunctionPointerForDelegate(_ReqQryCreditStockAssignInfo_0DelegateInstance).ToPointer();
                _ReqQryCreditCashAssignInfo_0DelegateInstance += _ReqQryCreditCashAssignInfo_0DelegateHook;
                _Thunks[24] = Marshal.GetFunctionPointerForDelegate(_ReqQryCreditCashAssignInfo_0DelegateInstance).ToPointer();
                _ReqQryConversionRate_0DelegateInstance += _ReqQryConversionRate_0DelegateHook;
                _Thunks[25] = Marshal.GetFunctionPointerForDelegate(_ReqQryConversionRate_0DelegateInstance).ToPointer();
                _ReqQryHisCreditDebtInfo_0DelegateInstance += _ReqQryHisCreditDebtInfo_0DelegateHook;
                _Thunks[26] = Marshal.GetFunctionPointerForDelegate(_ReqQryHisCreditDebtInfo_0DelegateInstance).ToPointer();
                _ReqQryMarketDataStaticInfo_0DelegateInstance += _ReqQryMarketDataStaticInfo_0DelegateHook;
                _Thunks[27] = Marshal.GetFunctionPointerForDelegate(_ReqQryMarketDataStaticInfo_0DelegateInstance).ToPointer();
                _ReqQryExpireRepurchInfo_0DelegateInstance += _ReqQryExpireRepurchInfo_0DelegateHook;
                _Thunks[28] = Marshal.GetFunctionPointerForDelegate(_ReqQryExpireRepurchInfo_0DelegateInstance).ToPointer();
                _ReqQryBondPledgeRate_0DelegateInstance += _ReqQryBondPledgeRate_0DelegateHook;
                _Thunks[29] = Marshal.GetFunctionPointerForDelegate(_ReqQryBondPledgeRate_0DelegateInstance).ToPointer();
                _ReqQryPledgeBond_0DelegateInstance += _ReqQryPledgeBond_0DelegateHook;
                _Thunks[30] = Marshal.GetFunctionPointerForDelegate(_ReqQryPledgeBond_0DelegateInstance).ToPointer();
                _ReqQryOrder_0DelegateInstance += _ReqQryOrder_0DelegateHook;
                _Thunks[31] = Marshal.GetFunctionPointerForDelegate(_ReqQryOrder_0DelegateInstance).ToPointer();
                _ReqQryTrade_0DelegateInstance += _ReqQryTrade_0DelegateHook;
                _Thunks[32] = Marshal.GetFunctionPointerForDelegate(_ReqQryTrade_0DelegateInstance).ToPointer();
                _ReqQryInvestorPosition_0DelegateInstance += _ReqQryInvestorPosition_0DelegateHook;
                _Thunks[33] = Marshal.GetFunctionPointerForDelegate(_ReqQryInvestorPosition_0DelegateInstance).ToPointer();
                _ReqQryFundTransferSerial_0DelegateInstance += _ReqQryFundTransferSerial_0DelegateHook;
                _Thunks[34] = Marshal.GetFunctionPointerForDelegate(_ReqQryFundTransferSerial_0DelegateInstance).ToPointer();
                _ReqQryFundInterTransferSerial_0DelegateInstance += _ReqQryFundInterTransferSerial_0DelegateHook;
                _Thunks[35] = Marshal.GetFunctionPointerForDelegate(_ReqQryFundInterTransferSerial_0DelegateInstance).ToPointer();
            }

            if (__ManagedVTables == null)
            {
                __ManagedVTables = new void*[1];
                var vfptr0 = Marshal.AllocHGlobal(36 * 4);
                __ManagedVTables[0] = vfptr0.ToPointer();
                *(void**) (vfptr0 + 0) = _Thunks[0];
                *(void**) (vfptr0 + 4) = _Thunks[1];
                *(void**) (vfptr0 + 8) = _Thunks[2];
                *(void**) (vfptr0 + 12) = _Thunks[3];
                *(void**) (vfptr0 + 16) = _Thunks[4];
                *(void**) (vfptr0 + 20) = _Thunks[5];
                *(void**) (vfptr0 + 24) = _Thunks[6];
                *(void**) (vfptr0 + 28) = _Thunks[7];
                *(void**) (vfptr0 + 32) = _Thunks[8];
                *(void**) (vfptr0 + 36) = _Thunks[9];
                *(void**) (vfptr0 + 40) = _Thunks[10];
                *(void**) (vfptr0 + 44) = _Thunks[11];
                *(void**) (vfptr0 + 48) = _Thunks[12];
                *(void**) (vfptr0 + 52) = _Thunks[13];
                *(void**) (vfptr0 + 56) = _Thunks[14];
                *(void**) (vfptr0 + 60) = _Thunks[15];
                *(void**) (vfptr0 + 64) = _Thunks[16];
                *(void**) (vfptr0 + 68) = _Thunks[17];
                *(void**) (vfptr0 + 72) = _Thunks[18];
                *(void**) (vfptr0 + 76) = _Thunks[19];
                *(void**) (vfptr0 + 80) = _Thunks[20];
                *(void**) (vfptr0 + 84) = _Thunks[21];
                *(void**) (vfptr0 + 88) = _Thunks[22];
                *(void**) (vfptr0 + 92) = _Thunks[23];
                *(void**) (vfptr0 + 96) = _Thunks[24];
                *(void**) (vfptr0 + 100) = _Thunks[25];
                *(void**) (vfptr0 + 104) = _Thunks[26];
                *(void**) (vfptr0 + 108) = _Thunks[27];
                *(void**) (vfptr0 + 112) = _Thunks[28];
                *(void**) (vfptr0 + 116) = _Thunks[29];
                *(void**) (vfptr0 + 120) = _Thunks[30];
                *(void**) (vfptr0 + 124) = _Thunks[31];
                *(void**) (vfptr0 + 128) = _Thunks[32];
                *(void**) (vfptr0 + 132) = _Thunks[33];
                *(void**) (vfptr0 + 136) = _Thunks[34];
                *(void**) (vfptr0 + 140) = _Thunks[35];
            }

            *(void**) (__Instance + 0) = __ManagedVTables[0];
        }

        #endregion
    }

    public unsafe partial class CSecurityFtdcQueryApiInternal : global::LTSApi.CSecurityFtdcQueryApi, IDisposable
    {
        private static void* __CopyValue(global::LTSApi.CSecurityFtdcQueryApi.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::LTSApi.CSecurityFtdcQueryApi.__Internal));
            *(global::LTSApi.CSecurityFtdcQueryApi.__Internal*) ret = native;
            return ret.ToPointer();
        }

        internal CSecurityFtdcQueryApiInternal(global::LTSApi.CSecurityFtdcQueryApi.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        internal CSecurityFtdcQueryApiInternal(void* native, bool skipVTables = false)
            : base((void*) null)
        {
            __PointerAdjustment = 0;
            __Instance = new global::System.IntPtr(native);
            __OriginalVTables = new void*[] { *(void**) (__Instance + 0) };
        }

        public override void Release()
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 0 * 4);
            var ___Release_0Delegate = (global::LTSApi.Delegates.Action_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::LTSApi.Delegates.Action_IntPtr));
            ___Release_0Delegate((__Instance + __PointerAdjustment));
        }

        public override void Init()
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 1 * 4);
            var ___Init_0Delegate = (global::LTSApi.Delegates.Action_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::LTSApi.Delegates.Action_IntPtr));
            ___Init_0Delegate((__Instance + __PointerAdjustment));
        }

        public override int Join()
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 2 * 4);
            var ___Join_0Delegate = (global::LTSApi.Delegates.Func_int_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::LTSApi.Delegates.Func_int_IntPtr));
            var __ret = ___Join_0Delegate((__Instance + __PointerAdjustment));
            return __ret;
        }

        public override void RegisterFront(sbyte* pszFrontAddress)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 4 * 4);
            var ___RegisterFront_0Delegate = (global::LTSApi.Delegates.Action_IntPtr_sbytePtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::LTSApi.Delegates.Action_IntPtr_sbytePtr));
            ___RegisterFront_0Delegate((__Instance + __PointerAdjustment), pszFrontAddress);
        }

        public override void RegisterSpi(global::LTSApi.CSecurityFtdcQuerySpi pSpi)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 5 * 4);
            var ___RegisterSpi_0Delegate = (global::LTSApi.Delegates.Action_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::LTSApi.Delegates.Action_IntPtr_IntPtr));
            var __arg0 = ReferenceEquals(pSpi, null) ? global::System.IntPtr.Zero : pSpi.__Instance;
            ___RegisterSpi_0Delegate((__Instance + __PointerAdjustment), __arg0);
        }

        public override int ReqUserLogin(global::LTSApi.CSecurityFtdcReqUserLoginField pReqUserLoginField, int nRequestID)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 6 * 4);
            var ___ReqUserLogin_0Delegate = (global::LTSApi.Delegates.Func_int_IntPtr_IntPtr_int) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::LTSApi.Delegates.Func_int_IntPtr_IntPtr_int));
            var ____arg0 = pReqUserLoginField.__Instance;
            var __arg0 = new global::System.IntPtr(&____arg0);
            var __ret = ___ReqUserLogin_0Delegate((__Instance + __PointerAdjustment), __arg0, nRequestID);
            return __ret;
        }

        public override int ReqUserLogout(global::LTSApi.CSecurityFtdcUserLogoutField pUserLogout, int nRequestID)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 7 * 4);
            var ___ReqUserLogout_0Delegate = (global::LTSApi.Delegates.Func_int_IntPtr_IntPtr_int) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::LTSApi.Delegates.Func_int_IntPtr_IntPtr_int));
            var ____arg0 = pUserLogout.__Instance;
            var __arg0 = new global::System.IntPtr(&____arg0);
            var __ret = ___ReqUserLogout_0Delegate((__Instance + __PointerAdjustment), __arg0, nRequestID);
            return __ret;
        }

        public override int ReqFetchAuthRandCode(global::LTSApi.CSecurityFtdcAuthRandCodeField pAuthRandCode, int nRequestID)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 8 * 4);
            var ___ReqFetchAuthRandCode_0Delegate = (global::LTSApi.Delegates.Func_int_IntPtr_IntPtr_int) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::LTSApi.Delegates.Func_int_IntPtr_IntPtr_int));
            var ____arg0 = pAuthRandCode.__Instance;
            var __arg0 = new global::System.IntPtr(&____arg0);
            var __ret = ___ReqFetchAuthRandCode_0Delegate((__Instance + __PointerAdjustment), __arg0, nRequestID);
            return __ret;
        }

        public override int ReqQryExchange(global::LTSApi.CSecurityFtdcQryExchangeField pQryExchange, int nRequestID)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 9 * 4);
            var ___ReqQryExchange_0Delegate = (global::LTSApi.Delegates.Func_int_IntPtr_IntPtr_int) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::LTSApi.Delegates.Func_int_IntPtr_IntPtr_int));
            var ____arg0 = pQryExchange.__Instance;
            var __arg0 = new global::System.IntPtr(&____arg0);
            var __ret = ___ReqQryExchange_0Delegate((__Instance + __PointerAdjustment), __arg0, nRequestID);
            return __ret;
        }

        public override int ReqQryInstrument(global::LTSApi.CSecurityFtdcQryInstrumentField pQryInstrument, int nRequestID)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 10 * 4);
            var ___ReqQryInstrument_0Delegate = (global::LTSApi.Delegates.Func_int_IntPtr_IntPtr_int) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::LTSApi.Delegates.Func_int_IntPtr_IntPtr_int));
            var ____arg0 = pQryInstrument.__Instance;
            var __arg0 = new global::System.IntPtr(&____arg0);
            var __ret = ___ReqQryInstrument_0Delegate((__Instance + __PointerAdjustment), __arg0, nRequestID);
            return __ret;
        }

        public override int ReqQryInvestor(global::LTSApi.CSecurityFtdcQryInvestorField pQryInvestor, int nRequestID)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 11 * 4);
            var ___ReqQryInvestor_0Delegate = (global::LTSApi.Delegates.Func_int_IntPtr_IntPtr_int) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::LTSApi.Delegates.Func_int_IntPtr_IntPtr_int));
            var ____arg0 = pQryInvestor.__Instance;
            var __arg0 = new global::System.IntPtr(&____arg0);
            var __ret = ___ReqQryInvestor_0Delegate((__Instance + __PointerAdjustment), __arg0, nRequestID);
            return __ret;
        }

        public override int ReqQryTradingCode(global::LTSApi.CSecurityFtdcQryTradingCodeField pQryTradingCode, int nRequestID)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 12 * 4);
            var ___ReqQryTradingCode_0Delegate = (global::LTSApi.Delegates.Func_int_IntPtr_IntPtr_int) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::LTSApi.Delegates.Func_int_IntPtr_IntPtr_int));
            var ____arg0 = pQryTradingCode.__Instance;
            var __arg0 = new global::System.IntPtr(&____arg0);
            var __ret = ___ReqQryTradingCode_0Delegate((__Instance + __PointerAdjustment), __arg0, nRequestID);
            return __ret;
        }

        public override int ReqQryTradingAccount(global::LTSApi.CSecurityFtdcQryTradingAccountField pQryTradingAccount, int nRequestID)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 13 * 4);
            var ___ReqQryTradingAccount_0Delegate = (global::LTSApi.Delegates.Func_int_IntPtr_IntPtr_int) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::LTSApi.Delegates.Func_int_IntPtr_IntPtr_int));
            var ____arg0 = pQryTradingAccount.__Instance;
            var __arg0 = new global::System.IntPtr(&____arg0);
            var __ret = ___ReqQryTradingAccount_0Delegate((__Instance + __PointerAdjustment), __arg0, nRequestID);
            return __ret;
        }

        public override int ReqQryBondInterest(global::LTSApi.CSecurityFtdcQryBondInterestField pQryBondInterest, int nRequestID)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 14 * 4);
            var ___ReqQryBondInterest_0Delegate = (global::LTSApi.Delegates.Func_int_IntPtr_IntPtr_int) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::LTSApi.Delegates.Func_int_IntPtr_IntPtr_int));
            var ____arg0 = pQryBondInterest.__Instance;
            var __arg0 = new global::System.IntPtr(&____arg0);
            var __ret = ___ReqQryBondInterest_0Delegate((__Instance + __PointerAdjustment), __arg0, nRequestID);
            return __ret;
        }

        public override int ReqQryMarketRationInfo(global::LTSApi.CSecurityFtdcQryMarketRationInfoField pQryMarketRationInfo, int nRequestID)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 15 * 4);
            var ___ReqQryMarketRationInfo_0Delegate = (global::LTSApi.Delegates.Func_int_IntPtr_IntPtr_int) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::LTSApi.Delegates.Func_int_IntPtr_IntPtr_int));
            var ____arg0 = pQryMarketRationInfo.__Instance;
            var __arg0 = new global::System.IntPtr(&____arg0);
            var __ret = ___ReqQryMarketRationInfo_0Delegate((__Instance + __PointerAdjustment), __arg0, nRequestID);
            return __ret;
        }

        public override int ReqQryInstrumentCommissionRate(global::LTSApi.CSecurityFtdcQryInstrumentCommissionRateField pQryInstrumentCommissionRate, int nRequestID)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 16 * 4);
            var ___ReqQryInstrumentCommissionRate_0Delegate = (global::LTSApi.Delegates.Func_int_IntPtr_IntPtr_int) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::LTSApi.Delegates.Func_int_IntPtr_IntPtr_int));
            var ____arg0 = pQryInstrumentCommissionRate.__Instance;
            var __arg0 = new global::System.IntPtr(&____arg0);
            var __ret = ___ReqQryInstrumentCommissionRate_0Delegate((__Instance + __PointerAdjustment), __arg0, nRequestID);
            return __ret;
        }

        public override int ReqQryETFInstrument(global::LTSApi.CSecurityFtdcQryETFInstrumentField pQryETFInstrument, int nRequestID)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 17 * 4);
            var ___ReqQryETFInstrument_0Delegate = (global::LTSApi.Delegates.Func_int_IntPtr_IntPtr_int) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::LTSApi.Delegates.Func_int_IntPtr_IntPtr_int));
            var ____arg0 = pQryETFInstrument.__Instance;
            var __arg0 = new global::System.IntPtr(&____arg0);
            var __ret = ___ReqQryETFInstrument_0Delegate((__Instance + __PointerAdjustment), __arg0, nRequestID);
            return __ret;
        }

        public override int ReqQryETFBasket(global::LTSApi.CSecurityFtdcQryETFBasketField pQryETFBasket, int nRequestID)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 18 * 4);
            var ___ReqQryETFBasket_0Delegate = (global::LTSApi.Delegates.Func_int_IntPtr_IntPtr_int) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::LTSApi.Delegates.Func_int_IntPtr_IntPtr_int));
            var ____arg0 = pQryETFBasket.__Instance;
            var __arg0 = new global::System.IntPtr(&____arg0);
            var __ret = ___ReqQryETFBasket_0Delegate((__Instance + __PointerAdjustment), __arg0, nRequestID);
            return __ret;
        }

        public override int ReqQryOFInstrument(global::LTSApi.CSecurityFtdcQryOFInstrumentField pQryOFInstrument, int nRequestID)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 19 * 4);
            var ___ReqQryOFInstrument_0Delegate = (global::LTSApi.Delegates.Func_int_IntPtr_IntPtr_int) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::LTSApi.Delegates.Func_int_IntPtr_IntPtr_int));
            var ____arg0 = pQryOFInstrument.__Instance;
            var __arg0 = new global::System.IntPtr(&____arg0);
            var __ret = ___ReqQryOFInstrument_0Delegate((__Instance + __PointerAdjustment), __arg0, nRequestID);
            return __ret;
        }

        public override int ReqQrySFInstrument(global::LTSApi.CSecurityFtdcQrySFInstrumentField pQrySFInstrument, int nRequestID)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 20 * 4);
            var ___ReqQrySFInstrument_0Delegate = (global::LTSApi.Delegates.Func_int_IntPtr_IntPtr_int) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::LTSApi.Delegates.Func_int_IntPtr_IntPtr_int));
            var ____arg0 = pQrySFInstrument.__Instance;
            var __arg0 = new global::System.IntPtr(&____arg0);
            var __ret = ___ReqQrySFInstrument_0Delegate((__Instance + __PointerAdjustment), __arg0, nRequestID);
            return __ret;
        }

        public override int ReqQryInstrumentUnitMargin(global::LTSApi.CSecurityFtdcQryInstrumentUnitMarginField pQryInstrumentUnitMargin, int nRequestID)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 21 * 4);
            var ___ReqQryInstrumentUnitMargin_0Delegate = (global::LTSApi.Delegates.Func_int_IntPtr_IntPtr_int) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::LTSApi.Delegates.Func_int_IntPtr_IntPtr_int));
            var ____arg0 = pQryInstrumentUnitMargin.__Instance;
            var __arg0 = new global::System.IntPtr(&____arg0);
            var __ret = ___ReqQryInstrumentUnitMargin_0Delegate((__Instance + __PointerAdjustment), __arg0, nRequestID);
            return __ret;
        }

        public override int ReqQryPreDelivInfo(global::LTSApi.CSecurityFtdcQryPreDelivInfoField pQryPreDelivInfo, int nRequestID)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 22 * 4);
            var ___ReqQryPreDelivInfo_0Delegate = (global::LTSApi.Delegates.Func_int_IntPtr_IntPtr_int) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::LTSApi.Delegates.Func_int_IntPtr_IntPtr_int));
            var ____arg0 = pQryPreDelivInfo.__Instance;
            var __arg0 = new global::System.IntPtr(&____arg0);
            var __ret = ___ReqQryPreDelivInfo_0Delegate((__Instance + __PointerAdjustment), __arg0, nRequestID);
            return __ret;
        }

        public override int ReqQryCreditStockAssignInfo(global::LTSApi.CSecurityFtdcQryCreditStockAssignInfoField pQryCreditStockAssignInfo, int nRequestID)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 23 * 4);
            var ___ReqQryCreditStockAssignInfo_0Delegate = (global::LTSApi.Delegates.Func_int_IntPtr_IntPtr_int) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::LTSApi.Delegates.Func_int_IntPtr_IntPtr_int));
            var ____arg0 = pQryCreditStockAssignInfo.__Instance;
            var __arg0 = new global::System.IntPtr(&____arg0);
            var __ret = ___ReqQryCreditStockAssignInfo_0Delegate((__Instance + __PointerAdjustment), __arg0, nRequestID);
            return __ret;
        }

        public override int ReqQryCreditCashAssignInfo(global::LTSApi.CSecurityFtdcQryCreditCashAssignInfoField pQryCreditCashAssignInfo, int nRequestID)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 24 * 4);
            var ___ReqQryCreditCashAssignInfo_0Delegate = (global::LTSApi.Delegates.Func_int_IntPtr_IntPtr_int) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::LTSApi.Delegates.Func_int_IntPtr_IntPtr_int));
            var ____arg0 = pQryCreditCashAssignInfo.__Instance;
            var __arg0 = new global::System.IntPtr(&____arg0);
            var __ret = ___ReqQryCreditCashAssignInfo_0Delegate((__Instance + __PointerAdjustment), __arg0, nRequestID);
            return __ret;
        }

        public override int ReqQryConversionRate(global::LTSApi.CSecurityFtdcQryConversionRateField pQryConversionRate, int nRequestID)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 25 * 4);
            var ___ReqQryConversionRate_0Delegate = (global::LTSApi.Delegates.Func_int_IntPtr_IntPtr_int) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::LTSApi.Delegates.Func_int_IntPtr_IntPtr_int));
            var ____arg0 = pQryConversionRate.__Instance;
            var __arg0 = new global::System.IntPtr(&____arg0);
            var __ret = ___ReqQryConversionRate_0Delegate((__Instance + __PointerAdjustment), __arg0, nRequestID);
            return __ret;
        }

        public override int ReqQryHisCreditDebtInfo(global::LTSApi.CSecurityFtdcQryHisCreditDebtInfoField pQryHisCreditDebtInfo, int nRequestID)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 26 * 4);
            var ___ReqQryHisCreditDebtInfo_0Delegate = (global::LTSApi.Delegates.Func_int_IntPtr_IntPtr_int) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::LTSApi.Delegates.Func_int_IntPtr_IntPtr_int));
            var ____arg0 = pQryHisCreditDebtInfo.__Instance;
            var __arg0 = new global::System.IntPtr(&____arg0);
            var __ret = ___ReqQryHisCreditDebtInfo_0Delegate((__Instance + __PointerAdjustment), __arg0, nRequestID);
            return __ret;
        }

        public override int ReqQryMarketDataStaticInfo(global::LTSApi.CSecurityFtdcQryMarketDataStaticInfoField pQryMarketDataStaticInfo, int nRequestID)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 27 * 4);
            var ___ReqQryMarketDataStaticInfo_0Delegate = (global::LTSApi.Delegates.Func_int_IntPtr_IntPtr_int) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::LTSApi.Delegates.Func_int_IntPtr_IntPtr_int));
            var ____arg0 = pQryMarketDataStaticInfo.__Instance;
            var __arg0 = new global::System.IntPtr(&____arg0);
            var __ret = ___ReqQryMarketDataStaticInfo_0Delegate((__Instance + __PointerAdjustment), __arg0, nRequestID);
            return __ret;
        }

        public override int ReqQryExpireRepurchInfo(global::LTSApi.CSecurityFtdcQryExpireRepurchInfoField pQryExpireRepurchInfo, int nRequestID)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 28 * 4);
            var ___ReqQryExpireRepurchInfo_0Delegate = (global::LTSApi.Delegates.Func_int_IntPtr_IntPtr_int) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::LTSApi.Delegates.Func_int_IntPtr_IntPtr_int));
            var ____arg0 = pQryExpireRepurchInfo.__Instance;
            var __arg0 = new global::System.IntPtr(&____arg0);
            var __ret = ___ReqQryExpireRepurchInfo_0Delegate((__Instance + __PointerAdjustment), __arg0, nRequestID);
            return __ret;
        }

        public override int ReqQryBondPledgeRate(global::LTSApi.CSecurityFtdcQryBondPledgeRateField pQryBondPledgeRate, int nRequestID)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 29 * 4);
            var ___ReqQryBondPledgeRate_0Delegate = (global::LTSApi.Delegates.Func_int_IntPtr_IntPtr_int) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::LTSApi.Delegates.Func_int_IntPtr_IntPtr_int));
            var ____arg0 = pQryBondPledgeRate.__Instance;
            var __arg0 = new global::System.IntPtr(&____arg0);
            var __ret = ___ReqQryBondPledgeRate_0Delegate((__Instance + __PointerAdjustment), __arg0, nRequestID);
            return __ret;
        }

        public override int ReqQryPledgeBond(global::LTSApi.CSecurityFtdcQryPledgeBondField pQryPledgeBond, int nRequestID)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 30 * 4);
            var ___ReqQryPledgeBond_0Delegate = (global::LTSApi.Delegates.Func_int_IntPtr_IntPtr_int) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::LTSApi.Delegates.Func_int_IntPtr_IntPtr_int));
            var ____arg0 = pQryPledgeBond.__Instance;
            var __arg0 = new global::System.IntPtr(&____arg0);
            var __ret = ___ReqQryPledgeBond_0Delegate((__Instance + __PointerAdjustment), __arg0, nRequestID);
            return __ret;
        }

        public override int ReqQryOrder(global::LTSApi.CSecurityFtdcQryOrderField pQryOrder, int nRequestID)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 31 * 4);
            var ___ReqQryOrder_0Delegate = (global::LTSApi.Delegates.Func_int_IntPtr_IntPtr_int) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::LTSApi.Delegates.Func_int_IntPtr_IntPtr_int));
            var ____arg0 = pQryOrder.__Instance;
            var __arg0 = new global::System.IntPtr(&____arg0);
            var __ret = ___ReqQryOrder_0Delegate((__Instance + __PointerAdjustment), __arg0, nRequestID);
            return __ret;
        }

        public override int ReqQryTrade(global::LTSApi.CSecurityFtdcQryTradeField pQryTrade, int nRequestID)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 32 * 4);
            var ___ReqQryTrade_0Delegate = (global::LTSApi.Delegates.Func_int_IntPtr_IntPtr_int) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::LTSApi.Delegates.Func_int_IntPtr_IntPtr_int));
            var ____arg0 = pQryTrade.__Instance;
            var __arg0 = new global::System.IntPtr(&____arg0);
            var __ret = ___ReqQryTrade_0Delegate((__Instance + __PointerAdjustment), __arg0, nRequestID);
            return __ret;
        }

        public override int ReqQryInvestorPosition(global::LTSApi.CSecurityFtdcQryInvestorPositionField pQryInvestorPosition, int nRequestID)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 33 * 4);
            var ___ReqQryInvestorPosition_0Delegate = (global::LTSApi.Delegates.Func_int_IntPtr_IntPtr_int) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::LTSApi.Delegates.Func_int_IntPtr_IntPtr_int));
            var ____arg0 = pQryInvestorPosition.__Instance;
            var __arg0 = new global::System.IntPtr(&____arg0);
            var __ret = ___ReqQryInvestorPosition_0Delegate((__Instance + __PointerAdjustment), __arg0, nRequestID);
            return __ret;
        }

        public override int ReqQryFundTransferSerial(global::LTSApi.CSecurityFtdcQryFundTransferSerialField pQryFundTransferSerial, int nRequestID)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 34 * 4);
            var ___ReqQryFundTransferSerial_0Delegate = (global::LTSApi.Delegates.Func_int_IntPtr_IntPtr_int) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::LTSApi.Delegates.Func_int_IntPtr_IntPtr_int));
            var ____arg0 = pQryFundTransferSerial.__Instance;
            var __arg0 = new global::System.IntPtr(&____arg0);
            var __ret = ___ReqQryFundTransferSerial_0Delegate((__Instance + __PointerAdjustment), __arg0, nRequestID);
            return __ret;
        }

        public override int ReqQryFundInterTransferSerial(global::LTSApi.CSecurityFtdcQryFundInterTransferSerialField pQryFundInterTransferSerial, int nRequestID)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 35 * 4);
            var ___ReqQryFundInterTransferSerial_0Delegate = (global::LTSApi.Delegates.Func_int_IntPtr_IntPtr_int) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::LTSApi.Delegates.Func_int_IntPtr_IntPtr_int));
            var ____arg0 = pQryFundInterTransferSerial.__Instance;
            var __arg0 = new global::System.IntPtr(&____arg0);
            var __ret = ___ReqQryFundInterTransferSerial_0Delegate((__Instance + __PointerAdjustment), __arg0, nRequestID);
            return __ret;
        }

        public override string TradingDay
        {
            get
            {
                var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 3 * 4);
                var ___GetTradingDay_0Delegate = (global::LTSApi.Delegates.Func_string_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::LTSApi.Delegates.Func_string_IntPtr));
                var __ret = ___GetTradingDay_0Delegate((__Instance + __PointerAdjustment));
                return Marshal.PtrToStringAnsi(__ret);
            }
        }
    }

    public unsafe partial class CSecurityFtdcTraderSpi : IDisposable
    {
        public partial struct __Internal
        {
            public global::System.IntPtr vfptr_CSecurityFtdcTraderSpi;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("securitymduserapi", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0CSecurityFtdcTraderSpi@@QAE@XZ")]
            internal static extern global::System.IntPtr ctor_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("securitymduserapi", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0CSecurityFtdcTraderSpi@@QAE@ABV0@@Z")]
            internal static extern global::System.IntPtr cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::LTSApi.CSecurityFtdcTraderSpi> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::LTSApi.CSecurityFtdcTraderSpi>();
        protected void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::LTSApi.CSecurityFtdcTraderSpi __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new CSecurityFtdcTraderSpi(native.ToPointer(), skipVTables);
        }

        internal static global::LTSApi.CSecurityFtdcTraderSpi __CreateInstance(global::LTSApi.CSecurityFtdcTraderSpi.__Internal native, bool skipVTables = false)
        {
            return new CSecurityFtdcTraderSpi(native, skipVTables);
        }

        private static void* __CopyValue(global::LTSApi.CSecurityFtdcTraderSpi.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::LTSApi.CSecurityFtdcTraderSpi.__Internal));
            global::LTSApi.CSecurityFtdcTraderSpi.__Internal.cctor_1(ret, new global::System.IntPtr(&native));
            return ret.ToPointer();
        }

        private CSecurityFtdcTraderSpi(global::LTSApi.CSecurityFtdcTraderSpi.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected CSecurityFtdcTraderSpi(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
            __OriginalVTables = new void*[] { *(void**) (__Instance + 0) };
        }

        public CSecurityFtdcTraderSpi()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::LTSApi.CSecurityFtdcTraderSpi.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            __Internal.ctor_0((__Instance + __PointerAdjustment));
            SetupVTables(GetType().FullName == "LTSApi.CSecurityFtdcTraderSpi");
        }

        public CSecurityFtdcTraderSpi(global::LTSApi.CSecurityFtdcTraderSpi _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::LTSApi.CSecurityFtdcTraderSpi.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(_0, null))
                throw new global::System.ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = _0.__Instance;
            __Internal.cctor_1((__Instance + __PointerAdjustment), __arg0);
            SetupVTables(GetType().FullName == "LTSApi.CSecurityFtdcTraderSpi");
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            global::LTSApi.CSecurityFtdcTraderSpi __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            ((global::LTSApi.CSecurityFtdcTraderSpi.__Internal*) __Instance)->vfptr_CSecurityFtdcTraderSpi = new global::System.IntPtr(__OriginalVTables[0]);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
        }

        public virtual void OnFrontConnected()
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 0 * 4);
            var ___OnFrontConnected_0Delegate = (global::LTSApi.Delegates.Action_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::LTSApi.Delegates.Action_IntPtr));
            ___OnFrontConnected_0Delegate((__Instance + __PointerAdjustment));
        }

        public virtual void OnFrontDisconnected(int nReason)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 1 * 4);
            var ___OnFrontDisconnected_0Delegate = (global::LTSApi.Delegates.Action_IntPtr_int) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::LTSApi.Delegates.Action_IntPtr_int));
            ___OnFrontDisconnected_0Delegate((__Instance + __PointerAdjustment), nReason);
        }

        public virtual void OnHeartBeatWarning(int nTimeLapse)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 2 * 4);
            var ___OnHeartBeatWarning_0Delegate = (global::LTSApi.Delegates.Action_IntPtr_int) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::LTSApi.Delegates.Action_IntPtr_int));
            ___OnHeartBeatWarning_0Delegate((__Instance + __PointerAdjustment), nTimeLapse);
        }

        public virtual void OnRspError(global::LTSApi.CSecurityFtdcRspInfoField pRspInfo, int nRequestID, bool bIsLast)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 3 * 4);
            var ___OnRspError_0Delegate = (global::LTSApi.Delegates.Action_IntPtr_IntPtr_int_bool) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::LTSApi.Delegates.Action_IntPtr_IntPtr_int_bool));
            var ____arg0 = pRspInfo.__Instance;
            var __arg0 = new global::System.IntPtr(&____arg0);
            ___OnRspError_0Delegate((__Instance + __PointerAdjustment), __arg0, nRequestID, bIsLast);
        }

        public virtual void OnRspUserLogin(global::LTSApi.CSecurityFtdcRspUserLoginField pRspUserLogin, global::LTSApi.CSecurityFtdcRspInfoField pRspInfo, int nRequestID, bool bIsLast)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 4 * 4);
            var ___OnRspUserLogin_0Delegate = (global::LTSApi.Delegates.Action_IntPtr_IntPtr_IntPtr_int_bool) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::LTSApi.Delegates.Action_IntPtr_IntPtr_IntPtr_int_bool));
            var ____arg0 = pRspUserLogin.__Instance;
            var __arg0 = new global::System.IntPtr(&____arg0);
            var ____arg1 = pRspInfo.__Instance;
            var __arg1 = new global::System.IntPtr(&____arg1);
            ___OnRspUserLogin_0Delegate((__Instance + __PointerAdjustment), __arg0, __arg1, nRequestID, bIsLast);
        }

        public virtual void OnRspUserLogout(global::LTSApi.CSecurityFtdcUserLogoutField pUserLogout, global::LTSApi.CSecurityFtdcRspInfoField pRspInfo, int nRequestID, bool bIsLast)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 5 * 4);
            var ___OnRspUserLogout_0Delegate = (global::LTSApi.Delegates.Action_IntPtr_IntPtr_IntPtr_int_bool) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::LTSApi.Delegates.Action_IntPtr_IntPtr_IntPtr_int_bool));
            var ____arg0 = pUserLogout.__Instance;
            var __arg0 = new global::System.IntPtr(&____arg0);
            var ____arg1 = pRspInfo.__Instance;
            var __arg1 = new global::System.IntPtr(&____arg1);
            ___OnRspUserLogout_0Delegate((__Instance + __PointerAdjustment), __arg0, __arg1, nRequestID, bIsLast);
        }

        public virtual void OnRspFetchAuthRandCode(global::LTSApi.CSecurityFtdcAuthRandCodeField pAuthRandCode, global::LTSApi.CSecurityFtdcRspInfoField pRspInfo, int nRequestID, bool bIsLast)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 6 * 4);
            var ___OnRspFetchAuthRandCode_0Delegate = (global::LTSApi.Delegates.Action_IntPtr_IntPtr_IntPtr_int_bool) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::LTSApi.Delegates.Action_IntPtr_IntPtr_IntPtr_int_bool));
            var ____arg0 = pAuthRandCode.__Instance;
            var __arg0 = new global::System.IntPtr(&____arg0);
            var ____arg1 = pRspInfo.__Instance;
            var __arg1 = new global::System.IntPtr(&____arg1);
            ___OnRspFetchAuthRandCode_0Delegate((__Instance + __PointerAdjustment), __arg0, __arg1, nRequestID, bIsLast);
        }

        public virtual void OnRspOrderInsert(global::LTSApi.CSecurityFtdcInputOrderField pInputOrder, global::LTSApi.CSecurityFtdcRspInfoField pRspInfo, int nRequestID, bool bIsLast)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 7 * 4);
            var ___OnRspOrderInsert_0Delegate = (global::LTSApi.Delegates.Action_IntPtr_IntPtr_IntPtr_int_bool) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::LTSApi.Delegates.Action_IntPtr_IntPtr_IntPtr_int_bool));
            var ____arg0 = pInputOrder.__Instance;
            var __arg0 = new global::System.IntPtr(&____arg0);
            var ____arg1 = pRspInfo.__Instance;
            var __arg1 = new global::System.IntPtr(&____arg1);
            ___OnRspOrderInsert_0Delegate((__Instance + __PointerAdjustment), __arg0, __arg1, nRequestID, bIsLast);
        }

        public virtual void OnRspOrderAction(global::LTSApi.CSecurityFtdcInputOrderActionField pInputOrderAction, global::LTSApi.CSecurityFtdcRspInfoField pRspInfo, int nRequestID, bool bIsLast)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 8 * 4);
            var ___OnRspOrderAction_0Delegate = (global::LTSApi.Delegates.Action_IntPtr_IntPtr_IntPtr_int_bool) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::LTSApi.Delegates.Action_IntPtr_IntPtr_IntPtr_int_bool));
            var ____arg0 = pInputOrderAction.__Instance;
            var __arg0 = new global::System.IntPtr(&____arg0);
            var ____arg1 = pRspInfo.__Instance;
            var __arg1 = new global::System.IntPtr(&____arg1);
            ___OnRspOrderAction_0Delegate((__Instance + __PointerAdjustment), __arg0, __arg1, nRequestID, bIsLast);
        }

        public virtual void OnRspUserPasswordUpdate(global::LTSApi.CSecurityFtdcUserPasswordUpdateField pUserPasswordUpdate, global::LTSApi.CSecurityFtdcRspInfoField pRspInfo, int nRequestID, bool bIsLast)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 9 * 4);
            var ___OnRspUserPasswordUpdate_0Delegate = (global::LTSApi.Delegates.Action_IntPtr_IntPtr_IntPtr_int_bool) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::LTSApi.Delegates.Action_IntPtr_IntPtr_IntPtr_int_bool));
            var ____arg0 = pUserPasswordUpdate.__Instance;
            var __arg0 = new global::System.IntPtr(&____arg0);
            var ____arg1 = pRspInfo.__Instance;
            var __arg1 = new global::System.IntPtr(&____arg1);
            ___OnRspUserPasswordUpdate_0Delegate((__Instance + __PointerAdjustment), __arg0, __arg1, nRequestID, bIsLast);
        }

        public virtual void OnRspTradingAccountPasswordUpdate(global::LTSApi.CSecurityFtdcTradingAccountPasswordUpdateField pTradingAccountPasswordUpdate, global::LTSApi.CSecurityFtdcRspInfoField pRspInfo, int nRequestID, bool bIsLast)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 10 * 4);
            var ___OnRspTradingAccountPasswordUpdate_0Delegate = (global::LTSApi.Delegates.Action_IntPtr_IntPtr_IntPtr_int_bool) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::LTSApi.Delegates.Action_IntPtr_IntPtr_IntPtr_int_bool));
            var ____arg0 = pTradingAccountPasswordUpdate.__Instance;
            var __arg0 = new global::System.IntPtr(&____arg0);
            var ____arg1 = pRspInfo.__Instance;
            var __arg1 = new global::System.IntPtr(&____arg1);
            ___OnRspTradingAccountPasswordUpdate_0Delegate((__Instance + __PointerAdjustment), __arg0, __arg1, nRequestID, bIsLast);
        }

        public virtual void OnRtnOrder(global::LTSApi.CSecurityFtdcOrderField pOrder)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 11 * 4);
            var ___OnRtnOrder_0Delegate = (global::LTSApi.Delegates.Action_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::LTSApi.Delegates.Action_IntPtr_IntPtr));
            var ____arg0 = pOrder.__Instance;
            var __arg0 = new global::System.IntPtr(&____arg0);
            ___OnRtnOrder_0Delegate((__Instance + __PointerAdjustment), __arg0);
        }

        public virtual void OnRtnTrade(global::LTSApi.CSecurityFtdcTradeField pTrade)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 12 * 4);
            var ___OnRtnTrade_0Delegate = (global::LTSApi.Delegates.Action_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::LTSApi.Delegates.Action_IntPtr_IntPtr));
            var ____arg0 = pTrade.__Instance;
            var __arg0 = new global::System.IntPtr(&____arg0);
            ___OnRtnTrade_0Delegate((__Instance + __PointerAdjustment), __arg0);
        }

        public virtual void OnErrRtnOrderInsert(global::LTSApi.CSecurityFtdcInputOrderField pInputOrder, global::LTSApi.CSecurityFtdcRspInfoField pRspInfo)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 13 * 4);
            var ___OnErrRtnOrderInsert_0Delegate = (global::LTSApi.Delegates.Action_IntPtr_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::LTSApi.Delegates.Action_IntPtr_IntPtr_IntPtr));
            var ____arg0 = pInputOrder.__Instance;
            var __arg0 = new global::System.IntPtr(&____arg0);
            var ____arg1 = pRspInfo.__Instance;
            var __arg1 = new global::System.IntPtr(&____arg1);
            ___OnErrRtnOrderInsert_0Delegate((__Instance + __PointerAdjustment), __arg0, __arg1);
        }

        public virtual void OnErrRtnOrderAction(global::LTSApi.CSecurityFtdcOrderActionField pOrderAction, global::LTSApi.CSecurityFtdcRspInfoField pRspInfo)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 14 * 4);
            var ___OnErrRtnOrderAction_0Delegate = (global::LTSApi.Delegates.Action_IntPtr_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::LTSApi.Delegates.Action_IntPtr_IntPtr_IntPtr));
            var ____arg0 = pOrderAction.__Instance;
            var __arg0 = new global::System.IntPtr(&____arg0);
            var ____arg1 = pRspInfo.__Instance;
            var __arg1 = new global::System.IntPtr(&____arg1);
            ___OnErrRtnOrderAction_0Delegate((__Instance + __PointerAdjustment), __arg0, __arg1);
        }

        public virtual void OnRspFundOutByLiber(global::LTSApi.CSecurityFtdcInputFundTransferField pInputFundTransfer, global::LTSApi.CSecurityFtdcRspInfoField pRspInfo, int nRequestID, bool bIsLast)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 15 * 4);
            var ___OnRspFundOutByLiber_0Delegate = (global::LTSApi.Delegates.Action_IntPtr_IntPtr_IntPtr_int_bool) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::LTSApi.Delegates.Action_IntPtr_IntPtr_IntPtr_int_bool));
            var ____arg0 = pInputFundTransfer.__Instance;
            var __arg0 = new global::System.IntPtr(&____arg0);
            var ____arg1 = pRspInfo.__Instance;
            var __arg1 = new global::System.IntPtr(&____arg1);
            ___OnRspFundOutByLiber_0Delegate((__Instance + __PointerAdjustment), __arg0, __arg1, nRequestID, bIsLast);
        }

        public virtual void OnRtnFundOutByLiber(global::LTSApi.CSecurityFtdcFundTransferField pFundTransfer)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 16 * 4);
            var ___OnRtnFundOutByLiber_0Delegate = (global::LTSApi.Delegates.Action_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::LTSApi.Delegates.Action_IntPtr_IntPtr));
            var ____arg0 = pFundTransfer.__Instance;
            var __arg0 = new global::System.IntPtr(&____arg0);
            ___OnRtnFundOutByLiber_0Delegate((__Instance + __PointerAdjustment), __arg0);
        }

        public virtual void OnErrRtnFundOutByLiber(global::LTSApi.CSecurityFtdcInputFundTransferField pInputFundTransfer, global::LTSApi.CSecurityFtdcRspInfoField pRspInfo)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 17 * 4);
            var ___OnErrRtnFundOutByLiber_0Delegate = (global::LTSApi.Delegates.Action_IntPtr_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::LTSApi.Delegates.Action_IntPtr_IntPtr_IntPtr));
            var ____arg0 = pInputFundTransfer.__Instance;
            var __arg0 = new global::System.IntPtr(&____arg0);
            var ____arg1 = pRspInfo.__Instance;
            var __arg1 = new global::System.IntPtr(&____arg1);
            ___OnErrRtnFundOutByLiber_0Delegate((__Instance + __PointerAdjustment), __arg0, __arg1);
        }

        public virtual void OnRtnFundInByBank(global::LTSApi.CSecurityFtdcFundTransferField pFundTransfer)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 18 * 4);
            var ___OnRtnFundInByBank_0Delegate = (global::LTSApi.Delegates.Action_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::LTSApi.Delegates.Action_IntPtr_IntPtr));
            var ____arg0 = pFundTransfer.__Instance;
            var __arg0 = new global::System.IntPtr(&____arg0);
            ___OnRtnFundInByBank_0Delegate((__Instance + __PointerAdjustment), __arg0);
        }

        public virtual void OnRspFundInterTransfer(global::LTSApi.CSecurityFtdcFundInterTransferField pFundInterTransfer, global::LTSApi.CSecurityFtdcRspInfoField pRspInfo, int nRequestID, bool bIsLast)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 19 * 4);
            var ___OnRspFundInterTransfer_0Delegate = (global::LTSApi.Delegates.Action_IntPtr_IntPtr_IntPtr_int_bool) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::LTSApi.Delegates.Action_IntPtr_IntPtr_IntPtr_int_bool));
            var ____arg0 = pFundInterTransfer.__Instance;
            var __arg0 = new global::System.IntPtr(&____arg0);
            var ____arg1 = pRspInfo.__Instance;
            var __arg1 = new global::System.IntPtr(&____arg1);
            ___OnRspFundInterTransfer_0Delegate((__Instance + __PointerAdjustment), __arg0, __arg1, nRequestID, bIsLast);
        }

        public virtual void OnRtnFundInterTransferSerial(global::LTSApi.CSecurityFtdcFundInterTransferSerialField pFundInterTransferSerial)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 20 * 4);
            var ___OnRtnFundInterTransferSerial_0Delegate = (global::LTSApi.Delegates.Action_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::LTSApi.Delegates.Action_IntPtr_IntPtr));
            var ____arg0 = pFundInterTransferSerial.__Instance;
            var __arg0 = new global::System.IntPtr(&____arg0);
            ___OnRtnFundInterTransferSerial_0Delegate((__Instance + __PointerAdjustment), __arg0);
        }

        public virtual void OnErrRtnFundInterTransfer(global::LTSApi.CSecurityFtdcFundInterTransferField pFundInterTransfer, global::LTSApi.CSecurityFtdcRspInfoField pRspInfo)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 21 * 4);
            var ___OnErrRtnFundInterTransfer_0Delegate = (global::LTSApi.Delegates.Action_IntPtr_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::LTSApi.Delegates.Action_IntPtr_IntPtr_IntPtr));
            var ____arg0 = pFundInterTransfer.__Instance;
            var __arg0 = new global::System.IntPtr(&____arg0);
            var ____arg1 = pRspInfo.__Instance;
            var __arg1 = new global::System.IntPtr(&____arg1);
            ___OnErrRtnFundInterTransfer_0Delegate((__Instance + __PointerAdjustment), __arg0, __arg1);
        }

        #region Virtual table interop

        // void OnFrontConnected(){}
        private static global::LTSApi.Delegates.Action_IntPtr _OnFrontConnected_0DelegateInstance;

        private static void _OnFrontConnected_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::LTSApi.CSecurityFtdcTraderSpi) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.OnFrontConnected();
        }

        // void OnFrontDisconnected(int nReason){}
        private static global::LTSApi.Delegates.Action_IntPtr_int _OnFrontDisconnected_0DelegateInstance;

        private static void _OnFrontDisconnected_0DelegateHook(global::System.IntPtr instance, int nReason)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::LTSApi.CSecurityFtdcTraderSpi) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.OnFrontDisconnected(nReason);
        }

        // void OnHeartBeatWarning(int nTimeLapse){}
        private static global::LTSApi.Delegates.Action_IntPtr_int _OnHeartBeatWarning_0DelegateInstance;

        private static void _OnHeartBeatWarning_0DelegateHook(global::System.IntPtr instance, int nTimeLapse)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::LTSApi.CSecurityFtdcTraderSpi) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.OnHeartBeatWarning(nTimeLapse);
        }

        // void OnRspError(CSecurityFtdcRspInfoField *pRspInfo, int nRequestID, bool bIsLast) {}
        private static global::LTSApi.Delegates.Action_IntPtr_IntPtr_int_bool _OnRspError_0DelegateInstance;

        private static void _OnRspError_0DelegateHook(global::System.IntPtr instance, global::System.IntPtr pRspInfo, int nRequestID, bool bIsLast)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::LTSApi.CSecurityFtdcTraderSpi) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::LTSApi.CSecurityFtdcRspInfoField __result0;
            if (pRspInfo == IntPtr.Zero) __result0 = new global::LTSApi.CSecurityFtdcRspInfoField();
            else __result0 = global::LTSApi.CSecurityFtdcRspInfoField.__CreateInstance(pRspInfo);
            __target.OnRspError(__result0, nRequestID, bIsLast);
        }

        // void OnRspUserLogin(CSecurityFtdcRspUserLoginField *pRspUserLogin, CSecurityFtdcRspInfoField *pRspInfo, int nRequestID, bool bIsLast) {}
        private static global::LTSApi.Delegates.Action_IntPtr_IntPtr_IntPtr_int_bool _OnRspUserLogin_0DelegateInstance;

        private static void _OnRspUserLogin_0DelegateHook(global::System.IntPtr instance, global::System.IntPtr pRspUserLogin, global::System.IntPtr pRspInfo, int nRequestID, bool bIsLast)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::LTSApi.CSecurityFtdcTraderSpi) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::LTSApi.CSecurityFtdcRspUserLoginField __result0;
            if (pRspUserLogin == IntPtr.Zero) __result0 = new global::LTSApi.CSecurityFtdcRspUserLoginField();
            else __result0 = global::LTSApi.CSecurityFtdcRspUserLoginField.__CreateInstance(pRspUserLogin);
            global::LTSApi.CSecurityFtdcRspInfoField __result1;
            if (pRspInfo == IntPtr.Zero) __result1 = new global::LTSApi.CSecurityFtdcRspInfoField();
            else __result1 = global::LTSApi.CSecurityFtdcRspInfoField.__CreateInstance(pRspInfo);
            __target.OnRspUserLogin(__result0, __result1, nRequestID, bIsLast);
        }

        // void OnRspUserLogout(CSecurityFtdcUserLogoutField *pUserLogout, CSecurityFtdcRspInfoField *pRspInfo, int nRequestID, bool bIsLast) {}
        private static global::LTSApi.Delegates.Action_IntPtr_IntPtr_IntPtr_int_bool _OnRspUserLogout_0DelegateInstance;

        private static void _OnRspUserLogout_0DelegateHook(global::System.IntPtr instance, global::System.IntPtr pUserLogout, global::System.IntPtr pRspInfo, int nRequestID, bool bIsLast)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::LTSApi.CSecurityFtdcTraderSpi) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::LTSApi.CSecurityFtdcUserLogoutField __result0;
            if (pUserLogout == IntPtr.Zero) __result0 = new global::LTSApi.CSecurityFtdcUserLogoutField();
            else __result0 = global::LTSApi.CSecurityFtdcUserLogoutField.__CreateInstance(pUserLogout);
            global::LTSApi.CSecurityFtdcRspInfoField __result1;
            if (pRspInfo == IntPtr.Zero) __result1 = new global::LTSApi.CSecurityFtdcRspInfoField();
            else __result1 = global::LTSApi.CSecurityFtdcRspInfoField.__CreateInstance(pRspInfo);
            __target.OnRspUserLogout(__result0, __result1, nRequestID, bIsLast);
        }

        // void OnRspFetchAuthRandCode(CSecurityFtdcAuthRandCodeField *pAuthRandCode, CSecurityFtdcRspInfoField *pRspInfo, int nRequestID, bool bIsLast) {}
        private static global::LTSApi.Delegates.Action_IntPtr_IntPtr_IntPtr_int_bool _OnRspFetchAuthRandCode_0DelegateInstance;

        private static void _OnRspFetchAuthRandCode_0DelegateHook(global::System.IntPtr instance, global::System.IntPtr pAuthRandCode, global::System.IntPtr pRspInfo, int nRequestID, bool bIsLast)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::LTSApi.CSecurityFtdcTraderSpi) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::LTSApi.CSecurityFtdcAuthRandCodeField __result0;
            if (pAuthRandCode == IntPtr.Zero) __result0 = new global::LTSApi.CSecurityFtdcAuthRandCodeField();
            else __result0 = global::LTSApi.CSecurityFtdcAuthRandCodeField.__CreateInstance(pAuthRandCode);
            global::LTSApi.CSecurityFtdcRspInfoField __result1;
            if (pRspInfo == IntPtr.Zero) __result1 = new global::LTSApi.CSecurityFtdcRspInfoField();
            else __result1 = global::LTSApi.CSecurityFtdcRspInfoField.__CreateInstance(pRspInfo);
            __target.OnRspFetchAuthRandCode(__result0, __result1, nRequestID, bIsLast);
        }

        // void OnRspOrderInsert(CSecurityFtdcInputOrderField *pInputOrder, CSecurityFtdcRspInfoField *pRspInfo, int nRequestID, bool bIsLast) {}
        private static global::LTSApi.Delegates.Action_IntPtr_IntPtr_IntPtr_int_bool _OnRspOrderInsert_0DelegateInstance;

        private static void _OnRspOrderInsert_0DelegateHook(global::System.IntPtr instance, global::System.IntPtr pInputOrder, global::System.IntPtr pRspInfo, int nRequestID, bool bIsLast)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::LTSApi.CSecurityFtdcTraderSpi) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::LTSApi.CSecurityFtdcInputOrderField __result0;
            if (pInputOrder == IntPtr.Zero) __result0 = new global::LTSApi.CSecurityFtdcInputOrderField();
            else __result0 = global::LTSApi.CSecurityFtdcInputOrderField.__CreateInstance(pInputOrder);
            global::LTSApi.CSecurityFtdcRspInfoField __result1;
            if (pRspInfo == IntPtr.Zero) __result1 = new global::LTSApi.CSecurityFtdcRspInfoField();
            else __result1 = global::LTSApi.CSecurityFtdcRspInfoField.__CreateInstance(pRspInfo);
            __target.OnRspOrderInsert(__result0, __result1, nRequestID, bIsLast);
        }

        // void OnRspOrderAction(CSecurityFtdcInputOrderActionField *pInputOrderAction, CSecurityFtdcRspInfoField *pRspInfo, int nRequestID, bool bIsLast) {}
        private static global::LTSApi.Delegates.Action_IntPtr_IntPtr_IntPtr_int_bool _OnRspOrderAction_0DelegateInstance;

        private static void _OnRspOrderAction_0DelegateHook(global::System.IntPtr instance, global::System.IntPtr pInputOrderAction, global::System.IntPtr pRspInfo, int nRequestID, bool bIsLast)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::LTSApi.CSecurityFtdcTraderSpi) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::LTSApi.CSecurityFtdcInputOrderActionField __result0;
            if (pInputOrderAction == IntPtr.Zero) __result0 = new global::LTSApi.CSecurityFtdcInputOrderActionField();
            else __result0 = global::LTSApi.CSecurityFtdcInputOrderActionField.__CreateInstance(pInputOrderAction);
            global::LTSApi.CSecurityFtdcRspInfoField __result1;
            if (pRspInfo == IntPtr.Zero) __result1 = new global::LTSApi.CSecurityFtdcRspInfoField();
            else __result1 = global::LTSApi.CSecurityFtdcRspInfoField.__CreateInstance(pRspInfo);
            __target.OnRspOrderAction(__result0, __result1, nRequestID, bIsLast);
        }

        // void OnRspUserPasswordUpdate(CSecurityFtdcUserPasswordUpdateField *pUserPasswordUpdate, CSecurityFtdcRspInfoField *pRspInfo, int nRequestID, bool bIsLast) {}
        private static global::LTSApi.Delegates.Action_IntPtr_IntPtr_IntPtr_int_bool _OnRspUserPasswordUpdate_0DelegateInstance;

        private static void _OnRspUserPasswordUpdate_0DelegateHook(global::System.IntPtr instance, global::System.IntPtr pUserPasswordUpdate, global::System.IntPtr pRspInfo, int nRequestID, bool bIsLast)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::LTSApi.CSecurityFtdcTraderSpi) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::LTSApi.CSecurityFtdcUserPasswordUpdateField __result0;
            if (pUserPasswordUpdate == IntPtr.Zero) __result0 = new global::LTSApi.CSecurityFtdcUserPasswordUpdateField();
            else __result0 = global::LTSApi.CSecurityFtdcUserPasswordUpdateField.__CreateInstance(pUserPasswordUpdate);
            global::LTSApi.CSecurityFtdcRspInfoField __result1;
            if (pRspInfo == IntPtr.Zero) __result1 = new global::LTSApi.CSecurityFtdcRspInfoField();
            else __result1 = global::LTSApi.CSecurityFtdcRspInfoField.__CreateInstance(pRspInfo);
            __target.OnRspUserPasswordUpdate(__result0, __result1, nRequestID, bIsLast);
        }

        // void OnRspTradingAccountPasswordUpdate(CSecurityFtdcTradingAccountPasswordUpdateField *pTradingAccountPasswordUpdate, CSecurityFtdcRspInfoField *pRspInfo, int nRequestID, bool bIsLast) {}
        private static global::LTSApi.Delegates.Action_IntPtr_IntPtr_IntPtr_int_bool _OnRspTradingAccountPasswordUpdate_0DelegateInstance;

        private static void _OnRspTradingAccountPasswordUpdate_0DelegateHook(global::System.IntPtr instance, global::System.IntPtr pTradingAccountPasswordUpdate, global::System.IntPtr pRspInfo, int nRequestID, bool bIsLast)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::LTSApi.CSecurityFtdcTraderSpi) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::LTSApi.CSecurityFtdcTradingAccountPasswordUpdateField __result0;
            if (pTradingAccountPasswordUpdate == IntPtr.Zero) __result0 = new global::LTSApi.CSecurityFtdcTradingAccountPasswordUpdateField();
            else __result0 = global::LTSApi.CSecurityFtdcTradingAccountPasswordUpdateField.__CreateInstance(pTradingAccountPasswordUpdate);
            global::LTSApi.CSecurityFtdcRspInfoField __result1;
            if (pRspInfo == IntPtr.Zero) __result1 = new global::LTSApi.CSecurityFtdcRspInfoField();
            else __result1 = global::LTSApi.CSecurityFtdcRspInfoField.__CreateInstance(pRspInfo);
            __target.OnRspTradingAccountPasswordUpdate(__result0, __result1, nRequestID, bIsLast);
        }

        // void OnRtnOrder(CSecurityFtdcOrderField *pOrder) {}
        private static global::LTSApi.Delegates.Action_IntPtr_IntPtr _OnRtnOrder_0DelegateInstance;

        private static void _OnRtnOrder_0DelegateHook(global::System.IntPtr instance, global::System.IntPtr pOrder)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::LTSApi.CSecurityFtdcTraderSpi) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::LTSApi.CSecurityFtdcOrderField __result0;
            if (pOrder == IntPtr.Zero) __result0 = new global::LTSApi.CSecurityFtdcOrderField();
            else __result0 = global::LTSApi.CSecurityFtdcOrderField.__CreateInstance(pOrder);
            __target.OnRtnOrder(__result0);
        }

        // void OnRtnTrade(CSecurityFtdcTradeField *pTrade) {}
        private static global::LTSApi.Delegates.Action_IntPtr_IntPtr _OnRtnTrade_0DelegateInstance;

        private static void _OnRtnTrade_0DelegateHook(global::System.IntPtr instance, global::System.IntPtr pTrade)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::LTSApi.CSecurityFtdcTraderSpi) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::LTSApi.CSecurityFtdcTradeField __result0;
            if (pTrade == IntPtr.Zero) __result0 = new global::LTSApi.CSecurityFtdcTradeField();
            else __result0 = global::LTSApi.CSecurityFtdcTradeField.__CreateInstance(pTrade);
            __target.OnRtnTrade(__result0);
        }

        // void OnErrRtnOrderInsert(CSecurityFtdcInputOrderField *pInputOrder, CSecurityFtdcRspInfoField *pRspInfo) {}
        private static global::LTSApi.Delegates.Action_IntPtr_IntPtr_IntPtr _OnErrRtnOrderInsert_0DelegateInstance;

        private static void _OnErrRtnOrderInsert_0DelegateHook(global::System.IntPtr instance, global::System.IntPtr pInputOrder, global::System.IntPtr pRspInfo)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::LTSApi.CSecurityFtdcTraderSpi) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::LTSApi.CSecurityFtdcInputOrderField __result0;
            if (pInputOrder == IntPtr.Zero) __result0 = new global::LTSApi.CSecurityFtdcInputOrderField();
            else __result0 = global::LTSApi.CSecurityFtdcInputOrderField.__CreateInstance(pInputOrder);
            global::LTSApi.CSecurityFtdcRspInfoField __result1;
            if (pRspInfo == IntPtr.Zero) __result1 = new global::LTSApi.CSecurityFtdcRspInfoField();
            else __result1 = global::LTSApi.CSecurityFtdcRspInfoField.__CreateInstance(pRspInfo);
            __target.OnErrRtnOrderInsert(__result0, __result1);
        }

        // void OnErrRtnOrderAction(CSecurityFtdcOrderActionField *pOrderAction, CSecurityFtdcRspInfoField *pRspInfo) {}
        private static global::LTSApi.Delegates.Action_IntPtr_IntPtr_IntPtr _OnErrRtnOrderAction_0DelegateInstance;

        private static void _OnErrRtnOrderAction_0DelegateHook(global::System.IntPtr instance, global::System.IntPtr pOrderAction, global::System.IntPtr pRspInfo)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::LTSApi.CSecurityFtdcTraderSpi) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::LTSApi.CSecurityFtdcOrderActionField __result0;
            if (pOrderAction == IntPtr.Zero) __result0 = new global::LTSApi.CSecurityFtdcOrderActionField();
            else __result0 = global::LTSApi.CSecurityFtdcOrderActionField.__CreateInstance(pOrderAction);
            global::LTSApi.CSecurityFtdcRspInfoField __result1;
            if (pRspInfo == IntPtr.Zero) __result1 = new global::LTSApi.CSecurityFtdcRspInfoField();
            else __result1 = global::LTSApi.CSecurityFtdcRspInfoField.__CreateInstance(pRspInfo);
            __target.OnErrRtnOrderAction(__result0, __result1);
        }

        // void OnRspFundOutByLiber(CSecurityFtdcInputFundTransferField *pInputFundTransfer, CSecurityFtdcRspInfoField *pRspInfo, int nRequestID, bool bIsLast) {}
        private static global::LTSApi.Delegates.Action_IntPtr_IntPtr_IntPtr_int_bool _OnRspFundOutByLiber_0DelegateInstance;

        private static void _OnRspFundOutByLiber_0DelegateHook(global::System.IntPtr instance, global::System.IntPtr pInputFundTransfer, global::System.IntPtr pRspInfo, int nRequestID, bool bIsLast)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::LTSApi.CSecurityFtdcTraderSpi) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::LTSApi.CSecurityFtdcInputFundTransferField __result0;
            if (pInputFundTransfer == IntPtr.Zero) __result0 = new global::LTSApi.CSecurityFtdcInputFundTransferField();
            else __result0 = global::LTSApi.CSecurityFtdcInputFundTransferField.__CreateInstance(pInputFundTransfer);
            global::LTSApi.CSecurityFtdcRspInfoField __result1;
            if (pRspInfo == IntPtr.Zero) __result1 = new global::LTSApi.CSecurityFtdcRspInfoField();
            else __result1 = global::LTSApi.CSecurityFtdcRspInfoField.__CreateInstance(pRspInfo);
            __target.OnRspFundOutByLiber(__result0, __result1, nRequestID, bIsLast);
        }

        // void OnRtnFundOutByLiber(CSecurityFtdcFundTransferField *pFundTransfer) {}
        private static global::LTSApi.Delegates.Action_IntPtr_IntPtr _OnRtnFundOutByLiber_0DelegateInstance;

        private static void _OnRtnFundOutByLiber_0DelegateHook(global::System.IntPtr instance, global::System.IntPtr pFundTransfer)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::LTSApi.CSecurityFtdcTraderSpi) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::LTSApi.CSecurityFtdcFundTransferField __result0;
            if (pFundTransfer == IntPtr.Zero) __result0 = new global::LTSApi.CSecurityFtdcFundTransferField();
            else __result0 = global::LTSApi.CSecurityFtdcFundTransferField.__CreateInstance(pFundTransfer);
            __target.OnRtnFundOutByLiber(__result0);
        }

        // void OnErrRtnFundOutByLiber(CSecurityFtdcInputFundTransferField *pInputFundTransfer, CSecurityFtdcRspInfoField *pRspInfo) {}
        private static global::LTSApi.Delegates.Action_IntPtr_IntPtr_IntPtr _OnErrRtnFundOutByLiber_0DelegateInstance;

        private static void _OnErrRtnFundOutByLiber_0DelegateHook(global::System.IntPtr instance, global::System.IntPtr pInputFundTransfer, global::System.IntPtr pRspInfo)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::LTSApi.CSecurityFtdcTraderSpi) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::LTSApi.CSecurityFtdcInputFundTransferField __result0;
            if (pInputFundTransfer == IntPtr.Zero) __result0 = new global::LTSApi.CSecurityFtdcInputFundTransferField();
            else __result0 = global::LTSApi.CSecurityFtdcInputFundTransferField.__CreateInstance(pInputFundTransfer);
            global::LTSApi.CSecurityFtdcRspInfoField __result1;
            if (pRspInfo == IntPtr.Zero) __result1 = new global::LTSApi.CSecurityFtdcRspInfoField();
            else __result1 = global::LTSApi.CSecurityFtdcRspInfoField.__CreateInstance(pRspInfo);
            __target.OnErrRtnFundOutByLiber(__result0, __result1);
        }

        // void OnRtnFundInByBank(CSecurityFtdcFundTransferField *pFundTransfer) {}
        private static global::LTSApi.Delegates.Action_IntPtr_IntPtr _OnRtnFundInByBank_0DelegateInstance;

        private static void _OnRtnFundInByBank_0DelegateHook(global::System.IntPtr instance, global::System.IntPtr pFundTransfer)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::LTSApi.CSecurityFtdcTraderSpi) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::LTSApi.CSecurityFtdcFundTransferField __result0;
            if (pFundTransfer == IntPtr.Zero) __result0 = new global::LTSApi.CSecurityFtdcFundTransferField();
            else __result0 = global::LTSApi.CSecurityFtdcFundTransferField.__CreateInstance(pFundTransfer);
            __target.OnRtnFundInByBank(__result0);
        }

        // void OnRspFundInterTransfer(CSecurityFtdcFundInterTransferField *pFundInterTransfer, CSecurityFtdcRspInfoField *pRspInfo, int nRequestID, bool bIsLast) {}
        private static global::LTSApi.Delegates.Action_IntPtr_IntPtr_IntPtr_int_bool _OnRspFundInterTransfer_0DelegateInstance;

        private static void _OnRspFundInterTransfer_0DelegateHook(global::System.IntPtr instance, global::System.IntPtr pFundInterTransfer, global::System.IntPtr pRspInfo, int nRequestID, bool bIsLast)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::LTSApi.CSecurityFtdcTraderSpi) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::LTSApi.CSecurityFtdcFundInterTransferField __result0;
            if (pFundInterTransfer == IntPtr.Zero) __result0 = new global::LTSApi.CSecurityFtdcFundInterTransferField();
            else __result0 = global::LTSApi.CSecurityFtdcFundInterTransferField.__CreateInstance(pFundInterTransfer);
            global::LTSApi.CSecurityFtdcRspInfoField __result1;
            if (pRspInfo == IntPtr.Zero) __result1 = new global::LTSApi.CSecurityFtdcRspInfoField();
            else __result1 = global::LTSApi.CSecurityFtdcRspInfoField.__CreateInstance(pRspInfo);
            __target.OnRspFundInterTransfer(__result0, __result1, nRequestID, bIsLast);
        }

        // void OnRtnFundInterTransferSerial(CSecurityFtdcFundInterTransferSerialField *pFundInterTransferSerial) {}
        private static global::LTSApi.Delegates.Action_IntPtr_IntPtr _OnRtnFundInterTransferSerial_0DelegateInstance;

        private static void _OnRtnFundInterTransferSerial_0DelegateHook(global::System.IntPtr instance, global::System.IntPtr pFundInterTransferSerial)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::LTSApi.CSecurityFtdcTraderSpi) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::LTSApi.CSecurityFtdcFundInterTransferSerialField __result0;
            if (pFundInterTransferSerial == IntPtr.Zero) __result0 = new global::LTSApi.CSecurityFtdcFundInterTransferSerialField();
            else __result0 = global::LTSApi.CSecurityFtdcFundInterTransferSerialField.__CreateInstance(pFundInterTransferSerial);
            __target.OnRtnFundInterTransferSerial(__result0);
        }

        // void OnErrRtnFundInterTransfer(CSecurityFtdcFundInterTransferField *pFundInterTransfer, CSecurityFtdcRspInfoField *pRspInfo) {}
        private static global::LTSApi.Delegates.Action_IntPtr_IntPtr_IntPtr _OnErrRtnFundInterTransfer_0DelegateInstance;

        private static void _OnErrRtnFundInterTransfer_0DelegateHook(global::System.IntPtr instance, global::System.IntPtr pFundInterTransfer, global::System.IntPtr pRspInfo)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::LTSApi.CSecurityFtdcTraderSpi) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::LTSApi.CSecurityFtdcFundInterTransferField __result0;
            if (pFundInterTransfer == IntPtr.Zero) __result0 = new global::LTSApi.CSecurityFtdcFundInterTransferField();
            else __result0 = global::LTSApi.CSecurityFtdcFundInterTransferField.__CreateInstance(pFundInterTransfer);
            global::LTSApi.CSecurityFtdcRspInfoField __result1;
            if (pRspInfo == IntPtr.Zero) __result1 = new global::LTSApi.CSecurityFtdcRspInfoField();
            else __result1 = global::LTSApi.CSecurityFtdcRspInfoField.__CreateInstance(pRspInfo);
            __target.OnErrRtnFundInterTransfer(__result0, __result1);
        }

        private static void*[] __ManagedVTables;
        private static void*[] _Thunks;

        private void SetupVTables(bool destructorOnly = false)
        {
            if (__OriginalVTables != null)
                return;
            __OriginalVTables = new void*[] { *(void**) (__Instance + 0) };

            if (destructorOnly)
                return;
            if (_Thunks == null)
            {
                _Thunks = new void*[22];
                _OnFrontConnected_0DelegateInstance += _OnFrontConnected_0DelegateHook;
                _Thunks[0] = Marshal.GetFunctionPointerForDelegate(_OnFrontConnected_0DelegateInstance).ToPointer();
                _OnFrontDisconnected_0DelegateInstance += _OnFrontDisconnected_0DelegateHook;
                _Thunks[1] = Marshal.GetFunctionPointerForDelegate(_OnFrontDisconnected_0DelegateInstance).ToPointer();
                _OnHeartBeatWarning_0DelegateInstance += _OnHeartBeatWarning_0DelegateHook;
                _Thunks[2] = Marshal.GetFunctionPointerForDelegate(_OnHeartBeatWarning_0DelegateInstance).ToPointer();
                _OnRspError_0DelegateInstance += _OnRspError_0DelegateHook;
                _Thunks[3] = Marshal.GetFunctionPointerForDelegate(_OnRspError_0DelegateInstance).ToPointer();
                _OnRspUserLogin_0DelegateInstance += _OnRspUserLogin_0DelegateHook;
                _Thunks[4] = Marshal.GetFunctionPointerForDelegate(_OnRspUserLogin_0DelegateInstance).ToPointer();
                _OnRspUserLogout_0DelegateInstance += _OnRspUserLogout_0DelegateHook;
                _Thunks[5] = Marshal.GetFunctionPointerForDelegate(_OnRspUserLogout_0DelegateInstance).ToPointer();
                _OnRspFetchAuthRandCode_0DelegateInstance += _OnRspFetchAuthRandCode_0DelegateHook;
                _Thunks[6] = Marshal.GetFunctionPointerForDelegate(_OnRspFetchAuthRandCode_0DelegateInstance).ToPointer();
                _OnRspOrderInsert_0DelegateInstance += _OnRspOrderInsert_0DelegateHook;
                _Thunks[7] = Marshal.GetFunctionPointerForDelegate(_OnRspOrderInsert_0DelegateInstance).ToPointer();
                _OnRspOrderAction_0DelegateInstance += _OnRspOrderAction_0DelegateHook;
                _Thunks[8] = Marshal.GetFunctionPointerForDelegate(_OnRspOrderAction_0DelegateInstance).ToPointer();
                _OnRspUserPasswordUpdate_0DelegateInstance += _OnRspUserPasswordUpdate_0DelegateHook;
                _Thunks[9] = Marshal.GetFunctionPointerForDelegate(_OnRspUserPasswordUpdate_0DelegateInstance).ToPointer();
                _OnRspTradingAccountPasswordUpdate_0DelegateInstance += _OnRspTradingAccountPasswordUpdate_0DelegateHook;
                _Thunks[10] = Marshal.GetFunctionPointerForDelegate(_OnRspTradingAccountPasswordUpdate_0DelegateInstance).ToPointer();
                _OnRtnOrder_0DelegateInstance += _OnRtnOrder_0DelegateHook;
                _Thunks[11] = Marshal.GetFunctionPointerForDelegate(_OnRtnOrder_0DelegateInstance).ToPointer();
                _OnRtnTrade_0DelegateInstance += _OnRtnTrade_0DelegateHook;
                _Thunks[12] = Marshal.GetFunctionPointerForDelegate(_OnRtnTrade_0DelegateInstance).ToPointer();
                _OnErrRtnOrderInsert_0DelegateInstance += _OnErrRtnOrderInsert_0DelegateHook;
                _Thunks[13] = Marshal.GetFunctionPointerForDelegate(_OnErrRtnOrderInsert_0DelegateInstance).ToPointer();
                _OnErrRtnOrderAction_0DelegateInstance += _OnErrRtnOrderAction_0DelegateHook;
                _Thunks[14] = Marshal.GetFunctionPointerForDelegate(_OnErrRtnOrderAction_0DelegateInstance).ToPointer();
                _OnRspFundOutByLiber_0DelegateInstance += _OnRspFundOutByLiber_0DelegateHook;
                _Thunks[15] = Marshal.GetFunctionPointerForDelegate(_OnRspFundOutByLiber_0DelegateInstance).ToPointer();
                _OnRtnFundOutByLiber_0DelegateInstance += _OnRtnFundOutByLiber_0DelegateHook;
                _Thunks[16] = Marshal.GetFunctionPointerForDelegate(_OnRtnFundOutByLiber_0DelegateInstance).ToPointer();
                _OnErrRtnFundOutByLiber_0DelegateInstance += _OnErrRtnFundOutByLiber_0DelegateHook;
                _Thunks[17] = Marshal.GetFunctionPointerForDelegate(_OnErrRtnFundOutByLiber_0DelegateInstance).ToPointer();
                _OnRtnFundInByBank_0DelegateInstance += _OnRtnFundInByBank_0DelegateHook;
                _Thunks[18] = Marshal.GetFunctionPointerForDelegate(_OnRtnFundInByBank_0DelegateInstance).ToPointer();
                _OnRspFundInterTransfer_0DelegateInstance += _OnRspFundInterTransfer_0DelegateHook;
                _Thunks[19] = Marshal.GetFunctionPointerForDelegate(_OnRspFundInterTransfer_0DelegateInstance).ToPointer();
                _OnRtnFundInterTransferSerial_0DelegateInstance += _OnRtnFundInterTransferSerial_0DelegateHook;
                _Thunks[20] = Marshal.GetFunctionPointerForDelegate(_OnRtnFundInterTransferSerial_0DelegateInstance).ToPointer();
                _OnErrRtnFundInterTransfer_0DelegateInstance += _OnErrRtnFundInterTransfer_0DelegateHook;
                _Thunks[21] = Marshal.GetFunctionPointerForDelegate(_OnErrRtnFundInterTransfer_0DelegateInstance).ToPointer();
            }

            if (__ManagedVTables == null)
            {
                __ManagedVTables = new void*[1];
                var vfptr0 = Marshal.AllocHGlobal(22 * 4);
                __ManagedVTables[0] = vfptr0.ToPointer();
                *(void**) (vfptr0 + 0) = _Thunks[0];
                *(void**) (vfptr0 + 4) = _Thunks[1];
                *(void**) (vfptr0 + 8) = _Thunks[2];
                *(void**) (vfptr0 + 12) = _Thunks[3];
                *(void**) (vfptr0 + 16) = _Thunks[4];
                *(void**) (vfptr0 + 20) = _Thunks[5];
                *(void**) (vfptr0 + 24) = _Thunks[6];
                *(void**) (vfptr0 + 28) = _Thunks[7];
                *(void**) (vfptr0 + 32) = _Thunks[8];
                *(void**) (vfptr0 + 36) = _Thunks[9];
                *(void**) (vfptr0 + 40) = _Thunks[10];
                *(void**) (vfptr0 + 44) = _Thunks[11];
                *(void**) (vfptr0 + 48) = _Thunks[12];
                *(void**) (vfptr0 + 52) = _Thunks[13];
                *(void**) (vfptr0 + 56) = _Thunks[14];
                *(void**) (vfptr0 + 60) = _Thunks[15];
                *(void**) (vfptr0 + 64) = _Thunks[16];
                *(void**) (vfptr0 + 68) = _Thunks[17];
                *(void**) (vfptr0 + 72) = _Thunks[18];
                *(void**) (vfptr0 + 76) = _Thunks[19];
                *(void**) (vfptr0 + 80) = _Thunks[20];
                *(void**) (vfptr0 + 84) = _Thunks[21];
            }

            *(void**) (__Instance + 0) = __ManagedVTables[0];
        }

        #endregion
    }

    public unsafe abstract partial class CSecurityFtdcTraderApi : IDisposable
    {
        public partial struct __Internal
        {
            public global::System.IntPtr vfptr_CSecurityFtdcTraderApi;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("securitymduserapi", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0CSecurityFtdcTraderApi@@QAE@XZ")]
            internal static extern global::System.IntPtr ctor_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("securitymduserapi", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0CSecurityFtdcTraderApi@@QAE@ABV0@@Z")]
            internal static extern global::System.IntPtr cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("securitymduserapi", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??1CSecurityFtdcTraderApi@@IAE@XZ")]
            internal static extern void dtor_0(global::System.IntPtr instance, int delete);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("securitymduserapi", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?CreateFtdcTraderApi@CSecurityFtdcTraderApi@@SAPAV1@PBD@Z")]
            internal static extern global::System.IntPtr CreateFtdcTraderApi_0([MarshalAs(UnmanagedType.LPStr)] string pszFlowPath);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::LTSApi.CSecurityFtdcTraderApi> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::LTSApi.CSecurityFtdcTraderApi>();
        protected void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::LTSApi.CSecurityFtdcTraderApi __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new CSecurityFtdcTraderApiInternal(native.ToPointer(), skipVTables);
        }

        internal static global::LTSApi.CSecurityFtdcTraderApi __CreateInstance(global::LTSApi.CSecurityFtdcTraderApi.__Internal native, bool skipVTables = false)
        {
            return new CSecurityFtdcTraderApiInternal(native, skipVTables);
        }

        protected CSecurityFtdcTraderApi(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
            __OriginalVTables = new void*[] { *(void**) (__Instance + 0) };
        }

        protected CSecurityFtdcTraderApi()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::LTSApi.CSecurityFtdcTraderApi.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            __Internal.ctor_0((__Instance + __PointerAdjustment));
            SetupVTables(GetType().FullName == "LTSApi.CSecurityFtdcTraderApi");
        }

        protected CSecurityFtdcTraderApi(global::LTSApi.CSecurityFtdcTraderApi _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::LTSApi.CSecurityFtdcTraderApi.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(_0, null))
                throw new global::System.ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = _0.__Instance;
            __Internal.cctor_1((__Instance + __PointerAdjustment), __arg0);
            SetupVTables(GetType().FullName == "LTSApi.CSecurityFtdcTraderApi");
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            global::LTSApi.CSecurityFtdcTraderApi __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            ((global::LTSApi.CSecurityFtdcTraderApi.__Internal*) __Instance)->vfptr_CSecurityFtdcTraderApi = new global::System.IntPtr(__OriginalVTables[0]);
            if (disposing)
                __Internal.dtor_0((__Instance + __PointerAdjustment), 0);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
        }

        public abstract void Release();

        public abstract void Init();

        public abstract int Join();

        public abstract void RegisterFront(sbyte* pszFrontAddress);

        public abstract void RegisterSpi(global::LTSApi.CSecurityFtdcTraderSpi pSpi);

        public abstract void SubscribePrivateTopic(global::LTSApi.SECURITY_TE_RESUME_TYPE nResumeType);

        public abstract void SubscribePublicTopic(global::LTSApi.SECURITY_TE_RESUME_TYPE nResumeType);

        public abstract int ReqUserLogin(global::LTSApi.CSecurityFtdcReqUserLoginField pReqUserLoginField, int nRequestID);

        public abstract int ReqUserLogout(global::LTSApi.CSecurityFtdcUserLogoutField pUserLogout, int nRequestID);

        public abstract int ReqFetchAuthRandCode(global::LTSApi.CSecurityFtdcAuthRandCodeField pAuthRandCode, int nRequestID);

        public abstract int ReqOrderInsert(global::LTSApi.CSecurityFtdcInputOrderField pInputOrder, int nRequestID);

        public abstract int ReqOrderAction(global::LTSApi.CSecurityFtdcInputOrderActionField pInputOrderAction, int nRequestID);

        public abstract int ReqUserPasswordUpdate(global::LTSApi.CSecurityFtdcUserPasswordUpdateField pUserPasswordUpdate, int nRequestID);

        public abstract int ReqTradingAccountPasswordUpdate(global::LTSApi.CSecurityFtdcTradingAccountPasswordUpdateField pTradingAccountPasswordUpdate, int nRequestID);

        public abstract int ReqFundOutByLiber(global::LTSApi.CSecurityFtdcInputFundTransferField pInputFundTransfer, int nRequestID);

        public abstract int ReqFundInterTransfer(global::LTSApi.CSecurityFtdcFundInterTransferField pFundInterTransfer, int nRequestID);

        public static global::LTSApi.CSecurityFtdcTraderApi CreateFtdcTraderApi(string pszFlowPath)
        {
            var __ret = __Internal.CreateFtdcTraderApi_0(pszFlowPath);
            global::LTSApi.CSecurityFtdcTraderApi __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::LTSApi.CSecurityFtdcTraderApi.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::LTSApi.CSecurityFtdcTraderApi) global::LTSApi.CSecurityFtdcTraderApi.NativeToManagedMap[__ret];
            else __result0 = global::LTSApi.CSecurityFtdcTraderApi.__CreateInstance(__ret);
            return __result0;
        }

        public abstract string TradingDay
        {
            get;
        }

        #region Virtual table interop

        // void Release() = 0
        private static global::LTSApi.Delegates.Action_IntPtr _Release_0DelegateInstance;

        private static void _Release_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::LTSApi.CSecurityFtdcTraderApi) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.Release();
        }

        // void Init() = 0
        private static global::LTSApi.Delegates.Action_IntPtr _Init_0DelegateInstance;

        private static void _Init_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::LTSApi.CSecurityFtdcTraderApi) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.Init();
        }

        // int Join() = 0
        private static global::LTSApi.Delegates.Func_int_IntPtr _Join_0DelegateInstance;

        private static int _Join_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::LTSApi.CSecurityFtdcTraderApi) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.Join();
            return __ret;
        }

        // char *GetTradingDay() = 0
        private static global::LTSApi.Delegates.Func_string_IntPtr _GetTradingDay_0DelegateInstance;

        private static global::System.IntPtr _GetTradingDay_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::LTSApi.CSecurityFtdcTraderApi) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.TradingDay;
            return Marshal.StringToHGlobalAnsi(__ret);
        }

        // void RegisterFront(char *pszFrontAddress) = 0
        private static global::LTSApi.Delegates.Action_IntPtr_sbytePtr _RegisterFront_0DelegateInstance;

        private static void _RegisterFront_0DelegateHook(global::System.IntPtr instance, sbyte* pszFrontAddress)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::LTSApi.CSecurityFtdcTraderApi) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.RegisterFront(pszFrontAddress);
        }

        // void RegisterSpi(CSecurityFtdcTraderSpi *pSpi) = 0
        private static global::LTSApi.Delegates.Action_IntPtr_IntPtr _RegisterSpi_0DelegateInstance;

        private static void _RegisterSpi_0DelegateHook(global::System.IntPtr instance, global::System.IntPtr pSpi)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::LTSApi.CSecurityFtdcTraderApi) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::LTSApi.CSecurityFtdcTraderSpi __result0;
            if (pSpi == IntPtr.Zero) __result0 = null;
            else if (global::LTSApi.CSecurityFtdcTraderSpi.NativeToManagedMap.ContainsKey(pSpi))
                __result0 = (global::LTSApi.CSecurityFtdcTraderSpi) global::LTSApi.CSecurityFtdcTraderSpi.NativeToManagedMap[pSpi];
            else __result0 = global::LTSApi.CSecurityFtdcTraderSpi.__CreateInstance(pSpi);
            __target.RegisterSpi(__result0);
        }

        // void SubscribePrivateTopic(SECURITY_TE_RESUME_TYPE nResumeType) = 0
        private static global::LTSApi.Delegates.Action_IntPtr_LTSApi_SECURITY_TE_RESUME_TYPE _SubscribePrivateTopic_0DelegateInstance;

        private static void _SubscribePrivateTopic_0DelegateHook(global::System.IntPtr instance, global::LTSApi.SECURITY_TE_RESUME_TYPE nResumeType)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::LTSApi.CSecurityFtdcTraderApi) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.SubscribePrivateTopic(nResumeType);
        }

        // void SubscribePublicTopic(SECURITY_TE_RESUME_TYPE nResumeType) = 0
        private static global::LTSApi.Delegates.Action_IntPtr_LTSApi_SECURITY_TE_RESUME_TYPE _SubscribePublicTopic_0DelegateInstance;

        private static void _SubscribePublicTopic_0DelegateHook(global::System.IntPtr instance, global::LTSApi.SECURITY_TE_RESUME_TYPE nResumeType)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::LTSApi.CSecurityFtdcTraderApi) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.SubscribePublicTopic(nResumeType);
        }

        // int ReqUserLogin(CSecurityFtdcReqUserLoginField *pReqUserLoginField, int nRequestID) = 0
        private static global::LTSApi.Delegates.Func_int_IntPtr_IntPtr_int _ReqUserLogin_0DelegateInstance;

        private static int _ReqUserLogin_0DelegateHook(global::System.IntPtr instance, global::System.IntPtr pReqUserLoginField, int nRequestID)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::LTSApi.CSecurityFtdcTraderApi) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::LTSApi.CSecurityFtdcReqUserLoginField __result0;
            if (pReqUserLoginField == IntPtr.Zero) __result0 = new global::LTSApi.CSecurityFtdcReqUserLoginField();
            else __result0 = global::LTSApi.CSecurityFtdcReqUserLoginField.__CreateInstance(pReqUserLoginField);
            var __ret = __target.ReqUserLogin(__result0, nRequestID);
            return __ret;
        }

        // int ReqUserLogout(CSecurityFtdcUserLogoutField *pUserLogout, int nRequestID) = 0
        private static global::LTSApi.Delegates.Func_int_IntPtr_IntPtr_int _ReqUserLogout_0DelegateInstance;

        private static int _ReqUserLogout_0DelegateHook(global::System.IntPtr instance, global::System.IntPtr pUserLogout, int nRequestID)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::LTSApi.CSecurityFtdcTraderApi) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::LTSApi.CSecurityFtdcUserLogoutField __result0;
            if (pUserLogout == IntPtr.Zero) __result0 = new global::LTSApi.CSecurityFtdcUserLogoutField();
            else __result0 = global::LTSApi.CSecurityFtdcUserLogoutField.__CreateInstance(pUserLogout);
            var __ret = __target.ReqUserLogout(__result0, nRequestID);
            return __ret;
        }

        // int ReqFetchAuthRandCode(CSecurityFtdcAuthRandCodeField *pAuthRandCode, int nRequestID) = 0
        private static global::LTSApi.Delegates.Func_int_IntPtr_IntPtr_int _ReqFetchAuthRandCode_0DelegateInstance;

        private static int _ReqFetchAuthRandCode_0DelegateHook(global::System.IntPtr instance, global::System.IntPtr pAuthRandCode, int nRequestID)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::LTSApi.CSecurityFtdcTraderApi) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::LTSApi.CSecurityFtdcAuthRandCodeField __result0;
            if (pAuthRandCode == IntPtr.Zero) __result0 = new global::LTSApi.CSecurityFtdcAuthRandCodeField();
            else __result0 = global::LTSApi.CSecurityFtdcAuthRandCodeField.__CreateInstance(pAuthRandCode);
            var __ret = __target.ReqFetchAuthRandCode(__result0, nRequestID);
            return __ret;
        }

        // int ReqOrderInsert(CSecurityFtdcInputOrderField *pInputOrder, int nRequestID) = 0
        private static global::LTSApi.Delegates.Func_int_IntPtr_IntPtr_int _ReqOrderInsert_0DelegateInstance;

        private static int _ReqOrderInsert_0DelegateHook(global::System.IntPtr instance, global::System.IntPtr pInputOrder, int nRequestID)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::LTSApi.CSecurityFtdcTraderApi) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::LTSApi.CSecurityFtdcInputOrderField __result0;
            if (pInputOrder == IntPtr.Zero) __result0 = new global::LTSApi.CSecurityFtdcInputOrderField();
            else __result0 = global::LTSApi.CSecurityFtdcInputOrderField.__CreateInstance(pInputOrder);
            var __ret = __target.ReqOrderInsert(__result0, nRequestID);
            return __ret;
        }

        // int ReqOrderAction(CSecurityFtdcInputOrderActionField *pInputOrderAction, int nRequestID) = 0
        private static global::LTSApi.Delegates.Func_int_IntPtr_IntPtr_int _ReqOrderAction_0DelegateInstance;

        private static int _ReqOrderAction_0DelegateHook(global::System.IntPtr instance, global::System.IntPtr pInputOrderAction, int nRequestID)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::LTSApi.CSecurityFtdcTraderApi) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::LTSApi.CSecurityFtdcInputOrderActionField __result0;
            if (pInputOrderAction == IntPtr.Zero) __result0 = new global::LTSApi.CSecurityFtdcInputOrderActionField();
            else __result0 = global::LTSApi.CSecurityFtdcInputOrderActionField.__CreateInstance(pInputOrderAction);
            var __ret = __target.ReqOrderAction(__result0, nRequestID);
            return __ret;
        }

        // int ReqUserPasswordUpdate(CSecurityFtdcUserPasswordUpdateField *pUserPasswordUpdate, int nRequestID) = 0
        private static global::LTSApi.Delegates.Func_int_IntPtr_IntPtr_int _ReqUserPasswordUpdate_0DelegateInstance;

        private static int _ReqUserPasswordUpdate_0DelegateHook(global::System.IntPtr instance, global::System.IntPtr pUserPasswordUpdate, int nRequestID)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::LTSApi.CSecurityFtdcTraderApi) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::LTSApi.CSecurityFtdcUserPasswordUpdateField __result0;
            if (pUserPasswordUpdate == IntPtr.Zero) __result0 = new global::LTSApi.CSecurityFtdcUserPasswordUpdateField();
            else __result0 = global::LTSApi.CSecurityFtdcUserPasswordUpdateField.__CreateInstance(pUserPasswordUpdate);
            var __ret = __target.ReqUserPasswordUpdate(__result0, nRequestID);
            return __ret;
        }

        // int ReqTradingAccountPasswordUpdate(CSecurityFtdcTradingAccountPasswordUpdateField *pTradingAccountPasswordUpdate, int nRequestID) = 0
        private static global::LTSApi.Delegates.Func_int_IntPtr_IntPtr_int _ReqTradingAccountPasswordUpdate_0DelegateInstance;

        private static int _ReqTradingAccountPasswordUpdate_0DelegateHook(global::System.IntPtr instance, global::System.IntPtr pTradingAccountPasswordUpdate, int nRequestID)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::LTSApi.CSecurityFtdcTraderApi) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::LTSApi.CSecurityFtdcTradingAccountPasswordUpdateField __result0;
            if (pTradingAccountPasswordUpdate == IntPtr.Zero) __result0 = new global::LTSApi.CSecurityFtdcTradingAccountPasswordUpdateField();
            else __result0 = global::LTSApi.CSecurityFtdcTradingAccountPasswordUpdateField.__CreateInstance(pTradingAccountPasswordUpdate);
            var __ret = __target.ReqTradingAccountPasswordUpdate(__result0, nRequestID);
            return __ret;
        }

        // int ReqFundOutByLiber(CSecurityFtdcInputFundTransferField *pInputFundTransfer, int nRequestID) = 0
        private static global::LTSApi.Delegates.Func_int_IntPtr_IntPtr_int _ReqFundOutByLiber_0DelegateInstance;

        private static int _ReqFundOutByLiber_0DelegateHook(global::System.IntPtr instance, global::System.IntPtr pInputFundTransfer, int nRequestID)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::LTSApi.CSecurityFtdcTraderApi) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::LTSApi.CSecurityFtdcInputFundTransferField __result0;
            if (pInputFundTransfer == IntPtr.Zero) __result0 = new global::LTSApi.CSecurityFtdcInputFundTransferField();
            else __result0 = global::LTSApi.CSecurityFtdcInputFundTransferField.__CreateInstance(pInputFundTransfer);
            var __ret = __target.ReqFundOutByLiber(__result0, nRequestID);
            return __ret;
        }

        // int ReqFundInterTransfer(CSecurityFtdcFundInterTransferField *pFundInterTransfer, int nRequestID) = 0
        private static global::LTSApi.Delegates.Func_int_IntPtr_IntPtr_int _ReqFundInterTransfer_0DelegateInstance;

        private static int _ReqFundInterTransfer_0DelegateHook(global::System.IntPtr instance, global::System.IntPtr pFundInterTransfer, int nRequestID)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::LTSApi.CSecurityFtdcTraderApi) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::LTSApi.CSecurityFtdcFundInterTransferField __result0;
            if (pFundInterTransfer == IntPtr.Zero) __result0 = new global::LTSApi.CSecurityFtdcFundInterTransferField();
            else __result0 = global::LTSApi.CSecurityFtdcFundInterTransferField.__CreateInstance(pFundInterTransfer);
            var __ret = __target.ReqFundInterTransfer(__result0, nRequestID);
            return __ret;
        }

        private static void*[] __ManagedVTables;
        private static void*[] _Thunks;

        private void SetupVTables(bool destructorOnly = false)
        {
            if (__OriginalVTables != null)
                return;
            __OriginalVTables = new void*[] { *(void**) (__Instance + 0) };

            if (destructorOnly)
                return;
            if (_Thunks == null)
            {
                _Thunks = new void*[17];
                _Release_0DelegateInstance += _Release_0DelegateHook;
                _Thunks[0] = Marshal.GetFunctionPointerForDelegate(_Release_0DelegateInstance).ToPointer();
                _Init_0DelegateInstance += _Init_0DelegateHook;
                _Thunks[1] = Marshal.GetFunctionPointerForDelegate(_Init_0DelegateInstance).ToPointer();
                _Join_0DelegateInstance += _Join_0DelegateHook;
                _Thunks[2] = Marshal.GetFunctionPointerForDelegate(_Join_0DelegateInstance).ToPointer();
                _GetTradingDay_0DelegateInstance += _GetTradingDay_0DelegateHook;
                _Thunks[3] = Marshal.GetFunctionPointerForDelegate(_GetTradingDay_0DelegateInstance).ToPointer();
                _RegisterFront_0DelegateInstance += _RegisterFront_0DelegateHook;
                _Thunks[4] = Marshal.GetFunctionPointerForDelegate(_RegisterFront_0DelegateInstance).ToPointer();
                _RegisterSpi_0DelegateInstance += _RegisterSpi_0DelegateHook;
                _Thunks[5] = Marshal.GetFunctionPointerForDelegate(_RegisterSpi_0DelegateInstance).ToPointer();
                _SubscribePrivateTopic_0DelegateInstance += _SubscribePrivateTopic_0DelegateHook;
                _Thunks[6] = Marshal.GetFunctionPointerForDelegate(_SubscribePrivateTopic_0DelegateInstance).ToPointer();
                _SubscribePublicTopic_0DelegateInstance += _SubscribePublicTopic_0DelegateHook;
                _Thunks[7] = Marshal.GetFunctionPointerForDelegate(_SubscribePublicTopic_0DelegateInstance).ToPointer();
                _ReqUserLogin_0DelegateInstance += _ReqUserLogin_0DelegateHook;
                _Thunks[8] = Marshal.GetFunctionPointerForDelegate(_ReqUserLogin_0DelegateInstance).ToPointer();
                _ReqUserLogout_0DelegateInstance += _ReqUserLogout_0DelegateHook;
                _Thunks[9] = Marshal.GetFunctionPointerForDelegate(_ReqUserLogout_0DelegateInstance).ToPointer();
                _ReqFetchAuthRandCode_0DelegateInstance += _ReqFetchAuthRandCode_0DelegateHook;
                _Thunks[10] = Marshal.GetFunctionPointerForDelegate(_ReqFetchAuthRandCode_0DelegateInstance).ToPointer();
                _ReqOrderInsert_0DelegateInstance += _ReqOrderInsert_0DelegateHook;
                _Thunks[11] = Marshal.GetFunctionPointerForDelegate(_ReqOrderInsert_0DelegateInstance).ToPointer();
                _ReqOrderAction_0DelegateInstance += _ReqOrderAction_0DelegateHook;
                _Thunks[12] = Marshal.GetFunctionPointerForDelegate(_ReqOrderAction_0DelegateInstance).ToPointer();
                _ReqUserPasswordUpdate_0DelegateInstance += _ReqUserPasswordUpdate_0DelegateHook;
                _Thunks[13] = Marshal.GetFunctionPointerForDelegate(_ReqUserPasswordUpdate_0DelegateInstance).ToPointer();
                _ReqTradingAccountPasswordUpdate_0DelegateInstance += _ReqTradingAccountPasswordUpdate_0DelegateHook;
                _Thunks[14] = Marshal.GetFunctionPointerForDelegate(_ReqTradingAccountPasswordUpdate_0DelegateInstance).ToPointer();
                _ReqFundOutByLiber_0DelegateInstance += _ReqFundOutByLiber_0DelegateHook;
                _Thunks[15] = Marshal.GetFunctionPointerForDelegate(_ReqFundOutByLiber_0DelegateInstance).ToPointer();
                _ReqFundInterTransfer_0DelegateInstance += _ReqFundInterTransfer_0DelegateHook;
                _Thunks[16] = Marshal.GetFunctionPointerForDelegate(_ReqFundInterTransfer_0DelegateInstance).ToPointer();
            }

            if (__ManagedVTables == null)
            {
                __ManagedVTables = new void*[1];
                var vfptr0 = Marshal.AllocHGlobal(17 * 4);
                __ManagedVTables[0] = vfptr0.ToPointer();
                *(void**) (vfptr0 + 0) = _Thunks[0];
                *(void**) (vfptr0 + 4) = _Thunks[1];
                *(void**) (vfptr0 + 8) = _Thunks[2];
                *(void**) (vfptr0 + 12) = _Thunks[3];
                *(void**) (vfptr0 + 16) = _Thunks[4];
                *(void**) (vfptr0 + 20) = _Thunks[5];
                *(void**) (vfptr0 + 24) = _Thunks[6];
                *(void**) (vfptr0 + 28) = _Thunks[7];
                *(void**) (vfptr0 + 32) = _Thunks[8];
                *(void**) (vfptr0 + 36) = _Thunks[9];
                *(void**) (vfptr0 + 40) = _Thunks[10];
                *(void**) (vfptr0 + 44) = _Thunks[11];
                *(void**) (vfptr0 + 48) = _Thunks[12];
                *(void**) (vfptr0 + 52) = _Thunks[13];
                *(void**) (vfptr0 + 56) = _Thunks[14];
                *(void**) (vfptr0 + 60) = _Thunks[15];
                *(void**) (vfptr0 + 64) = _Thunks[16];
            }

            *(void**) (__Instance + 0) = __ManagedVTables[0];
        }

        #endregion
    }

    public unsafe partial class CSecurityFtdcTraderApiInternal : global::LTSApi.CSecurityFtdcTraderApi, IDisposable
    {
        private static void* __CopyValue(global::LTSApi.CSecurityFtdcTraderApi.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::LTSApi.CSecurityFtdcTraderApi.__Internal));
            *(global::LTSApi.CSecurityFtdcTraderApi.__Internal*) ret = native;
            return ret.ToPointer();
        }

        internal CSecurityFtdcTraderApiInternal(global::LTSApi.CSecurityFtdcTraderApi.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        internal CSecurityFtdcTraderApiInternal(void* native, bool skipVTables = false)
            : base((void*) null)
        {
            __PointerAdjustment = 0;
            __Instance = new global::System.IntPtr(native);
            __OriginalVTables = new void*[] { *(void**) (__Instance + 0) };
        }

        public override void Release()
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 0 * 4);
            var ___Release_0Delegate = (global::LTSApi.Delegates.Action_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::LTSApi.Delegates.Action_IntPtr));
            ___Release_0Delegate((__Instance + __PointerAdjustment));
        }

        public override void Init()
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 1 * 4);
            var ___Init_0Delegate = (global::LTSApi.Delegates.Action_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::LTSApi.Delegates.Action_IntPtr));
            ___Init_0Delegate((__Instance + __PointerAdjustment));
        }

        public override int Join()
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 2 * 4);
            var ___Join_0Delegate = (global::LTSApi.Delegates.Func_int_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::LTSApi.Delegates.Func_int_IntPtr));
            var __ret = ___Join_0Delegate((__Instance + __PointerAdjustment));
            return __ret;
        }

        public override void RegisterFront(sbyte* pszFrontAddress)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 4 * 4);
            var ___RegisterFront_0Delegate = (global::LTSApi.Delegates.Action_IntPtr_sbytePtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::LTSApi.Delegates.Action_IntPtr_sbytePtr));
            ___RegisterFront_0Delegate((__Instance + __PointerAdjustment), pszFrontAddress);
        }

        public override void RegisterSpi(global::LTSApi.CSecurityFtdcTraderSpi pSpi)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 5 * 4);
            var ___RegisterSpi_0Delegate = (global::LTSApi.Delegates.Action_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::LTSApi.Delegates.Action_IntPtr_IntPtr));
            var __arg0 = ReferenceEquals(pSpi, null) ? global::System.IntPtr.Zero : pSpi.__Instance;
            ___RegisterSpi_0Delegate((__Instance + __PointerAdjustment), __arg0);
        }

        public override void SubscribePrivateTopic(global::LTSApi.SECURITY_TE_RESUME_TYPE nResumeType)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 6 * 4);
            var ___SubscribePrivateTopic_0Delegate = (global::LTSApi.Delegates.Action_IntPtr_LTSApi_SECURITY_TE_RESUME_TYPE) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::LTSApi.Delegates.Action_IntPtr_LTSApi_SECURITY_TE_RESUME_TYPE));
            ___SubscribePrivateTopic_0Delegate((__Instance + __PointerAdjustment), nResumeType);
        }

        public override void SubscribePublicTopic(global::LTSApi.SECURITY_TE_RESUME_TYPE nResumeType)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 7 * 4);
            var ___SubscribePublicTopic_0Delegate = (global::LTSApi.Delegates.Action_IntPtr_LTSApi_SECURITY_TE_RESUME_TYPE) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::LTSApi.Delegates.Action_IntPtr_LTSApi_SECURITY_TE_RESUME_TYPE));
            ___SubscribePublicTopic_0Delegate((__Instance + __PointerAdjustment), nResumeType);
        }

        public override int ReqUserLogin(global::LTSApi.CSecurityFtdcReqUserLoginField pReqUserLoginField, int nRequestID)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 8 * 4);
            var ___ReqUserLogin_0Delegate = (global::LTSApi.Delegates.Func_int_IntPtr_IntPtr_int) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::LTSApi.Delegates.Func_int_IntPtr_IntPtr_int));
            var ____arg0 = pReqUserLoginField.__Instance;
            var __arg0 = new global::System.IntPtr(&____arg0);
            var __ret = ___ReqUserLogin_0Delegate((__Instance + __PointerAdjustment), __arg0, nRequestID);
            return __ret;
        }

        public override int ReqUserLogout(global::LTSApi.CSecurityFtdcUserLogoutField pUserLogout, int nRequestID)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 9 * 4);
            var ___ReqUserLogout_0Delegate = (global::LTSApi.Delegates.Func_int_IntPtr_IntPtr_int) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::LTSApi.Delegates.Func_int_IntPtr_IntPtr_int));
            var ____arg0 = pUserLogout.__Instance;
            var __arg0 = new global::System.IntPtr(&____arg0);
            var __ret = ___ReqUserLogout_0Delegate((__Instance + __PointerAdjustment), __arg0, nRequestID);
            return __ret;
        }

        public override int ReqFetchAuthRandCode(global::LTSApi.CSecurityFtdcAuthRandCodeField pAuthRandCode, int nRequestID)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 10 * 4);
            var ___ReqFetchAuthRandCode_0Delegate = (global::LTSApi.Delegates.Func_int_IntPtr_IntPtr_int) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::LTSApi.Delegates.Func_int_IntPtr_IntPtr_int));
            var ____arg0 = pAuthRandCode.__Instance;
            var __arg0 = new global::System.IntPtr(&____arg0);
            var __ret = ___ReqFetchAuthRandCode_0Delegate((__Instance + __PointerAdjustment), __arg0, nRequestID);
            return __ret;
        }

        public override int ReqOrderInsert(global::LTSApi.CSecurityFtdcInputOrderField pInputOrder, int nRequestID)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 11 * 4);
            var ___ReqOrderInsert_0Delegate = (global::LTSApi.Delegates.Func_int_IntPtr_IntPtr_int) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::LTSApi.Delegates.Func_int_IntPtr_IntPtr_int));
            var ____arg0 = pInputOrder.__Instance;
            var __arg0 = new global::System.IntPtr(&____arg0);
            var __ret = ___ReqOrderInsert_0Delegate((__Instance + __PointerAdjustment), __arg0, nRequestID);
            return __ret;
        }

        public override int ReqOrderAction(global::LTSApi.CSecurityFtdcInputOrderActionField pInputOrderAction, int nRequestID)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 12 * 4);
            var ___ReqOrderAction_0Delegate = (global::LTSApi.Delegates.Func_int_IntPtr_IntPtr_int) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::LTSApi.Delegates.Func_int_IntPtr_IntPtr_int));
            var ____arg0 = pInputOrderAction.__Instance;
            var __arg0 = new global::System.IntPtr(&____arg0);
            var __ret = ___ReqOrderAction_0Delegate((__Instance + __PointerAdjustment), __arg0, nRequestID);
            return __ret;
        }

        public override int ReqUserPasswordUpdate(global::LTSApi.CSecurityFtdcUserPasswordUpdateField pUserPasswordUpdate, int nRequestID)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 13 * 4);
            var ___ReqUserPasswordUpdate_0Delegate = (global::LTSApi.Delegates.Func_int_IntPtr_IntPtr_int) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::LTSApi.Delegates.Func_int_IntPtr_IntPtr_int));
            var ____arg0 = pUserPasswordUpdate.__Instance;
            var __arg0 = new global::System.IntPtr(&____arg0);
            var __ret = ___ReqUserPasswordUpdate_0Delegate((__Instance + __PointerAdjustment), __arg0, nRequestID);
            return __ret;
        }

        public override int ReqTradingAccountPasswordUpdate(global::LTSApi.CSecurityFtdcTradingAccountPasswordUpdateField pTradingAccountPasswordUpdate, int nRequestID)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 14 * 4);
            var ___ReqTradingAccountPasswordUpdate_0Delegate = (global::LTSApi.Delegates.Func_int_IntPtr_IntPtr_int) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::LTSApi.Delegates.Func_int_IntPtr_IntPtr_int));
            var ____arg0 = pTradingAccountPasswordUpdate.__Instance;
            var __arg0 = new global::System.IntPtr(&____arg0);
            var __ret = ___ReqTradingAccountPasswordUpdate_0Delegate((__Instance + __PointerAdjustment), __arg0, nRequestID);
            return __ret;
        }

        public override int ReqFundOutByLiber(global::LTSApi.CSecurityFtdcInputFundTransferField pInputFundTransfer, int nRequestID)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 15 * 4);
            var ___ReqFundOutByLiber_0Delegate = (global::LTSApi.Delegates.Func_int_IntPtr_IntPtr_int) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::LTSApi.Delegates.Func_int_IntPtr_IntPtr_int));
            var ____arg0 = pInputFundTransfer.__Instance;
            var __arg0 = new global::System.IntPtr(&____arg0);
            var __ret = ___ReqFundOutByLiber_0Delegate((__Instance + __PointerAdjustment), __arg0, nRequestID);
            return __ret;
        }

        public override int ReqFundInterTransfer(global::LTSApi.CSecurityFtdcFundInterTransferField pFundInterTransfer, int nRequestID)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 16 * 4);
            var ___ReqFundInterTransfer_0Delegate = (global::LTSApi.Delegates.Func_int_IntPtr_IntPtr_int) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::LTSApi.Delegates.Func_int_IntPtr_IntPtr_int));
            var ____arg0 = pFundInterTransfer.__Instance;
            var __arg0 = new global::System.IntPtr(&____arg0);
            var __ret = ___ReqFundInterTransfer_0Delegate((__Instance + __PointerAdjustment), __arg0, nRequestID);
            return __ret;
        }

        public override string TradingDay
        {
            get
            {
                var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 3 * 4);
                var ___GetTradingDay_0Delegate = (global::LTSApi.Delegates.Func_string_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::LTSApi.Delegates.Func_string_IntPtr));
                var __ret = ___GetTradingDay_0Delegate((__Instance + __PointerAdjustment));
                return Marshal.PtrToStringAnsi(__ret);
            }
        }
    }

    namespace Delegates
    {
        [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.ThisCall)]
        internal unsafe delegate void Action_IntPtr(global::System.IntPtr instance);

        [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.ThisCall)]
        internal unsafe delegate void Action_IntPtr_int(global::System.IntPtr instance, int arg1);

        [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.ThisCall)]
        internal unsafe delegate void Action_IntPtr_IntPtr_int_bool(global::System.IntPtr instance, global::System.IntPtr arg1, int arg2, bool arg3);

        [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.ThisCall)]
        internal unsafe delegate void Action_IntPtr_IntPtr_IntPtr_int_bool(global::System.IntPtr instance, global::System.IntPtr arg1, global::System.IntPtr arg2, int arg3, bool arg4);

        [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.ThisCall)]
        internal unsafe delegate void Action_IntPtr_IntPtr(global::System.IntPtr instance, global::System.IntPtr arg1);

        [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.ThisCall)]
        internal unsafe delegate int Func_int_IntPtr(global::System.IntPtr instance);

        [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.ThisCall)]
        internal unsafe delegate global::System.IntPtr Func_string_IntPtr(global::System.IntPtr instance);

        [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.ThisCall)]
        internal unsafe delegate void Action_IntPtr_sbytePtr(global::System.IntPtr instance, sbyte* arg1);

        [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.ThisCall)]
        internal unsafe delegate int Func_int_IntPtr_charPtrPtr_int_sbytePtr(global::System.IntPtr instance, char** arg1, int arg2, sbyte* arg3);

        [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.ThisCall)]
        internal unsafe delegate int Func_int_IntPtr_IntPtr_int(global::System.IntPtr instance, global::System.IntPtr arg1, int arg2);

        [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.ThisCall)]
        internal unsafe delegate void Action_IntPtr_IntPtr_IntPtr(global::System.IntPtr instance, global::System.IntPtr arg1, global::System.IntPtr arg2);

        [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.ThisCall)]
        internal unsafe delegate void Action_IntPtr_LTSApi_SECURITY_TE_RESUME_TYPE(global::System.IntPtr instance, global::LTSApi.SECURITY_TE_RESUME_TYPE arg1);
    }
}
