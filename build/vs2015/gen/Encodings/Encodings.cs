// ----------------------------------------------------------------------------
// <auto-generated>
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
// </auto-generated>
// ----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;

namespace Encodings
{
    public unsafe partial class Foo : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 4)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            public global::System.IntPtr Unicode;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Encodings.Native.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0Foo@@QAE@ABV0@@Z")]
            internal static extern global::System.IntPtr cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Encodings.Native.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??AFoo@@QAEHH@Z")]
            internal static extern int OperatorSubscript_1(global::System.IntPtr instance, int i);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Encodings.Foo> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Encodings.Foo>();
        protected void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::Encodings.Foo __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new Foo(native.ToPointer(), skipVTables);
        }

        internal static global::Encodings.Foo __CreateInstance(global::Encodings.Foo.__Internal native, bool skipVTables = false)
        {
            return new Foo(native, skipVTables);
        }

        private static void* __CopyValue(global::Encodings.Foo.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Encodings.Foo.__Internal));
            *(global::Encodings.Foo.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private Foo(global::Encodings.Foo.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected Foo(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public Foo()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Encodings.Foo.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public Foo(global::Encodings.Foo _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Encodings.Foo.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::Encodings.Foo.__Internal*) __Instance) = *((global::Encodings.Foo.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            global::Encodings.Foo __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
        }

        public int this[int i]
        {
            get
            {
                var __ret = __Internal.OperatorSubscript_1((__Instance + __PointerAdjustment), i);
                return __ret;
            }
        }

        public string Unicode
        {
            get
            {
                return Marshal.PtrToStringUni(((global::Encodings.Foo.__Internal*) __Instance)->Unicode);
            }

            set
            {
                ((global::Encodings.Foo.__Internal*) __Instance)->Unicode = Marshal.StringToHGlobalUni(value);
            }
        }
    }

    public unsafe partial class Encodings
    {
        public partial struct __Internal
        {
            [SuppressUnmanagedCodeSecurity]
            [DllImport("Encodings.Native.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?FooCallFoo@@YAHPAVFoo@@@Z")]
            internal static extern int FooCallFoo_0(global::System.IntPtr foo);
        }

        public static int FooCallFoo(global::Encodings.Foo foo)
        {
            var __arg0 = ReferenceEquals(foo, null) ? global::System.IntPtr.Zero : foo.__Instance;
            var __ret = __Internal.FooCallFoo_0(__arg0);
            return __ret;
        }
    }
}
