// ----------------------------------------------------------------------------
// <auto-generated>
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
// </auto-generated>
// ----------------------------------------------------------------------------
#pragma once

#include "CppSharp.h"
#include <Common.h>
#include "AnotherUnit.h"

namespace CommonTest
{
    enum struct EmptyEnum;
    enum struct EmptyEnumsWithSameMemberPrefix;
    enum struct EmptyEnumsWithSameMemberPrefixAndUnderscore;
    enum struct EmptyEnumsWithSameMemberPrefixAndUnderscore_;
    enum struct EmptyEnumsWithSameMemberPrefix_;
    enum struct Enum;
    enum struct EnumWithUnderscores;
    enum struct MyEnum;
    ref class AbstractFoo;
    ref class AbstractWithVirtualDtor;
    ref class BaseClassVirtual;
    ref class BufferForVirtualFunction;
    ref class ChangedAccessOfInheritedProperty;
    ref class ClassA;
    ref class ClassB;
    ref class ClassC;
    ref class ClassWithOverloadedOperators;
    ref class Common;
    ref class DefaultParameters;
    ref class Derived;
    ref class DerivedClassAbstractVirtual;
    ref class DerivedClassOverrideAbstractVirtual;
    ref class DerivedClassVirtual;
    ref class DerivedException;
    ref class DerivedFromTemplateInstantiationWithVirtual;
    ref class DifferentConstOverloads;
    ref class Empty;
    ref class Exception;
    ref class Foo2;
    ref class Foo;
    ref class ForwardedTemplate;
    ref class HasAbstractOperator;
    ref class HasFriend;
    ref class HasIgnoredField;
    ref class HasLongDoubles;
    ref class HasOverloadsWithDifferentPointerKindsToSameType;
    ref class HasProblematicFields;
    ref class HasProtectedEnum;
    ref class HasStdString;
    ref class HasSystemBase;
    ref class HasVirtualProperty;
    ref class HasVirtualReturningHasProblematicFields;
    ref class Hello;
    ref class IgnoredType;
    ref class ImplementsAbstractFoo;
    ref class InternalCtorAmbiguity;
    ref class InvokesInternalCtorAmbiguity;
    ref class NonTrivialDtor;
    ref class NonTrivialDtorBase;
    ref class OverridesNonDirectVirtual;
    ref class PureDtor;
    ref class RefTypeClassPassTry;
    ref class ReturnsAbstractFoo;
    ref class ReturnsEmpty;
    ref class SomeClassExtendingTheStruct;
    ref class SomeStruct;
    ref class SpecialisesVoid;
    ref class SpecialisesVoidInUnion;
    ref class TestArraysPointers;
    ref class TestCopyConstructorRef;
    ref class TestDelegates;
    ref class TestFinalizers;
    ref class TestFixedArrays;
    ref class TestGetterSetterToProperties;
    ref class TestIndexedProperties;
    ref class TestIndexedPropertiesInValueType;
    ref class TestMemoryLeaks;
    ref class TestMoveOperatorToClass;
    ref class TestNamingAnonymousTypesInUnion;
    ref class TestNestedTypes;
    ref class TestNotStaticClass;
    ref class TestProperties;
    ref class TestStaticClass;
    ref class TestStaticClassDerived;
    ref class TestVariables;
    ref class TestWideStrings;
    ref class TestsTypes;
    ref class TypeMappedIndex;
    ref class UsesSpecialisationOfVoid;
    value struct Bar2;
    value struct Bar;
    value struct UnionT;
    value struct ValueTypeArrays;
    value struct ValueTypeClassPassTry;
    namespace SomeNamespace
    {
        ref class AbstractClass;
    }

    namespace Boost
    {
        namespace Detail
        {
            ref class SwallowAssign;
        }
    }
}

namespace CommonTest
{
    public enum struct Enum
    {
        A = 0,
        B = 2,
        C = 5,
        E = 1,
        F = -9
    };

    public enum struct MyEnum
    {
        A = 0,
        B = 1,
        C = 2
    };

    public enum struct EmptyEnumsWithSameMemberPrefix
    {
        EmptyEnumsWithSameMemberPrefix1 = 0,
        EmptyEnumsWithSameMemberPrefix2 = 1
    };

    public enum struct EmptyEnumsWithSameMemberPrefix_
    {
        EmptyEnumsWithSameMemberPrefix3 = 0,
        EmptyEnumsWithSameMemberPrefix4 = 1
    };

    public enum struct EmptyEnumsWithSameMemberPrefixAndUnderscore
    {
        EmptyEnumsWithSameMemberPrefixAndUnderscore1 = 0,
        EmptyEnumsWithSameMemberPrefixAndUnderscore2 = 1
    };

    public enum struct EmptyEnumsWithSameMemberPrefixAndUnderscore_
    {
        EmptyEnumsWithSameMemberPrefixAndUnderscore_3 = 0,
        EmptyEnumsWithSameMemberPrefixAndUnderscore_4 = 1
    };

    public enum struct EmptyEnum
    {
    };

    public enum struct EnumWithUnderscores
    {
        lOWER_BEFORE_CAPITAL = 0,
        CAPITALS_More = 1,
        UnderscoreAtEnd = 2,
        UsesDigits1_0 = 3
    };

    public delegate int DelegateInGlobalNamespace(int _0);

    [System::Runtime::InteropServices::UnmanagedFunctionPointer(System::Runtime::InteropServices::CallingConvention::StdCall)] 
    public delegate int DelegateStdCall(int _0);

    [System::Runtime::InteropServices::UnmanagedFunctionPointer(System::Runtime::InteropServices::CallingConvention::Cdecl)] 
    public delegate int DelegateCDecl(int n);

    public delegate void DelegateNullCheck();

    public delegate void VoidPtrRetFunctionTypedef();

    public ref class Foo : ICppInstance
    {
    public:

        enum struct RenamedEmptyEnum
        {
            EmptyEnum1 = 0,
            EmptyEnum2 = 1
        };

        ref class NestedAbstract : ICppInstance
        {
        public:

            property ::Foo::NestedAbstract* NativePtr;
            property System::IntPtr __Instance
            {
                virtual System::IntPtr get();
                virtual void set(System::IntPtr instance);
            }

            NestedAbstract(::Foo::NestedAbstract* native);
            static NestedAbstract^ __CreateInstance(::System::IntPtr native);
            NestedAbstract();

            NestedAbstract(CommonTest::Foo::NestedAbstract^ _0);

            ~NestedAbstract();

            property int* AbstractFunctionInNestedClass
            {
                int* get();
            }

            protected:
            bool __ownsNativeInstance;
        };

        property ::Foo* NativePtr;
        property System::IntPtr __Instance
        {
            virtual System::IntPtr get();
            virtual void set(System::IntPtr instance);
        }

        Foo(::Foo* native);
        static Foo^ __CreateInstance(::System::IntPtr native);
        Foo();

        Foo(CommonTest::Foo^ _0);

        ~Foo();

        property int A
        {
            int get();
            void set(int);
        }

        property float B
        {
            float get();
            void set(float);
        }

        property cli::array<int>^ FixedArray
        {
            cli::array<int>^ get();
            void set(cli::array<int>^);
        }

        property cli::array<System::Char>^ FixedCharArray
        {
            cli::array<System::Char>^ get();
            void set(cli::array<System::Char>^);
        }

        property ::System::IntPtr Ptr
        {
            ::System::IntPtr get();
            void set(::System::IntPtr);
        }

        property int* SomePointer
        {
            int* get();
            void set(int*);
        }

        property int** SomePointerPointer
        {
            int** get();
            void set(int**);
        }

        property System::String^ ANSI
        {
            System::String^ get();
        }

        void TakesTypedefedPtr(CommonTest::Foo^ date);

        int TakesRef(CommonTest::Foo^ other);

        static bool operator==(CommonTest::Foo^ __op, CommonTest::Foo^ other);

        virtual bool Equals(::System::Object^ obj) override;

        static property int Unsafe
        {
            int get();
        }

        static property System::String^ CharArray
        {
            System::String^ get();
        }

        static property int ReadWrite
        {
            int get();
            void set(int);
        }

        protected:
        bool __ownsNativeInstance;
    };

    public value struct Bar
    {
    public:

        enum struct Item
        {
            Item1 = 0,
            Item2 = 1
        };

        Bar(::Bar* native);
        static Bar^ __CreateInstance(::System::IntPtr native);
        Bar(CommonTest::Foo^ foo);

        property int A
        {
            int get();
            void set(int);
        }

        property float B
        {
            float get();
            void set(float);
        }

        CommonTest::Bar::Item RetItem1();

        CommonTest::Bar ReturnPointerToValueType();

        static bool operator==(CommonTest::Bar __op, CommonTest::Bar arg1);

        virtual bool Equals(::System::Object^ obj) override;

        static operator CommonTest::Bar(CommonTest::Foo^ foo);

        static bool operator==(CommonTest::Bar::Item item, CommonTest::Bar bar);

        private:
        int __A;
        float __B;
        cli::array<CommonTest::Bar::Item>^ __fixedEnumArray;
    };

    public ref class Foo2 : CommonTest::Foo
    {
    public:

        Foo2(::Foo2* native);
        static Foo2^ __CreateInstance(::System::IntPtr native);
        Foo2();

        Foo2(CommonTest::Foo2^ _0);

        ~Foo2();

        property int C
        {
            int get();
            void set(int);
        }

        property CommonTest::Bar ValueTypeField
        {
            CommonTest::Bar get();
            void set(CommonTest::Bar);
        }

        static CommonTest::Foo2^ operator<<(CommonTest::Foo2^ __op, int i);

        System::Char TestCharMarshalling(System::Char c);

        void TestKeywordParam(::System::IntPtr where, CommonTest::Bar::Item event, int ref);
    };

    public value struct Bar2
    {
    public:

        ref class Nested : ICppInstance
        {
        public:

            property ::Bar2::Nested* NativePtr;
            property System::IntPtr __Instance
            {
                virtual System::IntPtr get();
                virtual void set(System::IntPtr instance);
            }

            Nested(::Bar2::Nested* native);
            static Nested^ __CreateInstance(::System::IntPtr native);
            Nested();

            Nested(CommonTest::Bar2::Nested^ _0);

            ~Nested();

            static operator int(CommonTest::Bar2::Nested^ __op);

            protected:
            bool __ownsNativeInstance;
        };

        Bar2(::Bar2* native);
        static Bar2^ __CreateInstance(::System::IntPtr native);
        property int A
        {
            int get();
            void set(int);
        }

        property float B
        {
            float get();
            void set(float);
        }

        property int C
        {
            int get();
            void set(int);
        }

        CommonTest::Bar PointerToStruct;
        property int* PointerToPrimitive
        {
            int* get();
            void set(int*);
        }

        property CommonTest::Foo2^ PointerToClass
        {
            CommonTest::Foo2^ get();
            void set(CommonTest::Foo2^);
        }

        CommonTest::Bar ValueStruct;
        property CommonTest::Foo2^ NeedFixedInstance
        {
            CommonTest::Foo2^ get();
        }

        CommonTest::Bar::Item RetItem1();

        CommonTest::Bar ReturnPointerToValueType();

        static operator int(CommonTest::Bar2 __op);

        static operator CommonTest::Foo2^(CommonTest::Bar2 __op);

        private:
        int __A;
        float __B;
        cli::array<CommonTest::Bar::Item>^ __fixedEnumArray;
        int __C;
        int* __pointerToPrimitive;
        CommonTest::Foo2^ __pointerToClass;
    };

    public ref class Hello : ICppInstance
    {
    public:

        [System::Runtime::InteropServices::StructLayout(System::Runtime::InteropServices::LayoutKind::Explicit)]
        value struct NestedPublic
        {
        public:

            NestedPublic(::Hello::NestedPublic* native);
            static NestedPublic^ __CreateInstance(::System::IntPtr native);
            property int J
            {
                int get();
                void set(int);
            }

            property float G
            {
                float get();
                void set(float);
            }

            property long L
            {
                long get();
                void set(long);
            }

            private:
            [System::Runtime::InteropServices::FieldOffset(0)]
            int __j;
            [System::Runtime::InteropServices::FieldOffset(0)]
            float __g;
            [System::Runtime::InteropServices::FieldOffset(0)]
            long __l;
        };

        property ::Hello* NativePtr;
        property System::IntPtr __Instance
        {
            virtual System::IntPtr get();
            virtual void set(System::IntPtr instance);
        }

        Hello(::Hello* native);
        static Hello^ __CreateInstance(::System::IntPtr native);
        Hello();

        Hello(CommonTest::Hello^ hello);

        ~Hello();

        void PrintHello(System::String^ s);

        bool Test1(int i, float f);

        int Add(int a, int b);

        int AddFoo(CommonTest::Foo^ _0);

        int AddFooRef(CommonTest::Foo^ _0);

        int AddFooPtr(CommonTest::Foo^ _0);

        int AddFooPtrRef(CommonTest::Foo^ _0);

        CommonTest::Foo^ RetFoo(int a, float b);

        int AddFoo2(CommonTest::Foo2^ _0);

        int AddBar(CommonTest::Bar _0);

        int AddBar2(CommonTest::Bar2 _0);

        int RetEnum(CommonTest::Enum _0);

        CommonTest::Hello^ RetNull();

        bool TestPrimitiveOut([System::Runtime::InteropServices::Out] float% f);

        bool TestPrimitiveOutRef([System::Runtime::InteropServices::Out] float% f);

        bool TestPrimitiveInOut([System::Runtime::InteropServices::In, System::Runtime::InteropServices::Out] int% i);

        bool TestPrimitiveInOutRef([System::Runtime::InteropServices::In, System::Runtime::InteropServices::Out] int% i);

        void EnumOut(int value, [System::Runtime::InteropServices::Out] Enum% e);

        void EnumOutRef(int value, [System::Runtime::InteropServices::Out] Enum% e);

        void EnumInOut([System::Runtime::InteropServices::In, System::Runtime::InteropServices::Out] Enum% e);

        void EnumInOutRef([System::Runtime::InteropServices::In, System::Runtime::InteropServices::Out] Enum% e);

        void StringOut([System::Runtime::InteropServices::Out] System::String^% str);

        void StringOutRef([System::Runtime::InteropServices::Out] System::String^% str);

        void StringInOut([System::Runtime::InteropServices::In, System::Runtime::InteropServices::Out] System::String^% str);

        void StringInOutRef([System::Runtime::InteropServices::In, System::Runtime::InteropServices::Out] System::String^% str);

        void StringTypedef(System::String^ str);

        protected:
        bool __ownsNativeInstance;
    };

    public ref class AbstractFoo : ICppInstance
    {
    public:

        property ::AbstractFoo* NativePtr;
        property System::IntPtr __Instance
        {
            virtual System::IntPtr get();
            virtual void set(System::IntPtr instance);
        }

        AbstractFoo(::AbstractFoo* native);
        static AbstractFoo^ __CreateInstance(::System::IntPtr native);
        AbstractFoo();

        AbstractFoo(CommonTest::AbstractFoo^ _0);

        ~AbstractFoo();

        property int PureFunction1
        {
            int get();
        }

        virtual int PureFunction(int i);

        virtual int PureFunction2([System::Runtime::InteropServices::In, System::Runtime::InteropServices::Out] bool% ok);

        protected:
        bool __ownsNativeInstance;
    };

    public ref class ImplementsAbstractFoo : CommonTest::AbstractFoo
    {
    public:

        ImplementsAbstractFoo(::ImplementsAbstractFoo* native);
        static ImplementsAbstractFoo^ __CreateInstance(::System::IntPtr native);
        ImplementsAbstractFoo();

        ImplementsAbstractFoo(CommonTest::ImplementsAbstractFoo^ _0);

        ~ImplementsAbstractFoo();

        property int PureFunction1
        {
            int get();
        }

        virtual int PureFunction(int i) override;

        virtual int PureFunction2([System::Runtime::InteropServices::In, System::Runtime::InteropServices::Out] bool% ok) override;
    };

    public ref class ReturnsAbstractFoo : ICppInstance
    {
    public:

        property ::ReturnsAbstractFoo* NativePtr;
        property System::IntPtr __Instance
        {
            virtual System::IntPtr get();
            virtual void set(System::IntPtr instance);
        }

        ReturnsAbstractFoo(::ReturnsAbstractFoo* native);
        static ReturnsAbstractFoo^ __CreateInstance(::System::IntPtr native);
        ReturnsAbstractFoo();

        ReturnsAbstractFoo(CommonTest::ReturnsAbstractFoo^ _0);

        ~ReturnsAbstractFoo();

        property CommonTest::AbstractFoo^ Foo
        {
            CommonTest::AbstractFoo^ get();
        }

        protected:
        bool __ownsNativeInstance;
    };

    public ref class Exception : CommonTest::Foo
    {
    public:

        Exception(::Exception* native);
        static Exception^ __CreateInstance(::System::IntPtr native);
        Exception();

        Exception(CommonTest::Exception^ _0);

        ~Exception();

        virtual CommonTest::Exception^ Clone();
    };

    public ref class DerivedException : CommonTest::Exception
    {
    public:

        DerivedException(::DerivedException* native);
        static DerivedException^ __CreateInstance(::System::IntPtr native);
        DerivedException();

        DerivedException(CommonTest::DerivedException^ _0);

        ~DerivedException();

        virtual CommonTest::Exception^ Clone() override;
    };

    public ref class DefaultParameters : ICppInstance
    {
    public:

        property ::DefaultParameters* NativePtr;
        property System::IntPtr __Instance
        {
            virtual System::IntPtr get();
            virtual void set(System::IntPtr instance);
        }

        DefaultParameters(::DefaultParameters* native);
        static DefaultParameters^ __CreateInstance(::System::IntPtr native);
        DefaultParameters();

        DefaultParameters(CommonTest::DefaultParameters^ _0);

        ~DefaultParameters();

        void Foo(int a, int b);

        void Bar();

        protected:
        bool __ownsNativeInstance;
    };

    public ref class Derived : ICppInstance
    {
    public:

        property ::Derived* NativePtr;
        property System::IntPtr __Instance
        {
            virtual System::IntPtr get();
            virtual void set(System::IntPtr instance);
        }

        Derived(::Derived* native);
        static Derived^ __CreateInstance(::System::IntPtr native);
        Derived();

        Derived(CommonTest::Derived^ _0);

        ~Derived();

        protected:
        bool __ownsNativeInstance;
    };

    public ref class Common : ICppInstance
    {
    public:

        delegate void __AnonymousDelegate0(int _0);

        property ::common* NativePtr;
        property System::IntPtr __Instance
        {
            virtual System::IntPtr get();
            virtual void set(System::IntPtr instance);
        }

        Common(::common* native);
        static Common^ __CreateInstance(::System::IntPtr native);
        Common();

        Common(CommonTest::Common^ _0);

        ~Common();

        static property CommonTest::Bar IndirectReturn
        {
            CommonTest::Bar get();
        }

        static property int Function
        {
            int get();
        }

        static property int TestDecltype
        {
            int get();
        }

        static property void* TestNullPtrTypeRet
        {
            void* get();
        }

        static int UnsafeFunction(CommonTest::Bar ret, System::Char* testForString, CommonTest::Common::__AnonymousDelegate0^ foo);

        static int Test(CommonTest::Common^ s);

        static void FuncTryRefTypePtrOut([System::Runtime::InteropServices::Out] CommonTest::RefTypeClassPassTry^% classTry);

        static void FuncTryRefTypeOut([System::Runtime::InteropServices::Out] CommonTest::RefTypeClassPassTry^% classTry);

        static void FuncTryValTypePtrOut([System::Runtime::InteropServices::Out] CommonTest::ValueTypeClassPassTry% classTry);

        static void FuncTryValTypeOut([System::Runtime::InteropServices::Out] CommonTest::ValueTypeClassPassTry% classTry);

        static int FuncUnion(CommonTest::UnionT u);

        static void FuncWithTypeAlias(int i);

        static void HasPointerParam(CommonTest::Foo^ foo, int i);

        static void HasPointerParam(CommonTest::Foo^ foo);

        static void SMallFollowedByCapital();

        protected:
        bool __ownsNativeInstance;
    };

    public ref class TestMoveOperatorToClass : ICppInstance
    {
    public:

        property ::TestMoveOperatorToClass* NativePtr;
        property System::IntPtr __Instance
        {
            virtual System::IntPtr get();
            virtual void set(System::IntPtr instance);
        }

        TestMoveOperatorToClass(::TestMoveOperatorToClass* native);
        static TestMoveOperatorToClass^ __CreateInstance(::System::IntPtr native);
        TestMoveOperatorToClass();

        TestMoveOperatorToClass(CommonTest::TestMoveOperatorToClass^ _0);

        ~TestMoveOperatorToClass();

        property int A
        {
            int get();
            void set(int);
        }

        property int B
        {
            int get();
            void set(int);
        }

        static int operator*(CommonTest::TestMoveOperatorToClass^ klass, int b);

        static CommonTest::TestMoveOperatorToClass^ operator-(CommonTest::TestMoveOperatorToClass^ b);

        static CommonTest::TestMoveOperatorToClass^ operator+(CommonTest::TestMoveOperatorToClass^ b1, CommonTest::TestMoveOperatorToClass^ b2);

        protected:
        bool __ownsNativeInstance;
    };

    public ref class TestDelegates : ICppInstance
    {
    public:

        delegate int DelegateInClass(int _0);

        delegate int __AnonymousDelegate0(int _0);

        delegate float __AnonymousDelegate1(float _0);

        property ::TestDelegates* NativePtr;
        property System::IntPtr __Instance
        {
            virtual System::IntPtr get();
            virtual void set(System::IntPtr instance);
        }

        TestDelegates(::TestDelegates* native);
        static TestDelegates^ __CreateInstance(::System::IntPtr native);
        TestDelegates();

        TestDelegates(CommonTest::TestDelegates^ _0);

        ~TestDelegates();

        property CommonTest::TestDelegates::DelegateInClass^ A
        {
            CommonTest::TestDelegates::DelegateInClass^ get();
            void set(CommonTest::TestDelegates::DelegateInClass^);
        }

        property CommonTest::DelegateInGlobalNamespace^ B
        {
            CommonTest::DelegateInGlobalNamespace^ get();
            void set(CommonTest::DelegateInGlobalNamespace^);
        }

        property CommonTest::TestDelegates::__AnonymousDelegate0^ MarshalAnonymousDelegate4
        {
            CommonTest::TestDelegates::__AnonymousDelegate0^ get();
        }

        property CommonTest::DelegateNullCheck^ MarshalNullDelegate
        {
            CommonTest::DelegateNullCheck^ get();
        }

        int Triple(int N);

        int StdCall(CommonTest::DelegateStdCall^ del);

        int CDecl(CommonTest::DelegateCDecl^ del);

        void MarshalUnattributedDelegate(CommonTest::DelegateInGlobalNamespace^ del);

        int MarshalAnonymousDelegate(CommonTest::TestDelegates::__AnonymousDelegate0^ del);

        void MarshalAnonymousDelegate2(CommonTest::TestDelegates::__AnonymousDelegate0^ del);

        void MarshalAnonymousDelegate3(CommonTest::TestDelegates::__AnonymousDelegate1^ del);

        void MarshalDelegateInAnotherUnit(CommonTest::DelegateInAnotherUnit^ del);

        static int Double(int N);

        protected:
        bool __ownsNativeInstance;
    };

    public ref class TestMemoryLeaks : ICppInstance
    {
    public:

        property ::TestMemoryLeaks* NativePtr;
        property System::IntPtr __Instance
        {
            virtual System::IntPtr get();
            virtual void set(System::IntPtr instance);
        }

        TestMemoryLeaks(::TestMemoryLeaks* native);
        static TestMemoryLeaks^ __CreateInstance(::System::IntPtr native);
        TestMemoryLeaks(System::String^ name);

        TestMemoryLeaks(CommonTest::TestMemoryLeaks^ _0);

        ~TestMemoryLeaks();

        protected:
        bool __ownsNativeInstance;
    };

    public ref class TestFinalizers : ICppInstance
    {
    public:

        property ::TestFinalizers* NativePtr;
        property System::IntPtr __Instance
        {
            virtual System::IntPtr get();
            virtual void set(System::IntPtr instance);
        }

        TestFinalizers(::TestFinalizers* native);
        static TestFinalizers^ __CreateInstance(::System::IntPtr native);
        TestFinalizers();

        TestFinalizers(CommonTest::TestFinalizers^ _0);

        ~TestFinalizers();

        protected:
        bool __ownsNativeInstance;
    };

    public ref class TestStaticClass abstract sealed
    {
    public:

        static property int OneTwoThree
        {
            int get();
        }

        static int Add(int a, int b);
    };

    public ref class TestStaticClassDerived abstract sealed
    {
    public:

        static property int Foo
        {
            int get();
        }
    };

    public ref class TestNotStaticClass : ICppInstance
    {
    public:

        property ::TestNotStaticClass* NativePtr;
        property System::IntPtr __Instance
        {
            virtual System::IntPtr get();
            virtual void set(System::IntPtr instance);
        }

        TestNotStaticClass(::TestNotStaticClass* native);
        static TestNotStaticClass^ __CreateInstance(::System::IntPtr native);
        TestNotStaticClass(CommonTest::TestNotStaticClass^ _0);

        ~TestNotStaticClass();

        static property CommonTest::TestNotStaticClass^ StaticFunction
        {
            CommonTest::TestNotStaticClass^ get();
        }

        protected:
        bool __ownsNativeInstance;
    };

    public ref class HasIgnoredField : ICppInstance
    {
    public:

        property ::HasIgnoredField* NativePtr;
        property System::IntPtr __Instance
        {
            virtual System::IntPtr get();
            virtual void set(System::IntPtr instance);
        }

        HasIgnoredField(::HasIgnoredField* native);
        static HasIgnoredField^ __CreateInstance(::System::IntPtr native);
        HasIgnoredField();

        HasIgnoredField(CommonTest::HasIgnoredField^ _0);

        ~HasIgnoredField();

        protected:
        bool __ownsNativeInstance;
    };

    public ref class TestCopyConstructorRef : ICppInstance
    {
    public:

        property ::TestCopyConstructorRef* NativePtr;
        property System::IntPtr __Instance
        {
            virtual System::IntPtr get();
            virtual void set(System::IntPtr instance);
        }

        TestCopyConstructorRef(::TestCopyConstructorRef* native);
        static TestCopyConstructorRef^ __CreateInstance(::System::IntPtr native);
        TestCopyConstructorRef();

        TestCopyConstructorRef(CommonTest::TestCopyConstructorRef^ other);

        ~TestCopyConstructorRef();

        property int A
        {
            int get();
            void set(int);
        }

        property float B
        {
            float get();
            void set(float);
        }

        protected:
        bool __ownsNativeInstance;
    };

    public ref class SomeStruct : ICppInstance
    {
    public:

        property ::SomeStruct* NativePtr;
        property System::IntPtr __Instance
        {
            virtual System::IntPtr get();
            virtual void set(System::IntPtr instance);
        }

        SomeStruct(::SomeStruct* native);
        static SomeStruct^ __CreateInstance(::System::IntPtr native);
        SomeStruct();

        SomeStruct(CommonTest::SomeStruct^ _0);

        ~SomeStruct();

        property unsigned long P
        {
            unsigned long get();
            void set(unsigned long);
        }

        protected:
        bool __ownsNativeInstance;
    };

    public ref class SomeClassExtendingTheStruct : CommonTest::SomeStruct
    {
    public:

        SomeClassExtendingTheStruct(::SomeClassExtendingTheStruct* native);
        static SomeClassExtendingTheStruct^ __CreateInstance(::System::IntPtr native);
        SomeClassExtendingTheStruct();

        SomeClassExtendingTheStruct(CommonTest::SomeClassExtendingTheStruct^ _0);

        ~SomeClassExtendingTheStruct();
    };

    public ref class ClassWithOverloadedOperators : ICppInstance
    {
    public:

        property ::ClassWithOverloadedOperators* NativePtr;
        property System::IntPtr __Instance
        {
            virtual System::IntPtr get();
            virtual void set(System::IntPtr instance);
        }

        ClassWithOverloadedOperators(::ClassWithOverloadedOperators* native);
        static ClassWithOverloadedOperators^ __CreateInstance(::System::IntPtr native);
        ClassWithOverloadedOperators();

        ClassWithOverloadedOperators(CommonTest::ClassWithOverloadedOperators^ _0);

        ~ClassWithOverloadedOperators();

        static operator System::Char(CommonTest::ClassWithOverloadedOperators^ __op);

        static operator int(CommonTest::ClassWithOverloadedOperators^ __op);

        static operator short(CommonTest::ClassWithOverloadedOperators^ __op);

        static bool operator<(CommonTest::ClassWithOverloadedOperators^ __op, CommonTest::ClassWithOverloadedOperators^ other);

        protected:
        bool __ownsNativeInstance;
    };

    public ref class TestProperties : ICppInstance
    {
    public:

        property ::TestProperties* NativePtr;
        property System::IntPtr __Instance
        {
            virtual System::IntPtr get();
            virtual void set(System::IntPtr instance);
        }

        TestProperties(::TestProperties* native);
        static TestProperties^ __CreateInstance(::System::IntPtr native);
        TestProperties();

        TestProperties(CommonTest::TestProperties^ _0);

        ~TestProperties();

        property int Field
        {
            int get();
            void set(int);
        }

        property int FieldValue
        {
            int get();
            void set(int);
        }

        protected:
        bool __ownsNativeInstance;
    };

    public ref class TypeMappedIndex : ICppInstance
    {
    public:

        property ::TypeMappedIndex* NativePtr;
        property System::IntPtr __Instance
        {
            virtual System::IntPtr get();
            virtual void set(System::IntPtr instance);
        }

        TypeMappedIndex(::TypeMappedIndex* native);
        static TypeMappedIndex^ __CreateInstance(::System::IntPtr native);
        TypeMappedIndex();

        TypeMappedIndex(unsigned short _0);

        ~TypeMappedIndex();

        protected:
        bool __ownsNativeInstance;
    };

    public ref class TestIndexedProperties : ICppInstance
    {
    public:

        property ::TestIndexedProperties* NativePtr;
        property System::IntPtr __Instance
        {
            virtual System::IntPtr get();
            virtual void set(System::IntPtr instance);
        }

        TestIndexedProperties(::TestIndexedProperties* native);
        static TestIndexedProperties^ __CreateInstance(::System::IntPtr native);
        TestIndexedProperties();

        TestIndexedProperties(CommonTest::TestIndexedProperties^ _0);

        ~TestIndexedProperties();

        property unsigned long default[int]
        {
            unsigned long get(int i);
            void set(int i, unsigned long value);
        }

        property unsigned long default[float]
        {
            unsigned long get(float f);
            void set(float f, unsigned long value);
        }

        property unsigned long default[System::String^]
        {
            unsigned long get(System::String^ name);
        }

        property unsigned long* default[double]
        {
            unsigned long* get(double d);
        }

        property CommonTest::TestProperties^ default[unsigned char]
        {
            CommonTest::TestProperties^ get(unsigned char b);
            void set(unsigned char b, CommonTest::TestProperties^ value);
        }

        property CommonTest::TestProperties^ default[short]
        {
            CommonTest::TestProperties^ get(short b);
        }

        property unsigned long default[CommonTest::TestProperties^]
        {
            unsigned long get(CommonTest::TestProperties^ b);
        }

        property CommonTest::Bar default[unsigned long]
        {
            CommonTest::Bar get(unsigned long i);
            void set(unsigned long i, CommonTest::Bar value);
        }

        property CommonTest::Bar default[unsigned short]
        {
            CommonTest::Bar get(unsigned short key);
            void set(unsigned short key, CommonTest::Bar value);
        }

        property int default[System::Char]
        {
            int get(System::Char key);
        }

        protected:
        bool __ownsNativeInstance;
    };

    public ref class TestIndexedPropertiesInValueType : ICppInstance
    {
    public:

        property ::TestIndexedPropertiesInValueType* NativePtr;
        property System::IntPtr __Instance
        {
            virtual System::IntPtr get();
            virtual void set(System::IntPtr instance);
        }

        TestIndexedPropertiesInValueType(::TestIndexedPropertiesInValueType* native);
        static TestIndexedPropertiesInValueType^ __CreateInstance(::System::IntPtr native);
        TestIndexedPropertiesInValueType();

        TestIndexedPropertiesInValueType(CommonTest::TestIndexedPropertiesInValueType^ _0);

        ~TestIndexedPropertiesInValueType();

        property int default[int]
        {
            int get(int i);
        }

        protected:
        bool __ownsNativeInstance;
    };

    public ref class TestVariables : ICppInstance
    {
    public:

        property ::TestVariables* NativePtr;
        property System::IntPtr __Instance
        {
            virtual System::IntPtr get();
            virtual void set(System::IntPtr instance);
        }

        TestVariables(::TestVariables* native);
        static TestVariables^ __CreateInstance(::System::IntPtr native);
        TestVariables();

        TestVariables(CommonTest::TestVariables^ _0);

        ~TestVariables();

        void SetValue(int value);

        static property int VALUE
        {
            int get();
            void set(int);
        }

        protected:
        bool __ownsNativeInstance;
    };

    public ref class TestWideStrings : ICppInstance
    {
    public:

        property ::TestWideStrings* NativePtr;
        property System::IntPtr __Instance
        {
            virtual System::IntPtr get();
            virtual void set(System::IntPtr instance);
        }

        TestWideStrings(::TestWideStrings* native);
        static TestWideStrings^ __CreateInstance(::System::IntPtr native);
        TestWideStrings();

        TestWideStrings(CommonTest::TestWideStrings^ _0);

        ~TestWideStrings();

        property System::String^ WidePointer
        {
            System::String^ get();
        }

        property System::String^ WideNullPointer
        {
            System::String^ get();
        }

        protected:
        bool __ownsNativeInstance;
    };

    public ref class TestFixedArrays : ICppInstance
    {
    public:

        property ::TestFixedArrays* NativePtr;
        property System::IntPtr __Instance
        {
            virtual System::IntPtr get();
            virtual void set(System::IntPtr instance);
        }

        TestFixedArrays(::TestFixedArrays* native);
        static TestFixedArrays^ __CreateInstance(::System::IntPtr native);
        TestFixedArrays();

        TestFixedArrays(CommonTest::TestFixedArrays^ _0);

        ~TestFixedArrays();

        protected:
        bool __ownsNativeInstance;
    };

    public ref class TestArraysPointers : ICppInstance
    {
    public:

        property ::TestArraysPointers* NativePtr;
        property System::IntPtr __Instance
        {
            virtual System::IntPtr get();
            virtual void set(System::IntPtr instance);
        }

        TestArraysPointers(::TestArraysPointers* native);
        static TestArraysPointers^ __CreateInstance(::System::IntPtr native);
        TestArraysPointers(MyEnum* values, int count);

        TestArraysPointers(CommonTest::TestArraysPointers^ _0);

        ~TestArraysPointers();

        property CommonTest::MyEnum Value
        {
            CommonTest::MyEnum get();
            void set(CommonTest::MyEnum);
        }

        protected:
        bool __ownsNativeInstance;
    };

    public ref class TestGetterSetterToProperties : ICppInstance
    {
    public:

        property ::TestGetterSetterToProperties* NativePtr;
        property System::IntPtr __Instance
        {
            virtual System::IntPtr get();
            virtual void set(System::IntPtr instance);
        }

        TestGetterSetterToProperties(::TestGetterSetterToProperties* native);
        static TestGetterSetterToProperties^ __CreateInstance(::System::IntPtr native);
        TestGetterSetterToProperties();

        TestGetterSetterToProperties(CommonTest::TestGetterSetterToProperties^ _0);

        ~TestGetterSetterToProperties();

        property int Width
        {
            int get();
        }

        property int Height
        {
            int get();
        }

        protected:
        bool __ownsNativeInstance;
    };

    public ref class ClassA : ICppInstance
    {
    public:

        property ::ClassA* NativePtr;
        property System::IntPtr __Instance
        {
            virtual System::IntPtr get();
            virtual void set(System::IntPtr instance);
        }

        ClassA(::ClassA* native);
        static ClassA^ __CreateInstance(::System::IntPtr native);
        ClassA(int value);

        ClassA(CommonTest::ClassA^ _0);

        ~ClassA();

        property int Value
        {
            int get();
            void set(int);
        }

        static operator CommonTest::ClassA^(int value);

        protected:
        bool __ownsNativeInstance;
    };

    public ref class ClassB : ICppInstance
    {
    public:

        property ::ClassB* NativePtr;
        property System::IntPtr __Instance
        {
            virtual System::IntPtr get();
            virtual void set(System::IntPtr instance);
        }

        ClassB(::ClassB* native);
        static ClassB^ __CreateInstance(::System::IntPtr native);
        ClassB(CommonTest::ClassA^ x);

        ClassB(CommonTest::ClassB^ _0);

        ~ClassB();

        property int Value
        {
            int get();
            void set(int);
        }

        static operator CommonTest::ClassB^(CommonTest::ClassA^ x);

        protected:
        bool __ownsNativeInstance;
    };

    public ref class ClassC : ICppInstance
    {
    public:

        property ::ClassC* NativePtr;
        property System::IntPtr __Instance
        {
            virtual System::IntPtr get();
            virtual void set(System::IntPtr instance);
        }

        ClassC(::ClassC* native);
        static ClassC^ __CreateInstance(::System::IntPtr native);
        ClassC(CommonTest::ClassA^ x);

        ClassC(CommonTest::ClassB^ x);

        ClassC(CommonTest::ClassC^ _0);

        ~ClassC();

        property int Value
        {
            int get();
            void set(int);
        }

        static explicit operator CommonTest::ClassC^(CommonTest::ClassB^ x);

        protected:
        bool __ownsNativeInstance;
    };

    public ref class PureDtor : ICppInstance
    {
    public:

        property ::PureDtor* NativePtr;
        property System::IntPtr __Instance
        {
            virtual System::IntPtr get();
            virtual void set(System::IntPtr instance);
        }

        PureDtor(::PureDtor* native);
        static PureDtor^ __CreateInstance(::System::IntPtr native);
        PureDtor();

        PureDtor(CommonTest::PureDtor^ _0);

        ~PureDtor();

        protected:
        bool __ownsNativeInstance;
    };

    public ref class TestNestedTypes : ICppInstance
    {
    public:

        [System::Runtime::InteropServices::StructLayout(System::Runtime::InteropServices::LayoutKind::Explicit)]
        value struct AsTypes
        {
        public:

            ref class Uchars : ICppInstance
            {
            public:

                property ::TestNestedTypes::as_types::uchars* NativePtr;
                property System::IntPtr __Instance
                {
                    virtual System::IntPtr get();
                    virtual void set(System::IntPtr instance);
                }

                Uchars(::TestNestedTypes::as_types::uchars* native);
                static Uchars^ __CreateInstance(::System::IntPtr native);
                Uchars();

                Uchars(CommonTest::TestNestedTypes::AsTypes::Uchars^ _0);

                ~Uchars();

                property unsigned char Blue
                {
                    unsigned char get();
                    void set(unsigned char);
                }

                property unsigned char Green
                {
                    unsigned char get();
                    void set(unsigned char);
                }

                property unsigned char Red
                {
                    unsigned char get();
                    void set(unsigned char);
                }

                property unsigned char Alpha
                {
                    unsigned char get();
                    void set(unsigned char);
                }

                protected:
                bool __ownsNativeInstance;
            };

            AsTypes(::TestNestedTypes::as_types* native);
            static AsTypes^ __CreateInstance(::System::IntPtr native);
            property int AsInt
            {
                int get();
                void set(int);
            }

            property CommonTest::TestNestedTypes::AsTypes::Uchars^ AsUchar
            {
                CommonTest::TestNestedTypes::AsTypes::Uchars^ get();
                void set(CommonTest::TestNestedTypes::AsTypes::Uchars^);
            }

            private:
            [System::Runtime::InteropServices::FieldOffset(0)]
            int __as_int;
            [System::Runtime::InteropServices::FieldOffset(0)]
            CommonTest::TestNestedTypes::AsTypes::Uchars^ __as_uchar;
        };

        property ::TestNestedTypes* NativePtr;
        property System::IntPtr __Instance
        {
            virtual System::IntPtr get();
            virtual void set(System::IntPtr instance);
        }

        TestNestedTypes(::TestNestedTypes* native);
        static TestNestedTypes^ __CreateInstance(::System::IntPtr native);
        TestNestedTypes();

        TestNestedTypes(CommonTest::TestNestedTypes^ _0);

        ~TestNestedTypes();

        protected:
        bool __ownsNativeInstance;
    };

    public ref class HasStdString : ICppInstance
    {
    public:

        property ::HasStdString* NativePtr;
        property System::IntPtr __Instance
        {
            virtual System::IntPtr get();
            virtual void set(System::IntPtr instance);
        }

        HasStdString(::HasStdString* native);
        static HasStdString^ __CreateInstance(::System::IntPtr native);
        HasStdString();

        HasStdString(CommonTest::HasStdString^ _0);

        ~HasStdString();

        property System::String^ S
        {
            System::String^ get();
            void set(System::String^);
        }

        property System::String^ StdString
        {
            System::String^ get();
        }

        System::String^ TestStdString(System::String^ s);

        protected:
        bool __ownsNativeInstance;
    };

    public ref class InternalCtorAmbiguity : ICppInstance
    {
    public:

        property ::InternalCtorAmbiguity* NativePtr;
        property System::IntPtr __Instance
        {
            virtual System::IntPtr get();
            virtual void set(System::IntPtr instance);
        }

        InternalCtorAmbiguity(::InternalCtorAmbiguity* native);
        static InternalCtorAmbiguity^ __CreateInstance(::System::IntPtr native);
        InternalCtorAmbiguity(::System::IntPtr param);

        InternalCtorAmbiguity(CommonTest::InternalCtorAmbiguity^ _0);

        ~InternalCtorAmbiguity();

        protected:
        bool __ownsNativeInstance;
    };

    public ref class InvokesInternalCtorAmbiguity : ICppInstance
    {
    public:

        property ::InvokesInternalCtorAmbiguity* NativePtr;
        property System::IntPtr __Instance
        {
            virtual System::IntPtr get();
            virtual void set(System::IntPtr instance);
        }

        InvokesInternalCtorAmbiguity(::InvokesInternalCtorAmbiguity* native);
        static InvokesInternalCtorAmbiguity^ __CreateInstance(::System::IntPtr native);
        InvokesInternalCtorAmbiguity();

        InvokesInternalCtorAmbiguity(CommonTest::InvokesInternalCtorAmbiguity^ _0);

        ~InvokesInternalCtorAmbiguity();

        CommonTest::InternalCtorAmbiguity^ InvokeInternalCtor();

        protected:
        bool __ownsNativeInstance;
    };

    public ref class HasFriend : ICppInstance
    {
    public:

        property ::HasFriend* NativePtr;
        property System::IntPtr __Instance
        {
            virtual System::IntPtr get();
            virtual void set(System::IntPtr instance);
        }

        HasFriend(::HasFriend* native);
        static HasFriend^ __CreateInstance(::System::IntPtr native);
        HasFriend(int m);

        HasFriend(CommonTest::HasFriend^ _0);

        ~HasFriend();

        property int M
        {
            int get();
        }

        static operator CommonTest::HasFriend^(int m);

        static CommonTest::HasFriend^ operator+(CommonTest::HasFriend^ f1, CommonTest::HasFriend^ f2);

        static CommonTest::HasFriend^ operator-(CommonTest::HasFriend^ f1, CommonTest::HasFriend^ f2);

        protected:
        bool __ownsNativeInstance;
    };

    public ref class DifferentConstOverloads : ICppInstance
    {
    public:

        property ::DifferentConstOverloads* NativePtr;
        property System::IntPtr __Instance
        {
            virtual System::IntPtr get();
            virtual void set(System::IntPtr instance);
        }

        DifferentConstOverloads(::DifferentConstOverloads* native);
        static DifferentConstOverloads^ __CreateInstance(::System::IntPtr native);
        DifferentConstOverloads();

        DifferentConstOverloads(CommonTest::DifferentConstOverloads^ _0);

        ~DifferentConstOverloads();

        static bool operator==(CommonTest::DifferentConstOverloads^ __op, CommonTest::DifferentConstOverloads^ other);

        virtual bool Equals(::System::Object^ obj) override;

        static bool operator!=(CommonTest::DifferentConstOverloads^ __op, CommonTest::DifferentConstOverloads^ other);

        static bool operator==(CommonTest::DifferentConstOverloads^ __op, int number);

        protected:
        bool __ownsNativeInstance;
    };

    public ref class TestNamingAnonymousTypesInUnion : ICppInstance
    {
    public:

        property ::TestNamingAnonymousTypesInUnion* NativePtr;
        property System::IntPtr __Instance
        {
            virtual System::IntPtr get();
            virtual void set(System::IntPtr instance);
        }

        TestNamingAnonymousTypesInUnion(::TestNamingAnonymousTypesInUnion* native);
        static TestNamingAnonymousTypesInUnion^ __CreateInstance(::System::IntPtr native);
        TestNamingAnonymousTypesInUnion();

        TestNamingAnonymousTypesInUnion(CommonTest::TestNamingAnonymousTypesInUnion^ _0);

        ~TestNamingAnonymousTypesInUnion();

        protected:
        bool __ownsNativeInstance;
    };

    public ref class RefTypeClassPassTry : ICppInstance
    {
    public:

        property ::RefTypeClassPassTry* NativePtr;
        property System::IntPtr __Instance
        {
            virtual System::IntPtr get();
            virtual void set(System::IntPtr instance);
        }

        RefTypeClassPassTry(::RefTypeClassPassTry* native);
        static RefTypeClassPassTry^ __CreateInstance(::System::IntPtr native);
        RefTypeClassPassTry();

        RefTypeClassPassTry(CommonTest::RefTypeClassPassTry^ _0);

        ~RefTypeClassPassTry();

        protected:
        bool __ownsNativeInstance;
    };

    public value struct ValueTypeArrays
    {
    public:

        ValueTypeArrays(::ValueTypeArrays* native);
        static ValueTypeArrays^ __CreateInstance(::System::IntPtr native);
        property cli::array<float>^ FirstValueTypeArrray
        {
            cli::array<float>^ get();
            void set(cli::array<float>^);
        }

        property cli::array<int>^ SecondValueTypeArray
        {
            cli::array<int>^ get();
            void set(cli::array<int>^);
        }

        property cli::array<System::Char>^ ThirdValueTypeArray
        {
            cli::array<System::Char>^ get();
            void set(cli::array<System::Char>^);
        }

        property unsigned int Size
        {
            unsigned int get();
            void set(unsigned int);
        }

        private:
        cli::array<float>^ __firstValueTypeArrray;
        cli::array<int>^ __secondValueTypeArray;
        cli::array<System::Char>^ __thirdValueTypeArray;
        unsigned int __size;
    };

    public ref class HasVirtualProperty : ICppInstance
    {
    public:

        property ::HasVirtualProperty* NativePtr;
        property System::IntPtr __Instance
        {
            virtual System::IntPtr get();
            virtual void set(System::IntPtr instance);
        }

        HasVirtualProperty(::HasVirtualProperty* native);
        static HasVirtualProperty^ __CreateInstance(::System::IntPtr native);
        HasVirtualProperty();

        HasVirtualProperty(CommonTest::HasVirtualProperty^ _0);

        ~HasVirtualProperty();

        property int Property
        {
            int get();
            void set(int);
        }

        protected:
        bool __ownsNativeInstance;
    };

    public ref class ChangedAccessOfInheritedProperty : CommonTest::HasVirtualProperty
    {
    public:

        ChangedAccessOfInheritedProperty(::ChangedAccessOfInheritedProperty* native);
        static ChangedAccessOfInheritedProperty^ __CreateInstance(::System::IntPtr native);
        ChangedAccessOfInheritedProperty();

        ChangedAccessOfInheritedProperty(CommonTest::ChangedAccessOfInheritedProperty^ _0);

        ~ChangedAccessOfInheritedProperty();
    };

    public ref class Empty : ICppInstance
    {
    public:

        property ::Empty* NativePtr;
        property System::IntPtr __Instance
        {
            virtual System::IntPtr get();
            virtual void set(System::IntPtr instance);
        }

        Empty(::Empty* native);
        static Empty^ __CreateInstance(::System::IntPtr native);
        Empty();

        Empty(CommonTest::Empty^ _0);

        ~Empty();

        protected:
        bool __ownsNativeInstance;
    };

    public ref class ReturnsEmpty : ICppInstance
    {
    public:

        property ::ReturnsEmpty* NativePtr;
        property System::IntPtr __Instance
        {
            virtual System::IntPtr get();
            virtual void set(System::IntPtr instance);
        }

        ReturnsEmpty(::ReturnsEmpty* native);
        static ReturnsEmpty^ __CreateInstance(::System::IntPtr native);
        ReturnsEmpty();

        ReturnsEmpty(CommonTest::ReturnsEmpty^ _0);

        ~ReturnsEmpty();

        property CommonTest::Empty^ Empty
        {
            CommonTest::Empty^ get();
        }

        protected:
        bool __ownsNativeInstance;
    };

    public value struct ValueTypeClassPassTry
    {
    public:

        ValueTypeClassPassTry(::ValueTypeClassPassTry* native);
        static ValueTypeClassPassTry^ __CreateInstance(::System::IntPtr native);
    };

    public ref class HasProblematicFields : ICppInstance
    {
    public:

        property ::HasProblematicFields* NativePtr;
        property System::IntPtr __Instance
        {
            virtual System::IntPtr get();
            virtual void set(System::IntPtr instance);
        }

        HasProblematicFields(::HasProblematicFields* native);
        static HasProblematicFields^ __CreateInstance(::System::IntPtr native);
        HasProblematicFields();

        HasProblematicFields(CommonTest::HasProblematicFields^ _0);

        ~HasProblematicFields();

        property bool B
        {
            bool get();
            void set(bool);
        }

        property System::Char C
        {
            System::Char get();
            void set(System::Char);
        }

        protected:
        bool __ownsNativeInstance;
    };

    public ref class HasVirtualReturningHasProblematicFields : ICppInstance
    {
    public:

        property ::HasVirtualReturningHasProblematicFields* NativePtr;
        property System::IntPtr __Instance
        {
            virtual System::IntPtr get();
            virtual void set(System::IntPtr instance);
        }

        HasVirtualReturningHasProblematicFields(::HasVirtualReturningHasProblematicFields* native);
        static HasVirtualReturningHasProblematicFields^ __CreateInstance(::System::IntPtr native);
        HasVirtualReturningHasProblematicFields();

        HasVirtualReturningHasProblematicFields(CommonTest::HasVirtualReturningHasProblematicFields^ _0);

        ~HasVirtualReturningHasProblematicFields();

        property CommonTest::HasProblematicFields^ ReturnsProblematicFields
        {
            CommonTest::HasProblematicFields^ get();
        }

        protected:
        bool __ownsNativeInstance;
    };

    public ref class BaseClassVirtual : ICppInstance
    {
    public:

        property ::BaseClassVirtual* NativePtr;
        property System::IntPtr __Instance
        {
            virtual System::IntPtr get();
            virtual void set(System::IntPtr instance);
        }

        BaseClassVirtual(::BaseClassVirtual* native);
        static BaseClassVirtual^ __CreateInstance(::System::IntPtr native);
        BaseClassVirtual();

        BaseClassVirtual(CommonTest::BaseClassVirtual^ _0);

        ~BaseClassVirtual();

        static property CommonTest::BaseClassVirtual^ Base
        {
            CommonTest::BaseClassVirtual^ get();
        }

        virtual int RetInt(CommonTest::Foo^ foo);

        protected:
        bool __ownsNativeInstance;
    };

    public ref class DerivedClassVirtual : CommonTest::BaseClassVirtual
    {
    public:

        DerivedClassVirtual(::DerivedClassVirtual* native);
        static DerivedClassVirtual^ __CreateInstance(::System::IntPtr native);
        DerivedClassVirtual();

        DerivedClassVirtual(CommonTest::DerivedClassVirtual^ _0);

        ~DerivedClassVirtual();

        virtual int RetInt(CommonTest::Foo^ foo) override;
    };

    public ref class DerivedClassAbstractVirtual : CommonTest::DerivedClassVirtual
    {
    public:

        DerivedClassAbstractVirtual(::DerivedClassAbstractVirtual* native);
        static DerivedClassAbstractVirtual^ __CreateInstance(::System::IntPtr native);
        DerivedClassAbstractVirtual();

        DerivedClassAbstractVirtual(CommonTest::DerivedClassAbstractVirtual^ _0);

        ~DerivedClassAbstractVirtual();

        virtual int RetInt(CommonTest::Foo^ foo) override;
    };

    public ref class DerivedClassOverrideAbstractVirtual : CommonTest::DerivedClassAbstractVirtual
    {
    public:

        DerivedClassOverrideAbstractVirtual(::DerivedClassOverrideAbstractVirtual* native);
        static DerivedClassOverrideAbstractVirtual^ __CreateInstance(::System::IntPtr native);
        DerivedClassOverrideAbstractVirtual();

        DerivedClassOverrideAbstractVirtual(CommonTest::DerivedClassOverrideAbstractVirtual^ _0);

        ~DerivedClassOverrideAbstractVirtual();

        virtual int RetInt(CommonTest::Foo^ foo) override;
    };

    public ref class BufferForVirtualFunction : CommonTest::BaseClassVirtual
    {
    public:

        BufferForVirtualFunction(::BufferForVirtualFunction* native);
        static BufferForVirtualFunction^ __CreateInstance(::System::IntPtr native);
        BufferForVirtualFunction();

        BufferForVirtualFunction(CommonTest::BufferForVirtualFunction^ _0);

        ~BufferForVirtualFunction();
    };

    public ref class OverridesNonDirectVirtual : CommonTest::BufferForVirtualFunction
    {
    public:

        OverridesNonDirectVirtual(::OverridesNonDirectVirtual* native);
        static OverridesNonDirectVirtual^ __CreateInstance(::System::IntPtr native);
        OverridesNonDirectVirtual();

        OverridesNonDirectVirtual(CommonTest::OverridesNonDirectVirtual^ _0);

        ~OverridesNonDirectVirtual();

        virtual int RetInt(CommonTest::Foo^ foo) override;
    };

    public ref class AbstractWithVirtualDtor : ICppInstance
    {
    public:

        property ::AbstractWithVirtualDtor* NativePtr;
        property System::IntPtr __Instance
        {
            virtual System::IntPtr get();
            virtual void set(System::IntPtr instance);
        }

        AbstractWithVirtualDtor(::AbstractWithVirtualDtor* native);
        static AbstractWithVirtualDtor^ __CreateInstance(::System::IntPtr native);
        AbstractWithVirtualDtor();

        AbstractWithVirtualDtor(CommonTest::AbstractWithVirtualDtor^ _0);

        ~AbstractWithVirtualDtor();

        virtual void Abstract();

        protected:
        bool __ownsNativeInstance;
    };

    public ref class NonTrivialDtorBase : ICppInstance
    {
    public:

        property ::NonTrivialDtorBase* NativePtr;
        property System::IntPtr __Instance
        {
            virtual System::IntPtr get();
            virtual void set(System::IntPtr instance);
        }

        NonTrivialDtorBase(::NonTrivialDtorBase* native);
        static NonTrivialDtorBase^ __CreateInstance(::System::IntPtr native);
        NonTrivialDtorBase();

        NonTrivialDtorBase(CommonTest::NonTrivialDtorBase^ _0);

        ~NonTrivialDtorBase();

        protected:
        bool __ownsNativeInstance;
    };

    public ref class NonTrivialDtor : CommonTest::NonTrivialDtorBase
    {
    public:

        NonTrivialDtor(::NonTrivialDtor* native);
        static NonTrivialDtor^ __CreateInstance(::System::IntPtr native);
        NonTrivialDtor();

        NonTrivialDtor(CommonTest::NonTrivialDtor^ _0);

        ~NonTrivialDtor();

        static property bool dtorCalled
        {
            bool get();
            void set(bool);
        }
    };

    public ref class DerivedFromTemplateInstantiationWithVirtual : ICppInstance
    {
    public:

        property ::DerivedFromTemplateInstantiationWithVirtual* NativePtr;
        property System::IntPtr __Instance
        {
            virtual System::IntPtr get();
            virtual void set(System::IntPtr instance);
        }

        DerivedFromTemplateInstantiationWithVirtual(::DerivedFromTemplateInstantiationWithVirtual* native);
        static DerivedFromTemplateInstantiationWithVirtual^ __CreateInstance(::System::IntPtr native);
        DerivedFromTemplateInstantiationWithVirtual();

        DerivedFromTemplateInstantiationWithVirtual(CommonTest::DerivedFromTemplateInstantiationWithVirtual^ _0);

        ~DerivedFromTemplateInstantiationWithVirtual();

        protected:
        bool __ownsNativeInstance;
    };

    [System::Runtime::InteropServices::StructLayout(System::Runtime::InteropServices::LayoutKind::Explicit)]
    public value struct UnionT
    {
    public:

        UnionT(::union_t* native);
        static UnionT^ __CreateInstance(::System::IntPtr native);
        property int C
        {
            int get();
            void set(int);
        }

        private:
        [System::Runtime::InteropServices::FieldOffset(0)]
        int __c;
    };

    public ref class HasProtectedEnum : ICppInstance
    {
    public:

        property ::HasProtectedEnum* NativePtr;
        property System::IntPtr __Instance
        {
            virtual System::IntPtr get();
            virtual void set(System::IntPtr instance);
        }

        HasProtectedEnum(::HasProtectedEnum* native);
        static HasProtectedEnum^ __CreateInstance(::System::IntPtr native);
        HasProtectedEnum();

        HasProtectedEnum(CommonTest::HasProtectedEnum^ _0);

        ~HasProtectedEnum();

        protected:
        bool __ownsNativeInstance;
    };

    public ref class TestsTypes : ICppInstance
    {
    public:

        property ::TestsTypes* NativePtr;
        property System::IntPtr __Instance
        {
            virtual System::IntPtr get();
            virtual void set(System::IntPtr instance);
        }

        TestsTypes(::TestsTypes* native);
        static TestsTypes^ __CreateInstance(::System::IntPtr native);
        TestsTypes();

        TestsTypes(CommonTest::TestsTypes^ _0);

        ~TestsTypes();

        protected:
        bool __ownsNativeInstance;
    };

    public ref class UsesSpecialisationOfVoid : ICppInstance
    {
    public:

        property ::UsesSpecialisationOfVoid* NativePtr;
        property System::IntPtr __Instance
        {
            virtual System::IntPtr get();
            virtual void set(System::IntPtr instance);
        }

        UsesSpecialisationOfVoid(::UsesSpecialisationOfVoid* native);
        static UsesSpecialisationOfVoid^ __CreateInstance(::System::IntPtr native);
        UsesSpecialisationOfVoid();

        UsesSpecialisationOfVoid(CommonTest::UsesSpecialisationOfVoid^ _0);

        ~UsesSpecialisationOfVoid();

        protected:
        bool __ownsNativeInstance;
    };

    public ref class HasAbstractOperator : ICppInstance
    {
    public:

        property ::HasAbstractOperator* NativePtr;
        property System::IntPtr __Instance
        {
            virtual System::IntPtr get();
            virtual void set(System::IntPtr instance);
        }

        HasAbstractOperator(::HasAbstractOperator* native);
        static HasAbstractOperator^ __CreateInstance(::System::IntPtr native);
        HasAbstractOperator();

        HasAbstractOperator(CommonTest::HasAbstractOperator^ _0);

        ~HasAbstractOperator();

        protected:
        bool __ownsNativeInstance;
    };

    public ref class HasSystemBase : ICppInstance
    {
    public:

        property ::HasSystemBase* NativePtr;
        property System::IntPtr __Instance
        {
            virtual System::IntPtr get();
            virtual void set(System::IntPtr instance);
        }

        HasSystemBase(::HasSystemBase* native);
        static HasSystemBase^ __CreateInstance(::System::IntPtr native);
        HasSystemBase();

        HasSystemBase(CommonTest::HasSystemBase^ _0);

        ~HasSystemBase();

        protected:
        bool __ownsNativeInstance;
    };

    public ref class HasLongDoubles : ICppInstance
    {
    public:

        property ::HasLongDoubles* NativePtr;
        property System::IntPtr __Instance
        {
            virtual System::IntPtr get();
            virtual void set(System::IntPtr instance);
        }

        HasLongDoubles(::HasLongDoubles* native);
        static HasLongDoubles^ __CreateInstance(::System::IntPtr native);
        HasLongDoubles();

        HasLongDoubles(CommonTest::HasLongDoubles^ _0);

        ~HasLongDoubles();

        protected:
        bool __ownsNativeInstance;
    };

    public ref class HasOverloadsWithDifferentPointerKindsToSameType : ICppInstance
    {
    public:

        property ::HasOverloadsWithDifferentPointerKindsToSameType* NativePtr;
        property System::IntPtr __Instance
        {
            virtual System::IntPtr get();
            virtual void set(System::IntPtr instance);
        }

        HasOverloadsWithDifferentPointerKindsToSameType(::HasOverloadsWithDifferentPointerKindsToSameType* native);
        static HasOverloadsWithDifferentPointerKindsToSameType^ __CreateInstance(::System::IntPtr native);
        HasOverloadsWithDifferentPointerKindsToSameType();

        HasOverloadsWithDifferentPointerKindsToSameType(CommonTest::HasOverloadsWithDifferentPointerKindsToSameType^ _0);

        ~HasOverloadsWithDifferentPointerKindsToSameType();

        void Overload([System::Runtime::InteropServices::In, System::Runtime::InteropServices::Out] int% i);

        void dispose();

        protected:
        bool __ownsNativeInstance;
    };

    namespace DelegateNamespace
    {
        public ref class Common
        {
        public:
            static void F2(CommonTest::DelegateNamespace::__AnonymousDelegate0^ _0);
        };

        namespace Nested
        {
            public ref class Common
            {
            public:
                static void F1(CommonTest::DelegateNamespace::Nested::__AnonymousDelegate0^ _0);
            };
        }
    }

    namespace SomeNamespace
    {
        public ref class AbstractClass : ICppInstance
        {
        public:

            property ::SomeNamespace::AbstractClass* NativePtr;
            property System::IntPtr __Instance
            {
                virtual System::IntPtr get();
                virtual void set(System::IntPtr instance);
            }

            AbstractClass(::SomeNamespace::AbstractClass* native);
            static AbstractClass^ __CreateInstance(::System::IntPtr native);
            AbstractClass();

            AbstractClass(CommonTest::SomeNamespace::AbstractClass^ _0);

            ~AbstractClass();

            virtual void AbstractMethod();

            protected:
            bool __ownsNativeInstance;
        };
    }

    namespace Boost
    {
        namespace Detail
        {
            public ref class SwallowAssign : ICppInstance
            {
            public:

                property ::boost::detail::swallow_assign* NativePtr;
                property System::IntPtr __Instance
                {
                    virtual System::IntPtr get();
                    virtual void set(System::IntPtr instance);
                }

                SwallowAssign(::boost::detail::swallow_assign* native);
                static SwallowAssign^ __CreateInstance(::System::IntPtr native);
                SwallowAssign(CommonTest::Boost::Detail::SwallowAssign^ _0);

                ~SwallowAssign();

                protected:
                bool __ownsNativeInstance;
            };
        }
    }
}
