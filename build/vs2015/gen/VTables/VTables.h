// ----------------------------------------------------------------------------
// <auto-generated>
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
// </auto-generated>
// ----------------------------------------------------------------------------
#pragma once

#include "CppSharp.h"
#include <VTables.h>

namespace VTables
{
    ref class BaseClassVirtual;
    ref class DerivedClassVirtual;
    ref class Foo;
}

namespace VTables
{
    public ref class Foo : ICppInstance
    {
    public:

        ref class Vfoo : ICppInstance
        {
        public:

            property ::Foo::Vfoo* NativePtr;
            property System::IntPtr __Instance
            {
                virtual System::IntPtr get();
                virtual void set(System::IntPtr instance);
            }

            Vfoo(::Foo::Vfoo* native);
            static Vfoo^ __CreateInstance(::System::IntPtr native);
            Vfoo();

            Vfoo(VTables::Foo::Vfoo^ _0);

            ~Vfoo();

            protected:
            bool __ownsNativeInstance;
        };

        property ::Foo* NativePtr;
        property System::IntPtr __Instance
        {
            virtual System::IntPtr get();
            virtual void set(System::IntPtr instance);
        }

        Foo(::Foo* native);
        static Foo^ __CreateInstance(::System::IntPtr native);
        Foo();

        Foo(VTables::Foo^ _0);

        ~Foo();

        property int vfoo
        {
            int get();
        }

        property int Vbar
        {
            int get();
        }

        virtual int Append();

        virtual int Append(int a);

        int CallVirtualWithParameter(int a);

        int CallFoo();

        protected:
        bool __ownsNativeInstance;
    };

    public ref class BaseClassVirtual : ICppInstance
    {
    public:

        property ::BaseClassVirtual* NativePtr;
        property System::IntPtr __Instance
        {
            virtual System::IntPtr get();
            virtual void set(System::IntPtr instance);
        }

        BaseClassVirtual(::BaseClassVirtual* native);
        static BaseClassVirtual^ __CreateInstance(::System::IntPtr native);
        BaseClassVirtual();

        BaseClassVirtual(VTables::BaseClassVirtual^ other);

        ~BaseClassVirtual();

        static property VTables::BaseClassVirtual^ Base
        {
            VTables::BaseClassVirtual^ get();
        }

        static property VTables::BaseClassVirtual^ BasePtr
        {
            VTables::BaseClassVirtual^ get();
        }

        virtual int RetInt();

        static int VirtualCallRetInt(VTables::BaseClassVirtual^ base);

        protected:
        bool __ownsNativeInstance;
    };

    public ref class DerivedClassVirtual : VTables::BaseClassVirtual
    {
    public:

        DerivedClassVirtual(::DerivedClassVirtual* native);
        static DerivedClassVirtual^ __CreateInstance(::System::IntPtr native);
        DerivedClassVirtual();

        DerivedClassVirtual(VTables::DerivedClassVirtual^ _0);

        ~DerivedClassVirtual();

        virtual int RetInt() override;
    };
}
