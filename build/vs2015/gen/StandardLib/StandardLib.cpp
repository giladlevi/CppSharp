// ----------------------------------------------------------------------------
// <auto-generated>
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
// </auto-generated>
// ----------------------------------------------------------------------------
#include "StandardLib.h"

using namespace System;
using namespace System::Runtime::InteropServices;

StandardLib::IntWrapper::IntWrapper(::IntWrapper* native)
    : __ownsNativeInstance(false)
{
    NativePtr = native;
}

StandardLib::IntWrapper^ StandardLib::IntWrapper::__CreateInstance(::System::IntPtr native)
{
    return gcnew ::StandardLib::IntWrapper((::IntWrapper*) native.ToPointer());
}

StandardLib::IntWrapper::~IntWrapper()
{
    delete NativePtr;
}

StandardLib::IntWrapper::IntWrapper()
{
    __ownsNativeInstance = true;
    NativePtr = new ::IntWrapper();
}

StandardLib::IntWrapper::IntWrapper(StandardLib::IntWrapper^ _0)
{
    __ownsNativeInstance = true;
    if (ReferenceEquals(_0, nullptr))
        throw gcnew ::System::ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
    auto &__arg0 = *(::IntWrapper*)_0->NativePtr;
    NativePtr = new ::IntWrapper(__arg0);
}

System::IntPtr StandardLib::IntWrapper::__Instance::get()
{
    return System::IntPtr(NativePtr);
}

void StandardLib::IntWrapper::__Instance::set(System::IntPtr object)
{
    NativePtr = (::IntWrapper*)object.ToPointer();
}

int StandardLib::IntWrapper::Value::get()
{
    return ((::IntWrapper*)NativePtr)->Value;
}

void StandardLib::IntWrapper::Value::set(int value)
{
    ((::IntWrapper*)NativePtr)->Value = value;
}

StandardLib::IntWrapperValueType::IntWrapperValueType(::IntWrapperValueType* native)
{
    __Value = native->Value;
}

StandardLib::IntWrapperValueType^ StandardLib::IntWrapperValueType::__CreateInstance(::System::IntPtr native)
{
    return gcnew ::StandardLib::IntWrapperValueType((::IntWrapperValueType*) native.ToPointer());
}

int StandardLib::IntWrapperValueType::Value::get()
{
    return __Value;
}

void StandardLib::IntWrapperValueType::Value::set(int value)
{
    __Value = value;
}

StandardLib::TestVectors::TestVectors(::TestVectors* native)
    : __ownsNativeInstance(false)
{
    NativePtr = native;
}

StandardLib::TestVectors^ StandardLib::TestVectors::__CreateInstance(::System::IntPtr native)
{
    return gcnew ::StandardLib::TestVectors((::TestVectors*) native.ToPointer());
}

StandardLib::TestVectors::~TestVectors()
{
    delete NativePtr;
}

StandardLib::TestVectors::TestVectors()
{
    __ownsNativeInstance = true;
    NativePtr = new ::TestVectors();
}

System::Collections::Generic::List<int>^ StandardLib::TestVectors::GetIntVector()
{
    auto __ret = ((::TestVectors*)NativePtr)->GetIntVector();
    auto _tmp__ret = gcnew System::Collections::Generic::List<int>();
    for(auto _element : __ret)
    {
        auto _marshalElement = _element;
        _tmp__ret->Add(_marshalElement);
    }
    return _tmp__ret;
}

int StandardLib::TestVectors::SumIntVector(System::Collections::Generic::List<int>^ vec)
{
    auto _tmpvec = std::vector<int>();
    for each(int _element in vec)
    {
        auto _marshalElement = _element;
        _tmpvec.push_back(_marshalElement);
    }
    auto __arg0 = _tmpvec;
    auto __ret = ((::TestVectors*)NativePtr)->SumIntVector(__arg0);
    return __ret;
}

StandardLib::TestVectors::TestVectors(StandardLib::TestVectors^ _0)
{
    __ownsNativeInstance = true;
    if (ReferenceEquals(_0, nullptr))
        throw gcnew ::System::ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
    auto &__arg0 = *(::TestVectors*)_0->NativePtr;
    NativePtr = new ::TestVectors(__arg0);
}

System::IntPtr StandardLib::TestVectors::__Instance::get()
{
    return System::IntPtr(NativePtr);
}

void StandardLib::TestVectors::__Instance::set(System::IntPtr object)
{
    NativePtr = (::TestVectors*)object.ToPointer();
}

System::Collections::Generic::List<int>^ StandardLib::TestVectors::IntVector::get()
{
    auto _tmp__IntVector = gcnew System::Collections::Generic::List<int>();
    for(auto _element : ((::TestVectors*)NativePtr)->IntVector)
    {
        auto _marshalElement = _element;
        _tmp__IntVector->Add(_marshalElement);
    }
    return _tmp__IntVector;
}

void StandardLib::TestVectors::IntVector::set(System::Collections::Generic::List<int>^ value)
{
    auto _tmpvalue = std::vector<int>();
    for each(int _element in value)
    {
        auto _marshalElement = _element;
        _tmpvalue.push_back(_marshalElement);
    }
    ((::TestVectors*)NativePtr)->IntVector = _tmpvalue;
}

System::Collections::Generic::List<System::IntPtr>^ StandardLib::TestVectors::IntPtrVector::get()
{
    auto _tmp__IntPtrVector = gcnew System::Collections::Generic::List<System::IntPtr>();
    for(auto _element : ((::TestVectors*)NativePtr)->IntPtrVector)
    {
        auto _marshalElement = _element;
        _tmp__IntPtrVector->Add(System::IntPtr(_marshalElement));
    }
    return _tmp__IntPtrVector;
}

void StandardLib::TestVectors::IntPtrVector::set(System::Collections::Generic::List<System::IntPtr>^ value)
{
    auto _tmpvalue = std::vector<int*>();
    for each(System::IntPtr _element in value)
    {
        auto _marshalElement = (int*)_element.ToPointer();
        _tmpvalue.push_back(_marshalElement);
    }
    ((::TestVectors*)NativePtr)->IntPtrVector = _tmpvalue;
}

System::Collections::Generic::List<StandardLib::IntWrapper^>^ StandardLib::TestVectors::IntWrapperVector::get()
{
    auto _tmp__IntWrapperVector = gcnew System::Collections::Generic::List<StandardLib::IntWrapper^>();
    for(auto _element : ((::TestVectors*)NativePtr)->IntWrapperVector)
    {
        auto ___element = new ::IntWrapper(_element);
        auto _marshalElement = (___element == nullptr) ? nullptr : gcnew StandardLib::IntWrapper((::IntWrapper*)___element);
        _tmp__IntWrapperVector->Add(_marshalElement);
    }
    return _tmp__IntWrapperVector;
}

void StandardLib::TestVectors::IntWrapperVector::set(System::Collections::Generic::List<StandardLib::IntWrapper^>^ value)
{
    auto _tmpvalue = std::vector<::IntWrapper>();
    for each(StandardLib::IntWrapper^ _element in value)
    {
        auto _marshalElement = *(::IntWrapper*)_element->NativePtr;
        _tmpvalue.push_back(_marshalElement);
    }
    ((::TestVectors*)NativePtr)->IntWrapperVector = _tmpvalue;
}

System::Collections::Generic::List<StandardLib::IntWrapper^>^ StandardLib::TestVectors::IntWrapperPtrVector::get()
{
    auto _tmp__IntWrapperPtrVector = gcnew System::Collections::Generic::List<StandardLib::IntWrapper^>();
    for(auto _element : ((::TestVectors*)NativePtr)->IntWrapperPtrVector)
    {
        auto _marshalElement = (_element == nullptr) ? nullptr : gcnew StandardLib::IntWrapper((::IntWrapper*)_element);
        _tmp__IntWrapperPtrVector->Add(_marshalElement);
    }
    return _tmp__IntWrapperPtrVector;
}

void StandardLib::TestVectors::IntWrapperPtrVector::set(System::Collections::Generic::List<StandardLib::IntWrapper^>^ value)
{
    auto _tmpvalue = std::vector<::IntWrapper*>();
    for each(StandardLib::IntWrapper^ _element in value)
    {
        auto _marshalElement = (::IntWrapper*)_element->NativePtr;
        _tmpvalue.push_back(_marshalElement);
    }
    ((::TestVectors*)NativePtr)->IntWrapperPtrVector = _tmpvalue;
}

System::Collections::Generic::List<StandardLib::IntWrapperValueType>^ StandardLib::TestVectors::IntWrapperValueTypeVector::get()
{
    auto _tmp__IntWrapperValueTypeVector = gcnew System::Collections::Generic::List<StandardLib::IntWrapperValueType>();
    for(auto _element : ((::TestVectors*)NativePtr)->IntWrapperValueTypeVector)
    {
        auto _marshalElement = StandardLib::IntWrapperValueType((::IntWrapperValueType*)&_element);
        _tmp__IntWrapperValueTypeVector->Add(_marshalElement);
    }
    return _tmp__IntWrapperValueTypeVector;
}

void StandardLib::TestVectors::IntWrapperValueTypeVector::set(System::Collections::Generic::List<StandardLib::IntWrapperValueType>^ value)
{
    auto _tmpvalue = std::vector<::IntWrapperValueType>();
    for each(StandardLib::IntWrapperValueType _element in value)
    {
        auto _marshal0 = ::IntWrapperValueType();
        _marshal0.Value = _element.Value;
        auto _marshalElement = _marshal0;
        _tmpvalue.push_back(_marshalElement);
    }
    ((::TestVectors*)NativePtr)->IntWrapperValueTypeVector = _tmpvalue;
}

StandardLib::OStreamTest::OStreamTest(::OStreamTest* native)
    : __ownsNativeInstance(false)
{
    NativePtr = native;
}

StandardLib::OStreamTest^ StandardLib::OStreamTest::__CreateInstance(::System::IntPtr native)
{
    return gcnew ::StandardLib::OStreamTest((::OStreamTest*) native.ToPointer());
}

StandardLib::OStreamTest::~OStreamTest()
{
    delete NativePtr;
}

void StandardLib::OStreamTest::WriteToOStream(System::IO::TextWriter^ stream, System::String^ s)
{
    msclr::interop::marshal_context ctx_stream;
    auto __arg0 = ctx_stream.marshal_as<std::ostream*>(stream);
    auto ___arg1 = clix::marshalString<clix::E_UTF8>(s);
    auto __arg1 = ___arg1.c_str();
    ::OStreamTest::WriteToOStream(*__arg0, __arg1);
}

void StandardLib::OStreamTest::WriteToOStreamPtr(System::IO::TextWriter^ stream, System::String^ s)
{
    msclr::interop::marshal_context ctx_stream;
    auto __arg0 = ctx_stream.marshal_as<std::ostream*>(stream);
    auto ___arg1 = clix::marshalString<clix::E_UTF8>(s);
    auto __arg1 = ___arg1.c_str();
    ::OStreamTest::WriteToOStreamPtr(__arg0, __arg1);
}

StandardLib::OStreamTest::OStreamTest()
{
    __ownsNativeInstance = true;
    NativePtr = new ::OStreamTest();
}

StandardLib::OStreamTest::OStreamTest(StandardLib::OStreamTest^ _0)
{
    __ownsNativeInstance = true;
    if (ReferenceEquals(_0, nullptr))
        throw gcnew ::System::ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
    auto &__arg0 = *(::OStreamTest*)_0->NativePtr;
    NativePtr = new ::OStreamTest(__arg0);
}

System::IntPtr StandardLib::OStreamTest::__Instance::get()
{
    return System::IntPtr(NativePtr);
}

void StandardLib::OStreamTest::__Instance::set(System::IntPtr object)
{
    NativePtr = (::OStreamTest*)object.ToPointer();
}
